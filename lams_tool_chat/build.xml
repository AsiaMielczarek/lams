<?xml version="1.0"?>

<!-- 
The DOCTYPE declaration declares the location of database-specific parts of the
Ant build file. 
-->
<!DOCTYPE project [
	<!ENTITY properties SYSTEM "file:./properties.xml">
]>

<project name="lams_tool_chat" basedir="." default="usage">

	<!-- import properties from the specified file -->
	<property file="build.properties" />
	<property file="../lams_build/common.properties" />
	<property file="../lams_build/${osPropertiesName}.properties" />

	<path id="all-libs">
		<!--
	 	<fileset dir="lib">
			<include name="**/*.jar"/>
		</fileset>
		-->
		<fileset dir="${sharedlib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${j2eelibs}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="project.classpath">
		<path refid="all-libs" />
		<!-- Java CLASSPATH should be added as the last item -->
		<!-- This property is supposed to be set in eclipse  -->
		<pathelement location="${java.class.path}" />
	</path>
	
	<path id="schemaexport.classpath">
		<path refid="project.classpath"/>
		<pathelement location="${build.classes.java}"/>
	</path>

	<target name="usage">
		<echo message="" />
		<echo message="${project} build file" />
		<echo message="------------------------------------------------------" />
		<echo message="" />
		<echo message="The available targets are:" />
		<echo message="" />
		<echo message="preparedirs  --> Create the build directories" />
		<echo message="clean-build  --> Remove all the class files" />
		<echo message="compile-java --> Compile the java source files" />
		<echo message="compile-test --> Compile the java test source files" />
		<echo message="clean-db     --> Drop the tool tables" />
		<echo message="build-db     --> Drop and Create the tool tables" />
		<echo message="create-deploy-package --> Generates the deployment package" />
		<echo message="deploy-tool  --> Creates the database and default content and then deploys the jar and war file to lams.ear " />
		<echo message="test-report  --> Runs the junit testcases and generates the report " />
		<echo message="" />
	</target>

	<target name="print-classpath">
		<echo message="java.class.path = ${java.class.path}" />
		<property name="path.string" refid="project.classpath" />
		<echo message="project.classpath = ${path.string}" />
	</target>

	<!-- ================================================================ -->
	<!-- Preparations									                  -->
	<!-- ================================================================ -->
	<target name="preparedirs">
		<mkdir dir="${build}" />
		<mkdir dir="${build.classes.java}" />
		<mkdir dir="${build.classes.test}" />
		<mkdir dir="${build.lib}" />
	</target>


	<target name="clean-build" description="removes all class files">
		<delete dir="${build.classes.java}" />
		<delete dir="${build.classes.test}" />
		<delete dir="${build.lib}" />
		<delete dir="${build.deploy}"/>
		<mkdir dir="${build.classes.java}" />
		<mkdir dir="${build.classes.test}" />
		<mkdir dir="${build.lib}" />
		<mkdir dir="${build.deploy}"/>
	</target>

	<!-- ================================================================ -->
	<!-- Compilations								                  -->
	<!-- ================================================================ -->

	<target name="compile-java" depends="clean-build" description="compile java sources">
		<javac srcdir="${src.java.dir}" compiler="modern" destdir="${build.classes.java}" deprecation="on" debug="on">
			<compilerarg value="-Xlint:unchecked"/>
			<classpath>
				<path refid="project.classpath" />
			</classpath>
		</javac>
		<copy overwrite="yes" todir="${build.classes.java}/${package}">
			<fileset dir="${src.java.dir}/${package}">
				<include name="*.xml" />
				<include name="*.properties" />
				<!-- Autopatch -->
				<include name="dbupdates/*.sql" />
				<include name="dbupdates/autopatchContext.xml" />
			</fileset>
		</copy>
		<copy overwrite="yes" todir="${build.classes.java}/${package}/web">
			<fileset dir="${src.java.dir}/${package}/web">
				<include name="*.properties" />
			</fileset>
		</copy>
	</target>

	<target name="compile-test" depends="compile-java">
		<javac destdir="${build.classes.test}" compiler="modern">
			<src path="${src.test.dir}" />
			<classpath>
				<pathelement location="${build.classes.java}" />
				<path refid="project.classpath" />
			</classpath>
		</javac>
		<copy overwrite="yes" todir="${build.classes.test}">
			<fileset dir="${src.test.dir}">
				<include name="**/*.xml" />
				<include name="**/*.zip" />
			</fileset>
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- Database Tasks                                             -->
	<!-- =================================================================== -->
	<target name="clean-db" description="Deletes the Tool Tables">
		<sql driver="${db.driver}" url="${db.url.build}" userid="${db.username}" password="${db.password}" encoding="${db.encoding}">
			<classpath>
				<fileset dir="${db.driver.dir}" includes="*.jar"/> 
			</classpath>
			<transaction src="${db.scripts}/drop_lams_tool_chat.sql" />
		</sql>
	</target>

	<target name="build-db" depends="" description="Deletes and Creates the Tool tables and inserts default content">
		<sql driver="${db.driver}" url="${db.url.build}" userid="${db.username}" password="${db.password}"  encoding="${db.encoding}">
			<classpath>
				<fileset dir="${db.driver.dir}" includes="*.jar"/> 
			</classpath>
			<transaction src="${db.scripts}/create_lams_tool_chat.sql" />
		</sql>
	</target>

	<!-- ================================================================ -->
	<!-- Make jar archive for deployment        		    	          -->
	<!-- ================================================================ -->
	<target name="build-jar" depends="generate-hbm-files, compile-java" description="creates jar file">
		<delete file="${build.lib}/${product}.jar" />
		<jar jarfile="${build.lib}/${product}.jar" manifest="${conf.dir}/jar/META-INF/MANIFEST.MF">
			<fileset dir="${build.classes.java}">
			</fileset>
			<fileset dir="${conf.hibernate.mapping.dir}">
			</fileset>
		</jar>
	</target>

	<!-- = = = = = = = = = = = = = = = = = = = = = = = =  -->
	<!-- Make the war archive  for deployment             -->
	<!-- = = = = = = = = = = = = = = = = = = = = = = = =  -->
	<target name="build-war" depends="build-jar, webdoclet" description="creates war file">
		<delete file="${build.lib}/${product}.war" />
		<war warfile="${build.lib}/${product}.war" webxml="${conf.webinf.dir}/web.xml" manifest="${conf.dir}/war/META-INF/MANIFEST.MF">
			<webinf dir="${conf.webinf.dir}">
				<include name="**/*.tld" />
				<include name="*.xml" />
				<include name="*.properties" />
				<exclude name="web.xml" />
				<include name="spring/*" />
				<include name="tiles/*.xml" />
				<include name="struts/*" />
				<include name="tags/*.tag" />
			</webinf>
			<fileset dir="${conf.web.dir}">
				<include name="*" />
				<include name="common/**" />
				<include name="images/**" />
				<include name="images-for-css/**" />
				<include name="includes/**" />
				<include name="layouts/**" />
				<include name="pages/**" />
				<include name="template/**" />
				<include name="chat_client/**" />
				<!-- used by tiles -->
			</fileset>
		</war>
	</target>

	   <target name="copy-tags" depends="" description="copy the lams.tld and the lams tags">
	   		<copy todir="${conf.webinf.dir}" overwrite="yes" file="${tag.web.dir}/lams.tld" />	
			<copy todir="${conf.webinf.dir}/tags" overwrite="yes">
				<fileset dir="${tag.web.dir}/tags">
					<include name="*.tag" />
				</fileset>
			</copy>
	   </target>

	<!-- =================================================================== -->
	<!-- Deploy the chat struts jar and war                               -->
	<!-- =================================================================== -->
	<target name="deploy-war" depends="build-war" description="Deploy the tool war file and jar file">
		<delete quiet="true">
			<fileset dir="${jboss.deploy}/tmp" />
			<fileset dir="${jboss.deploy}/work" />
		</delete>
		<copy file="${build.lib}/${product}.jar" todir="${jboss.deploy}" />
		<copy file="${build.lib}/${product}.war" todir="${jboss.deploy}" />
		<copy overwrite="yes" todir="${jboss.deploy}/lams-dictionary.jar/org/lamsfoundation/lams/tool/chat">
		   <fileset dir="${conf.language.dir}">
		    <include name="**/*.properties"/>
		    <include name="**/*.txt"/>
		   </fileset>
		  </copy>
	</target>


	<!-- =================================================================== -->
	<!-- Deploy the chat struts jar and war and explode                      -->
	<!-- =================================================================== -->

	<target name="deploy-and-explode-war" depends="deploy-war, explode-tool" description="composite of multiple targets">

	</target>

	<!-- =================================================================== -->
	<!-- Generate hibernate xml files                             			 -->
	<!-- =================================================================== -->
	<target name="generate-hbm-files" description="Generate the hibernate hbm.xml files from the Java source (using XDoclet)">

		<taskdef name="hibernatedoclet" classname="xdoclet.modules.hibernate.HibernateDocletTask" classpathref="all-libs" />

		<echo message="Building hbm.xml files using XDoclet" />

		<hibernatedoclet destdir="${conf.hibernate.mapping.dir}" excludedtags="@version,@author,@todo" force="true">
			<fileset dir="${src.java.dir}">
				<include name="**/*.java" />
			</fileset>
			<hibernate version="3.0" />
		</hibernatedoclet>
	</target>
	
	<!-- exports all the hbm mappings to the specified database -->
	<target name="schemaexport" description="Exports all hbm.xml files in {conf.hibernate.mapping.dir}/hbm"
		depends="clean-build,generate-hbm-files">
	    <echo message="Run the schema export for all hbm.xml files in ${conf.hibernate.mapping.dir}/hbm"/>
		<taskdef
			name="schemaexport"
			classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"
			classpathref="schemaexport.classpath"
			>
		</taskdef>
		<schemaexport
			config="${conf.hibernate.mapping.dir}/hibernate.cfg.xml"
			quiet="no"
			text="no"
			drop="no"
			delimiter=";"
			output="${db.scripts}/table-schema.sql">
			<fileset dir="${conf.hibernate.mapping.dir}">
				<include name="**/*.hbm.xml"/>
			</fileset>
		</schemaexport>	
	</target>


	<!-- =================================================================== -->
	<!-- Run JUnit Tests                                                     -->
	<!-- =================================================================== -->
	<target name="test" depends="compile-test">
		<mkdir dir="${build.report}" />
		<junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="yes">
			<jvmarg value="-Xms512M" />
			<jvmarg value="-Xmx1024M" />
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<batchtest todir="${build.report}">
				<fileset dir="${src.test.dir}">
					<include name="**/Test*.java" />

				</fileset>
			</batchtest>
			<classpath>
				<pathelement location="${build.classes.java}" />
				<pathelement location="${build.classes.test}" />
				<pathelement location="${conf.hibernate.mapping.dir}" />
				<pathelement location="${conf.dir}" />
				<path refid="project.classpath" />
			</classpath>
		</junit>
	</target>

	<target name="test-report" depends="test">
		<mkdir dir="${build.report}/html" />
		<junitreport todir="${build.report}">
			<fileset dir="${build.report}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${build.report}/html" />
		</junitreport>
	</target>

	<!-- =================================================================== -->
	<!-- Generate struts xml files                             -->
	<!-- =================================================================== -->
	<target name="webdoclet" depends="preparedirs" description="Generate the struts xml files from the Java source (using XDoclet)">
		<taskdef name="webdoclet" classname="xdoclet.modules.web.WebDocletTask">
			<classpath refid="all-libs" />
		</taskdef>

		<webdoclet destdir="${generated.java}" force="${xdoclet.force}">

			<fileset dir="${src.java.dir}">
				<include name="**/*Action.java" />
				<include name="**/*Form.java" />
			</fileset>

			<deploymentdescriptor servletspec="2.4" distributable="false" destdir="${conf.webinf.dir}" mergedir="${conf.xdoclet.dir}" sessiontimeout="${sessiontimeout}" />

			<strutsconfigxml destdir="${conf.struts.dir}" mergedir="${conf.xdoclet.dir}" version="1.2" />
		</webdoclet>
	</target>

	<!-- =================================================================== -->
	<!-- Generate the deploy package                                         -->
	<!-- =================================================================== -->
	<target name="create-deploy-package" depends="build-war" description="Generate the deployment package.">

		<path id="deploy.lib.classpath">
			<fileset dir="${deploy.tool.dir}">
				<include name="lib/*.jar" />
			</fileset>
			<fileset dir="${sharedlib}">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<mkdir dir="${build.deploy}" />
		
		<mkdir dir="${build.deploy}/sql" />
		<mkdir dir="${build.deploy}/language" />

		<copy overwrite="yes" todir="${build.deploy}/sql">
			<fileset dir="${db.scripts}/">
				<include name="drop_lams_tool_chat.sql" />
				<include name="create_lams_tool_chat.sql" />
				<include name="activity_insert.sql" />
				<include name="library_insert.sql" />
			</fileset>
		</copy>
		
		<copy overwrite="yes" todir="${build.deploy}/sql">
			<fileset dir="${db.scripts}/">
				<include name="tool_insert.sql" />
			</fileset>	
			<filterset>
				<filter token="tool_version" value="${tool.version}" />
			</filterset>
		</copy>
		
		<copy overwrite="yes" todir="${build.deploy}/sql">
			<fileset dir="${db.scripts}/">
				<include name="db_version_insert.sql" />
			</fileset>	
			<filterset>
				<filter token="tool_version" value="${tool.version}" />
				<filter token="signature" value="${signature}" />
			</filterset>
		</copy>
		
		<copy overwrite="yes" todir="${build.deploy}/sql/updatescripts" failonerror="false">
			<fileset dir="${db.scripts}/updatescripts/">
				<include name="*.sql" />
			</fileset>
		</copy>

		<copy overwrite="yes" todir="${build.deploy}/">
			<fileset dir="${deploy.tool.dir}">
				<include name="*.*" />
			</fileset>
		</copy>

		<copy overwrite="yes" todir="${build.deploy}/language">
			<fileset dir="${conf.language.dir}">
				<include name="*.properties" />
				<include name="*.txt" />
			</fileset>
		</copy>
		
		<copy overwrite="true" todir="${build.deploy}">
			<fileset dir="${build.lib}">
				<include name="*.jar"/>
				<include name="*.war"/>
			</fileset>
		</copy>

		<taskdef name="generateDeployProperties" classname="org.lamsfoundation.lams.tool.deploy.CreateToolPackageTask">
			<classpath refid="deploy.lib.classpath" />
		</taskdef>

		<generateDeployProperties depends="compile" 
			mode="development" 
			outputPath="${build.deploy}" 
			generateForInstallers="${generate.for.installers}"
			dbPassword="${db.password}" 
			dbUsername="${db.username}" 
			dbDriverUrl="${db.url.build}" 
			dbDriverClass="com.mysql.jdbc.Driver" 
			deployFiles="${build.deploy}/${product}.war,${build.deploy}/${product}.jar" 
			toolJarFileName="${product}.jar"
			toolSignature="${signature}"
			toolVersion="${tool.version}"
			hideTool="${hideTool}"
			minServerVersionNumber="${min.server.version.number}"
			toolUpdateScriptPath="${build.deploy}/sql/updatescripts/updateTo${tool.version}.sql"
			toolTablesScriptPath="${build.deploy}/sql/create_lams_tool_chat.sql" 
			toolTablesDeleteScriptPath="${build.deploy}/sql/drop_lams_tool_chat.sql" 
			toolActivityInsertScriptPath="${build.deploy}/sql/activity_insert.sql" 
			toolLibraryInsertScriptPath="${build.deploy}/sql/library_insert.sql" 
			toolInsertScriptPath="${build.deploy}/sql/tool_insert.sql" 
			toolDBVersionScriptPath="${build.deploy}/sql/db_version_insert.sql"
			toolApplicationContextPath="/org/lamsfoundation/lams/tool/chat/chatApplicationContext.xml"
			lamsEarPath="${jboss.deploy}" toolContext="${toolContext}" 
			toolWebUri="${product}.war"
			languageFilesPackage="org.lamsfoundation.lams.tool.chat">
			
			<!-- language files go as a fileset. -->
			<!-- Not nice but can't work out how to embed them in a tag. -->
			<fileset dir="${build.deploy}/language">
				<include name="**/*.properties" />
				<include name="**/*.txt" />
			</fileset>

		</generateDeployProperties>
	</target>

	<target name="run-deploy-package" description="Run the deploy tool.">

		<path id="deploy.classpath">
			<fileset dir="${deploy.tool.dir}/lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${sharedlib}">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<echo>Deploying the Chat Tool</echo>

		<java classname="org.lamsfoundation.lams.tool.deploy.Deploy" classpathref="deploy.classpath" fork="true">
			<arg file="${build.deploy}/deploy.xml" />
			<arg value="True" />
		</java>

	</target>
	
	<target name="deploy-tool" depends="create-deploy-package, run-deploy-package" 
	   description="Build the war, jar and run the deploy tool. Deletes most old tool references from db, creates db tables, application.xml in ear, copies war and jar file to ear. deploy-tool is only designed to be run in a development environment, or on an empty db. Do not run on a production environment.">
	</target>

	<target name="delete-exploded-tool-folder" description="delete old tool exploded tool folder">
		<!-- delete old war folder tree -->
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${jboss.deploy}/${product}.war">
				<include name="**" />
			</fileset>
		</delete>
		<!-- if use explode tool target when jboss is running, explode may be failed and left the the temp folder. Here try to delete the temp folder -->
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${jboss.deploy}/temp-${product}.war">
				<include name="**" />
			</fileset>
		</delete>
	</target>

	<target name="explode-tool" depends="" description="explode tool jar and war package to a war folder">
		<!-- rename war file to avoid name conflict -->
		<move tofile="${jboss.deploy}/temp-${product}.war" file="${jboss.deploy}/${product}.war" />
		<!-- explode the ear -->
		<!-- Don't explode jar file, becuase classes in jar will conflict with those same classes files in war -->
		<!--<unjar src="${jboss.deploy}/${product}.jar" dest="${jboss.deploy}/${product}.war" />-->
		<unjar src="${jboss.deploy}/temp-${product}.war" dest="${jboss.deploy}/${product}.war" />
		<!-- delete war and jar files -->
		<delete>
			<fileset dir="${jboss.deploy}">
				<include name="temp-${product}.war" />
				<!--<include name="${product}.jar"/>-->
			</fileset>
		</delete>
	</target>

	<!-- ================================= -->
	<!--          target: synchronize-jsp  -->            
	<!--  ================================= -->
	<target name="synchronize-deploy" description="copy non-java file into deploy folder">
		<copy verbose="yes" todir="${jboss.deploy}/${product}.war">
			<fileset dir="${conf.web.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
	</target>
</project>

