<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="onCreationComplete()" verticalAlign="middle">
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.events.SliderEvent;
			import org.lamsfoundation.lams.common.util.VideoDisplayUtil;
			import org.lamsfoundation.lams.common.ui.components.VideoDisplay;
			
			[Bindable] private var _videoDisplay:VideoDisplay;
			private var playTimer:Timer;
			
			// init method called when creation completes
			private function onCreationComplete():void{
				resetTimerLabel();
				
				playTimer = new Timer(10);
				playTimer.addEventListener(TimerEvent.TIMER, updateSeekSlider);
			}
			
			/*
			// seeks to the given location of recording
			private function seekSliderChange(event:SliderEvent):void {
				_videoDisplay.seek(event.value);
				dispatchEvent(event);
			}
			*/
			
			// seek slider click handler
			private function seekSliderClick(event:SliderEvent):void {
				// if the mouse is pressed
				if(event.type == SliderEvent.THUMB_PRESS){
					// force pause
					_videoDisplay.seekPause();
					
					// redispatch the event
					dispatchEvent(event);
					
					// stop the timer so that the bar seekSlider can manually be controlled
					playTimer.stop();
				}
				// if the mouse is released
				else if(event.type == SliderEvent.THUMB_RELEASE){
					// start the timer again and allow it to regain control of the seekSlider
					playTimer.start();
					
					// redispatch the event
					dispatchEvent(event);
					
					// seek to the given value
					_videoDisplay.seek(event.value);
				}
			}
						
			// update method called from a timer (launched when metadata is received)
			private function updateSeekSlider(event:TimerEvent):void{
				// if the video isn't actually playing yet
				if(_videoDisplay.playMode == _videoDisplay.INIT_MODE){
					seekSliderBar.value = 0;
					seekSliderTimerLabel.text = "0:00" + " / " + VideoDisplayUtil.secondsToString(String(_videoDisplay.duration));
					
					/*
					seekSliderProgress.minimum = 0;
					seekSliderProgress.maximum = _videoDisplay.duration;
					seekSliderProgress.setProgress(0, _videoDisplay.duration);
					*/
				}
				// otherwise, if it is playing
				else if(_videoDisplay. playMode == _videoDisplay.READY_MODE || _videoDisplay.playMode == _videoDisplay.PLAY_MODE || _videoDisplay.playMode == _videoDisplay.PAUSE_MODE){
					seekSliderBar.value = _videoDisplay.time;
					seekSliderTimerLabel.text = VideoDisplayUtil.secondsToString(String(_videoDisplay.time)) + " / " + VideoDisplayUtil.secondsToString(String(_videoDisplay.duration));
					
					//seekSliderProgress.setProgress(_videoDisplay.bufferLength, _videoDisplay.duration);					
				}
			}
			
			// updates timerLabel when recording
			public function updateTimerLabelForRecording(event:TimerEvent):void{
				var timer:Timer = Timer(event.currentTarget);
				seekSliderTimerLabel.text = VideoDisplayUtil.secondsToString(String(timer.currentCount * timer.delay / 1000));
			}
			
			// set the minimum and maximum values of the 
			public function setMiniMaxValues(min:int, max:int):void{
				seekSliderBar.minimum = min;
				seekSliderBar.maximum = max;
			}
			
			// set the value of the seekslider
			public function setValue(value:int):void{
				seekSliderBar.value = value;
			}
			
			// set the videodisplay object
			public function set videoDisplay(myVideoDisplay:VideoDisplay):void{
				_videoDisplay = myVideoDisplay;
			}
			
			// get the videodisplay object
			public function get videoDisplay():VideoDisplay{
				return _videoDisplay;
			}
			
			// enable the seekslider
			public function enable(enabled:Boolean):void{
				seekSliderBar.enabled = enabled;
				
				if(enabled){
					playTimer.start();
				}
				else{
					playTimer.stop();
				}
			}
			
			// resets the timer
			public function resetTimerLabel():void{
				seekSliderTimerLabel.text = "0:00 / 0:00";
			}
			
			// starts the timer
			public function startTimerLabel():void{
				playTimer.start();
			}
			
			// stops the timer
			public function stopTimerLabel():void{
				playTimer.stop();
			}
			
			public function resetSeekSliderPositon():void{
				seekSliderBar.value = 0;
			}
		]]>
	</mx:Script>
	<mx:VBox width="100%" verticalGap="5" horizontalAlign="center">
		<mx:HSlider id="seekSliderBar" allowTrackClick="false" dataTipFormatFunction="VideoDisplayUtil.secondsToString" thumbPress="seekSliderClick(event)" thumbRelease="seekSliderClick(event)"  width="100%"/>
		<!-- <mx:ProgressBar id ="seekSliderProgress" height="0" labelWidth="0" width="97%" mode="manual"/> -->
	</mx:VBox>

	<mx:Label id="seekSliderTimerLabel"  text="0:0 / 0:0" width="70" textAlign="center"/>	
</mx:HBox>
