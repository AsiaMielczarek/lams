<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="500" height="341" verticalScrollPolicy="off" horizontalScrollPolicy="off" title="Debug" creationPolicy="all">
		<mx:Script>
        <![CDATA[
        	import org.lamsfoundation.lams.common.ui.components.ResizeableTextArea;
        	import mx.controls.TextArea;
        	import org.lamsfoundation.lams.common.dictionary.XMLDictionary;  
            import mx.managers.PopUpManager;
	       	
	       	// icon embeds
			[Embed(source="../../../../../../../../../lams_central/web/images/icons/accept.png")] [Bindable] private var okIcon:Class;
			[Embed(source="../../../../../../../../../lams_central/web/images/icons/information.png")] [Bindable] private var informationIcon:Class;
			
	       	private var _dictionary:XMLDictionary;
	       	
	      	public static var PRIORITY1:int = 1;
	       	public static var PRIORITY2:int = 2;
	       	public static var PRIORITY3:int = 3;
	       	public static var PRIORITY4:int = 4;
	       	public static var DEBUG:int = 5;
	       	
			private static var singleton:DebugPopUp;

	        public static function getInstance():DebugPopUp
	        {
	            if(DebugPopUp.singleton)
	            {
	                return DebugPopUp.singleton;
	            }
	            else{
	                DebugPopUp.singleton = new DebugPopUp();
	                return DebugPopUp.singleton;
	            }            
	        }
			
		   	private function initApp():void{
		   		this.focusManager.setFocus(hideButton);
		   	}
		   	
		   	public function init(dictionary:XMLDictionary):void{
		   		this._dictionary = dictionary;
				this.icon = informationIcon;
				this.title = dictionary.getLabel("videorecorder.new.recording.details");
				
				hideButton.setStyle("icon", okIcon);
		   	}
		   	
		   	public function log(message:String, priority:int):void{
		   		var messageTextArea:ResizeableTextArea = new ResizeableTextArea();
		   		messageTextArea.editable = false;
		   		messageTextArea.selectable = true;
				messageTextArea.percentWidth = 95;
				messageTextArea.setStyle("borderThickness", 0);
		   		
		   		switch(priority){
		   			case PRIORITY1:{
		   				messageTextArea.setStyle("color","red"); 
		   				break;
		   			}
		   			case PRIORITY2:{
		   				messageTextArea.setStyle("color","orange"); 
		   				break;
		   			}
		   			case PRIORITY3:{
		   				messageTextArea.setStyle("color","yellow"); 
		   				break;
		   			}
		   			case PRIORITY4:{
		   				messageTextArea.setStyle("color","green"); 
		   				break;
		   			}
		   			case DEBUG:{
		   				messageTextArea.setStyle("color","blue"); 
		   				break;
		   			}
		   			default:{
		   				messageTextArea.setStyle("color", priority); 
		   			}
		   		}
		   		
		   		var presentDate:Date = new Date();
		   		messageTextArea.text = presentDate.toDateString() + ": " + message;
		   		logArea.addChild(messageTextArea);
		   	}
		   	
		   	public function show():void{
		   		visible = true;
		   	}
		   	
		   	public function hide():void{
		   		visible = false;
		   	}
		   	
		   	public function clearMessages():void{
		   		logArea.removeAllChildren();
		   	}
		]]>
    	</mx:Script>

		<mx:HBox horizontalAlign="right" right="10" left="10" bottom="10">
				<mx:Button label="Clear" id="clearButton" click="clearMessages();"/>
				<mx:Button label="Hide" id="hideButton" click="this.visible=false;"/>
		</mx:HBox>
		<mx:VBox left="10" right="10" top="10" id="logArea" verticalScrollPolicy="on" height="251" verticalAlign="top" horizontalAlign="center" borderStyle="solid">
		</mx:VBox>
</mx:TitleWindow>
