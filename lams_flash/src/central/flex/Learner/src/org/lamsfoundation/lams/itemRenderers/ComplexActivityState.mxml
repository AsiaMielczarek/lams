<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="onCreationComplete(event)"
	width="128" layout="absolute" headerHeight="10" styleName="complexActivity" title="{data.@activityTitle}"
	doubleClickEnabled="true" click="onComplexActivityClick(event)" doubleClick="onComplexActivityDoubleClick(event)">
	
	<mx:Script>
		<![CDATA[
			import org.lamsfoundation.lams.common.util.ArgumentsToRendererFactory;
			import mx.core.Container;
			import org.lamsfoundation.lams.business.LearnerConstants;
			import org.lamsfoundation.lams.events.LearnerActivityMouseEvent;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;
			import mx.events.FlexEvent;
			
			[Bindable] public var visibleComplexActivities:int;
			private var doubleClickTimer:Timer;
			private var lastClickEvent:MouseEvent;
						
			private function onCreationComplete(event:FlexEvent):void{				
				// get visible activities
				visibleComplexActivities = getVisibleComplexActivities();
			}
			
			private function getVisibleComplexActivities():int{
				// calculate visible activities
				return data.Activity.length();
			}
		
			private function onOpenCloseBranch(event:TreeEvent):void{				
				// calculate visible activities
				visibleComplexActivities = getVisibleComplexActivities();
				for(var i:int = 0; i < complexActivityTree.openItems.length; i++){
					visibleComplexActivities += XMLList(complexActivityTree.openItems[i].Activity).length();
				}
			}
			
			private function onComplexActivityClick(event:Event):void{
				if(event is MouseEvent){
					registerClick(MouseEvent(event));
				}
				else if(event is TimerEvent){
					doubleClickTimer.stop();
					doubleClickTimer = null;
					
					var dispatchedEvent:LearnerActivityMouseEvent = new LearnerActivityMouseEvent(LearnerActivityMouseEvent.COMPLEX_ACTIVITY_CLICK);
					dispatchedEvent.mouseEvent = lastClickEvent;
					dispatchEvent(dispatchedEvent);
				}
			}
					
			private function onComplexActivityDoubleClick(event:MouseEvent):void{
				if(doubleClickTimer){
					doubleClickTimer.stop();
					doubleClickTimer = null;
				}
				
				var dispatchedEvent:LearnerActivityMouseEvent = new LearnerActivityMouseEvent(LearnerActivityMouseEvent.COMPLEX_ACTIVITY_DOUBLE_CLICK);
				dispatchedEvent.mouseEvent = event;
				dispatchEvent(dispatchedEvent);
			}
						
			private function onComplexActivityItemClick(event:ListEvent):void{				
				var dispatchedEvent:LearnerActivityMouseEvent = new LearnerActivityMouseEvent(LearnerActivityMouseEvent.COMPLEX_ACTIVITY_ITEM_CLICK);
				dispatchedEvent.listEvent = event;
				dispatchEvent(dispatchedEvent);
			}
			
			private function onComplexActivityItemDoubleClick(event:ListEvent):void{				
				var dispatchedEvent:LearnerActivityMouseEvent = new LearnerActivityMouseEvent(LearnerActivityMouseEvent.COMPLEX_ACTIVITY_ITEM_DOUBLE_CLICK);
				dispatchedEvent.listEvent = event;
				dispatchEvent(dispatchedEvent);
			}
			
			private function registerClick(event:MouseEvent):void{
				lastClickEvent = event;
				
				if(doubleClickTimer){
					doubleClickTimer.stop();
					doubleClickTimer = null;
				}
				
				doubleClickTimer = new Timer(LearnerConstants.DOUBLE_CLICK_DELAY, 1);
				doubleClickTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onComplexActivityClick)
				doubleClickTimer.start();
			}
		]]>
	</mx:Script>

	<mx:Tree id="complexActivityTree" itemRenderer="{new ArgumentsToRendererFactory(null, ComplexActivityTreeItemRenderer)}" itemOpen="onOpenCloseBranch(event)" itemClose="onOpenCloseBranch(event)"
		doubleClickEnabled="true" itemClick="onComplexActivityItemClick(event)" itemDoubleClick="onComplexActivityItemDoubleClick(event)" dataProvider="{data.Activity}" labelField="@activityTitle"
		rowCount="{visibleComplexActivities}" folderClosedIcon="{null}" folderOpenIcon="{null}" defaultLeafIcon="{null}" width="100%"/>
</mx:Panel>
