<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="initApp();" width="793" height="454" backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#FFFFFF, #FFFFFF]">
       
    <!-- httpservices -->
    <mx:HTTPService 
        id="getGroupsService"
        url="http://172.20.100.220:8080/lams/monitoring/grouping.do"
        method="POST"
        resultFormat="xml"
        result="getGroupsSuccessHandler(event);"
        fault="getGroupsFaultHandler(event);">
        
        <mx:request xmlns="">
            <method>getGroups</method>
            <activityID></activityID>
        </mx:request>
    </mx:HTTPService>

    <mx:HTTPService 
        id="getMembersNotGroupedService"
        url="http://172.20.100.220:8080/lams/monitoring/grouping.do"
        method="POST"
        resultFormat="xml"
        result="getMembersNotGroupedSuccessHandler(event);"
        fault="getMembersNotGroupedFaultHandler(event);">
        
        <mx:request xmlns="">
            <method>getClassMembersNotGrouped</method>
            <activityID></activityID>
            <lessonID></lessonID>
        </mx:request>
    </mx:HTTPService>
    
    <mx:HTTPService 
        id="getGroupMembersService"
        url="http://172.20.100.220:8080/lams/monitoring/grouping.do"
        method="POST"
        resultFormat="xml"
        result="getGroupMembersSuccessHandler(event);"
        fault="getGroupMembersFaultHandler(event);">
        
        <mx:request xmlns="">
            <method>getGroupMembers</method>
            <activityID></activityID>
            <groupID></groupID>
        </mx:request>
    </mx:HTTPService>
    
    <mx:HTTPService 
        id="addMembersService"
        url="http://172.20.100.220:8080/lams/monitoring/grouping.do"
        method="POST"
        resultFormat="xml"
        result="addMembersSuccessHandler(event);"
        fault="addMembersFaultHandler(event);">
        
        <mx:request xmlns="">
            <method>addMembers</method>
            <activityID></activityID>
            <groupID></groupID>
            <members></members>
        </mx:request>
    </mx:HTTPService>
    
    <mx:HTTPService 
        id="removeMembersService"
        url="http://172.20.100.220:8080/lams/monitoring/grouping.do"
        method="POST"
        resultFormat="xml"
        result="removeMembersSuccessHandler(event);"
        fault="removeMembersFaultHandler(event);">
        
        <mx:request xmlns="">
            <method>removeMembers</method>
            <activityID></activityID>
            <groupID></groupID>
            <members></members>
        </mx:request>
    </mx:HTTPService>
 
    <mx:HTTPService 
        id="addGroupService"
        url="http://172.20.100.220:8080/lams/monitoring/grouping.do"
        method="POST"
        resultFormat="xml"
        result="addGroupSuccessHandler(event);"
        fault="addGroupFaultHandler(event);">
        
        <mx:request xmlns="">
            <method>addGroup</method>
            <activityID></activityID>
            <name></name>
        </mx:request>
    </mx:HTTPService>

    <mx:HTTPService 
        id="removeGroupService"
        url="http://172.20.100.220:8080/lams/monitoring/grouping.do"
        method="POST"
        resultFormat="xml"
        result="removeGroupSuccessHandler(event);"
        fault="removeGroupFaultHandler(event);">
        
        <mx:request xmlns="">
            <method>removeGroup</method>
            <activityID></activityID>
            <groupID></groupID>
        </mx:request>
    </mx:HTTPService>

    <mx:HTTPService 
        id="changeGroupNameService"
        url="http://172.20.100.220:8080/lams/monitoring/grouping.do"
        method="POST"
        resultFormat="xml"
        result="changeGroupNameSuccessHandler(event);"
        fault="changeGroupNameFaultHandler(event);">
        
        <mx:request xmlns="">
            <method>changeGroupName</method>
            <groupID></groupID>
            <name></name>
        </mx:request>
    </mx:HTTPService>
        
    <mx:Script>
		<![CDATA[
			//imports
			import mx.events.CloseEvent;
			import mx.events.DropdownEvent;
			import mx.events.DragEvent;
			import mx.collections.XMLListCollection;
			import mx.core.UITextField;
			import mx.rpc.events.ResultEvent;
			import mx.controls.Spacer;
			import mx.controls.Button;
			import mx.containers.ControlBar;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.collections.ArrayCollection;
			import mx.containers.Panel;
			import mx.controls.DataGrid;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.containers.TitleWindow;
			import flash.text.TextField;
			
			// collection of panels
			private var panels:ArrayCollection = new ArrayCollection();
			
			// collection of panels respective dataproviders (also collections)
			private var panelLearnerDataProviders:ArrayCollection = new ArrayCollection();
			
			// initial learners collection (used by global datagrid)
			private var intialLearners:ArrayCollection = new ArrayCollection();
			
			// total number of groups add (even after removal)
			private var totalGroupsAdded:int = 0;
			
			// last remove event stored
			private var lastRemoveEvent:Event;
			
			// last drag event stored
			private var lastDragEvent:DragEvent;
			
			// variables grabbed from flashvars
			private var lessonID:int;
			private var activityID:int;
			private var serverUrl:String;
			private var usedForBranching:Boolean;
			private var mayDelete:Boolean;
			private var maxNumberOfGroups:int;
			private var languageXML:XML;
			private var viewMode:Boolean;
			
			// constants
			private const SERVLET_PATH:String = "monitoring/grouping.do";
			
			// initializes application
			private function initApp():void {
				// get flashvars
				lessonID = Application.application.parameters.lessonID;
				activityID = Application.application.parameters.activityID;
				serverUrl = Application.application.parameters.serverUrl;
				usedForBranching = stringToBool(Application.application.parameters.usedForBranching);
				mayDelete = stringToBool(Application.application.parameters.mayDelete);
				maxNumberOfGroups = Application.application.parameters.maxNumberOfGroups;
				languageXML = XML(Application.application.parameters.languageXML);
				viewMode = stringToBool(Application.application.parameters.viewMode);
				
				// initialize misc. stuff including events
				mainDataGrid_dg.dataProvider = intialLearners;
				mainDataGrid_dg.addEventListener(DragEvent.DRAG_DROP, dragDropHandler);
				globalAddPanel_btn.addEventListener(MouseEvent.CLICK, addPanelHandler);
				globalRemovePanel_btn.addEventListener(MouseEvent.CLICK, removePanelHandler);
				finish_btn.addEventListener(MouseEvent.CLICK, closeWindowHandler);	
				
				// if flashvars from jsp are missing
				if(lessonID == 0 || activityID == 0 || serverUrl == "" || languageXML == null) {
					Alert.show("Error occured: flashvars not initialized");
					application.enabled = false;
				}
				else {
					// if may not delete, alert the monitor that learners can be added but not removed from groups
					if(!mayDelete){
						Alert.show(languageXML.language.entry.(@key=="label.grouping.popup.drag.selection.message").name);
					}
					
					initServices();
					initButtonsAndDragging();
					initLabels();
					getMembersNotGroupedService.send();
					getGroupsService.send();
				}
			}
			
			// initialize labels from language xml
			private function initLabels():void{
				groupFunctions_lbl.text = languageXML.language.entry.(@key=="label.grouping.functions").name;
				finish_btn.label = languageXML.language.entry.(@key=="button.finished").name;
				mainDataGridCol1_col.headerText = languageXML.language.entry.(@key=="label.grouping.non.grouped.users.heading").name;
				globalAddPanel_btn.label = "+";
				globalRemovePanel_btn.label = "-";
			}
			
			// initialize buttons and dragging depending on jsp conditions
			private function initButtonsAndDragging():void {
				// allow movement of students if deleting is allowed
				mainDataGrid_dg.dragEnabled = true;
				mainDataGrid_dg.dropEnabled = true;
				mainDataGrid_dg.dragMoveEnabled = true;
				mainDataGrid_dg.allowDragSelection = true;
				
				// if groups are being used for branching, if deletion is a nono or if branching/grouping is in view mode, disable add and remove buttons
				if(usedForBranching || !mayDelete || viewMode) {
					globalAddPanel_btn.enabled = false;
					globalRemovePanel_btn.enabled = false;
				}
				// otherwise, active the buttons
				else {
					globalAddPanel_btn.enabled = true;
					globalRemovePanel_btn.enabled = true;
				}
			}
			
			// set request parameters
			private function initServices():void {
				getGroupsService.url = serverUrl + SERVLET_PATH;
				getMembersNotGroupedService.url = serverUrl + SERVLET_PATH;
				getGroupMembersService.url = serverUrl + SERVLET_PATH;
				addMembersService.url = serverUrl + SERVLET_PATH;
				removeMembersService.url = serverUrl + SERVLET_PATH;
				addGroupService.url = serverUrl + SERVLET_PATH;
				removeGroupService.url = serverUrl + SERVLET_PATH;
				changeGroupNameService.url = serverUrl + SERVLET_PATH;
				
				getGroupsService.request.activityID = activityID;
				
				getMembersNotGroupedService.request.activityID = activityID;
				getMembersNotGroupedService.request.lessonID = lessonID;
				
				getGroupMembersService.request.activityID = activityID;
				
				addMembersService.request.activityID = activityID;
				
				removeMembersService.request.activityID = activityID;
				
				addGroupService.request.activityID = activityID;
				removeGroupService.request.activityID = activityID;
			}
			
			
			// adds a new group panel
			private function addGroupPanel(id:String = null, title:String = null):Boolean {
				// create components
                var newPanel:Panel = new Panel();
                var newControlBar:ControlBar = new ControlBar();
               	var newDataGrid:DataGrid = new DataGrid();
               	var newLearnersCollection:ArrayCollection = new ArrayCollection([]);
               	var newDataGridColumn:DataGridColumn = new DataGridColumn();
               	var newPanelRemoveButton:Button = new Button();
				var horizontalSpacer:Spacer = new Spacer();
				
				/*
				// check current number of groups against max numbers of groups
				if(totalGroupsAdded >= maxNumberOfGroups) {
					Alert.show(languageXML.language.entry.(@key=="error.title").name);
					return false;
				}
				*/
				
				// increment total number of group panels added
				totalGroupsAdded++;
				
               	// push new group panel and its dataprovider into their respective collections
               	panels.addItem(newPanel);
               	panelLearnerDataProviders.addItem(newLearnersCollection);

             	// set new panelRemove button attributes
             	newPanelRemoveButton.label = "-";
             	newPanelRemoveButton.id = "panelRemove_btn";
             	newPanelRemoveButton.addEventListener(MouseEvent.CLICK, removePanelHandler);
             	
             	// set spacer attributes
             	horizontalSpacer.percentWidth = 100;
             	
             	// set new controlbar attributes
             	newControlBar.percentWidth = 100;
             	newControlBar.height = 40;
             	
             	// add the control bar's components
             	newControlBar.addChild(horizontalSpacer);
             	newControlBar.addChild(newPanelRemoveButton);
             	
             	// disactivate if deletion is not allowed
             	if(usedForBranching || !mayDelete || viewMode) {
					newPanelRemoveButton.enabled = false;
             	}

             	// set new panel attributes
                newPanel.width = learnerGroups_tile.width / 2 - 15;
                newPanel.height = learnerGroups_tile.height / 2 - 6;
                newPanel.addEventListener(MouseEvent.CLICK, changePanelTitleHandler);
                
                if(id == null){
 					newPanel.id = "group" + String(totalGroupsAdded) + "Learners_pnl";            
               	}
               	else {
               		newPanel.id = id;
               	}
               	    
                if(title == null){
 					newPanel.title = "Group " + String(totalGroupsAdded);               
               	}
               	else {
               		newPanel.title = title;
               	}

				// set new column attributes
				newDataGridColumn.headerText = languageXML.language.entry.(@key=="label.grouping.learners").name;
				newDataGridColumn.dataField = "displayName";
				
				// set new datagrid attributes
               	newDataGrid.columns = [newDataGridColumn];
               	newDataGrid.percentWidth = 100;
               	newDataGrid.percentHeight = 100;
               	newDataGrid.allowMultipleSelection = true;
               	newDataGrid.addEventListener(DragEvent.DRAG_DROP, dragDropHandler);
               	newDataGrid.dataProvider = newLearnersCollection;
				
				// set dragging properties depending
				newDataGrid.dragEnabled = mayDelete;
				newDataGrid.dragMoveEnabled= mayDelete;
				newDataGrid.allowDragSelection = mayDelete;
				newDataGrid.dropEnabled = true;
               	
				// add elements to the panel
				newPanel.addChild(newDataGrid);
				newPanel.addChild(newControlBar);
				
				// add the panel to the tile
				learnerGroups_tile.addChild(newPanel);
				
				return true;
			}
			
			// removes a given group panel
			private function removeGroupPanel(groupId:int):Boolean{
				// there must be at least one panel
				if(panels.length != 0) {
					// the given panel must be in the collection
					if(groupId < panels.length && groupId >= 0) {
						// get panel information
						var lastGroupLearners:ArrayCollection = panelLearnerDataProviders[groupId];
						var lastGroupPanel:Panel = panels[groupId];
						
						// get learners to move back to initial grid
		        		var selectedNamesString:String = "";
		        	
		        		// format the learner ids as needed serverside
		        		for(var i:int = 0; i < lastGroupLearners.length; i++){
		        			selectedNamesString += lastGroupLearners[i].id;
		        		
			        		if(i < lastGroupLearners.length - 1)
			        		{
			        			selectedNamesString += ",";
			        		}
		        		}
		        	
						// add learners back to server
						removeMembersService.request.groupID = lastGroupPanel.id;	
						removeMembersService.request.members = selectedNamesString;
						removeMembersService.send();
						
						// add learners back to main datagrid
						for(var i:int = 0; i < lastGroupLearners.length; i++) {
							intialLearners.addItem(lastGroupLearners[i]);
						}
						
						// remove group from tile
						learnerGroups_tile.removeChild(lastGroupPanel);
						
						// remove panel and its dataprovider from their respective collections
						panelLearnerDataProviders.removeItemAt(groupId);
						panels.removeItemAt(groupId);
						
						return true;
					}
				}
				return false;
			}
			
			// click handler for changing a panel's title
	        private function changePanelTitleHandler(e:Event):void {
	            if(panels.contains(e.currentTarget) && e.target is UITextField && e.target.text == e.currentTarget.title){
	            	createChangePanelTitleWindow(Panel(e.currentTarget));
	            }
	        }
	        
	        // method for creating new panel title change popups
	       	private function createChangePanelTitleWindow(clickedPanel:Panel):void{
	        	var popup:ChangePanelTitlePopUp = ChangePanelTitlePopUp(PopUpManager.createPopUp(this, ChangePanelTitlePopUp, true));
				popup.init(application.width / 2 - popup.width / 2, application.height / 2 - popup.height / 2, languageXML.language.entry.(@key=="label.grouping.popup.change.group.name").name, clickedPanel, languageXML);
	        }
	        
	        // call the change panel name service
	        public function changePanelTitle(panel:Panel, title:String):void {
	        	changeGroupNameService.request.groupID = panel.id;
	        	changeGroupNameService.request.name = title;
	        	changeGroupNameService.send();
	        }
	        
	        // find a panel index from its groupID
	        private function findPanelIndex(groupID:int):int{
	        	for(var i:int = 0; i < panels.length; i++) {
	     			if(Panel(panels[i]).id == String(groupID)){
						return i;
	     			}
	     		}
	     		
	     		return -1;
	        }
	        
	        // convert a string to a boolean
	        private function stringToBool(string:String):Boolean{
	        	switch(string){
	        		case "1":
	        		case "true":
	        		case "yes":
	        			return true;
	        		case "0":
	        		case "false":
	        		case "no":
	        			return false;
	        		default:
	        		return Boolean(string);
	        	}
	        }
	        
	        // click handler for adding a panel
	        private function addPanelHandler(e:Event):void {
	        	addGroupService.request.name = "Group " + String(totalGroupsAdded + 1);
				addGroupService.send();
	        }
	        
	        // click handler for removing a panel
            private function removePanelHandler(event:Event):void {
            	if(panels.length != 0) {
	            	lastRemoveEvent = event;
	                Alert.show(languageXML.language.entry.(@key=="label.grouping.popup.delete.group.message").name, languageXML.language.entry.(@key=="label.grouping.popup.delete.group").name, 3, this, deleteAlertClickHandler);    	
            	}
            }
            
            // click handler to confirm removing a panel
            private function deleteAlertClickHandler(event:CloseEvent):void {
                if (event.detail==Alert.YES){
                	removePanelHandlerComplete(lastRemoveEvent);
                }
            }
            
	        // handler to complete removing a panel
	        private function removePanelHandlerComplete(e:Event):void {
				if(e.target.id == "panelRemove_btn" && panels.contains(e.target.parent.parent)){
	            	removeGroupService.request.groupID = e.target.parent.parent.id;
	            	removeGroupService.send();
	            }
	            else if(e.target == globalRemovePanel_btn){
	            	removeGroupService.request.groupID = Panel(panels.getItemAt(panels.length-1)).id;
	            	removeGroupService.send();
	            }
	        }
	        
	        // click handler for the finish button
	        private function closeWindowHandler(e:MouseEvent):void{
	        	ExternalInterface.call("closeWindow");
	        }
	        
	        // handler to complete dragging users
	        private function dragDropHandler(e:DragEvent):void {
	        	// if the drag and drop source and destination are not the same
	        	if(e.dragInitiator != e.currentTarget){
	        		// get selected items in datagrid
		        	var selectedNames:Array = DataGrid(e.dragInitiator).selectedItems;
		        	var selectedNamesString:String = "";
		        	
		        	// format the learner ids as needed serverside
		        	for(var i:int = 0; i < selectedNames.length; i++){
		        		selectedNamesString += selectedNames[i].id;
		        		
		        		if(i < selectedNames.length - 1)
		        		{
		        			selectedNamesString += ",";
		        		}
		        	}
					
					// if the source is not the initial learners grid, remove members
					if(DataGrid(e.dragInitiator).id != "mainDataGrid_dg") {
						removeMembersService.request.groupID = Panel(e.dragInitiator.parent).id;
						removeMembersService.request.members = selectedNamesString;
						removeMembersService.send();
					}
					
					// if the destination is not the initial learners grid, add members
					if(DataGrid(e.currentTarget).id != "mainDataGrid_dg") {
			        	addMembersService.request.groupID = Panel(e.currentTarget.parent).id;
			        	addMembersService.request.members = selectedNamesString;
			        	addMembersService.send();
					}
	        	}
	        }
	        
	        // -- httpservice handlers --
	        private function getGroupsSuccessHandler(e:ResultEvent):void {
	        	var xmlResult:XMLListCollection = new XMLListCollection(XMLList(e.result).groups.group);
	        	var amountGroupsAdded:int = 0;
	        	
	        	// for each group returned, add a group panel and get its learners
	        	for(var i:int = 0; i < xmlResult.length; i++){
					addGroupPanel(xmlResult.getItemAt(i).id.toString(), xmlResult.getItemAt(i).name.toString());
					getGroupMembersService.request.groupID = xmlResult.getItemAt(i).id.toString();
	        		getGroupMembersService.send();
				}
	        }
	        
	      	private function getGroupsFaultHandler(e:Event):void {
	      		Alert.show(languageXML.language.entry.(@key=="error.title").name);
	        }
	       
	        private function getMembersNotGroupedSuccessHandler(e:ResultEvent):void {
	        	var xmlResult:XMLListCollection = new XMLListCollection(XMLList(e.result).users.user);
	        	var groupID:int = XMLList(e.result).groupID.toString();
	     
	        	for(var i:int = 0; i < xmlResult.length; i++){
	        		intialLearners.addItem({displayName: xmlResult.getItemAt(i).displayName.toString(), id: xmlResult.getItemAt(i).id.toString()});
	        	}
	        }
	        
	      	private function getMembersNotGroupedFaultHandler(e:Event):void {
	      		Alert.show(languageXML.language.entry.(@key=="error.title").name);
	        }
	        
	        private function getGroupMembersSuccessHandler(e:ResultEvent):void {
	        	var xmlResult:XMLListCollection = new XMLListCollection(XMLList(e.result).users.user);
	        	var groupID:int = XMLList(e.result).groupID.toString();
	     		var indexToUse:int = findPanelIndex(groupID);
	     		
	        	for(var i:int = 0; i < xmlResult.length; i++){
	        		panelLearnerDataProviders[indexToUse].addItem({displayName: xmlResult.getItemAt(i).displayName.toString(), id: xmlResult.getItemAt(i).id.toString()});
	        	}
	        }
	        
	      	private function getGroupMembersFaultHandler(e:Event):void {
	      		Alert.show(languageXML.language.entry.(@key=="error.title").name);
	        }
	        
	        private function addMembersSuccessHandler(e:ResultEvent):void {
	        	// nothing to do here
	        }
	        
	      	private function addMembersFaultHandler(e:Event):void {
	      		Alert.show(languageXML.language.entry.(@key=="error.title").name);
	        }
	        
	        private function removeMembersSuccessHandler(e:ResultEvent):void {
	        	// nothing to do here
	        }
	        
	      	private function removeMembersFaultHandler(e:Event):void {
	      		Alert.show(languageXML.language.entry.(@key=="error.title").name);
	        }
	        
	        private function addGroupSuccessHandler(e:ResultEvent):void {
	        	addGroupPanel(XMLList(e.result).group.id.toString()), XMLList(e.result).group.name.toString();
	        }
	        
	      	private function addGroupFaultHandler(e:Event):void {
	      		Alert.show(languageXML.language.entry.(@key=="error.title").name);
	        }
	        
	        private function removeGroupSuccessHandler(e:ResultEvent):void {
	        	var groupID:int = XMLList(e.result).group.id.toString();
	        	var indexToUse:int = findPanelIndex(groupID);
	        
	     		removeGroupPanel(indexToUse);
	        }
	        
	      	private function removeGroupFaultHandler(e:Event):void {
	      		Alert.show(languageXML.language.entry.(@key=="error.title").name);
	      	}
	      	
	      	private function changeGroupNameSuccessHandler(e:ResultEvent):void {
	        	var groupID:int = XMLList(e.result).group.id.toString();
	        	var groupName:String = XMLList(e.result).group.newName.toString();
	        	var indexToUse:int = findPanelIndex(groupID);
	        	
	        	Panel(panels.getItemAt(indexToUse)).title = groupName;
	        }
	        
	      	private function changeGroupNameFaultHandler(e:Event):void {
	      		Alert.show(languageXML.language.entry.(@key=="error.title").name);
	        }
	        
	        // -- getters and setters --
	        
	        public function getLanguageXML():XML{
	        	return languageXML;
	        }
		]]>
	</mx:Script>

	<mx:DataGrid id="mainDataGrid_dg" width="185" dragEnabled="true" dropEnabled="true" dragMoveEnabled="true" allowMultipleSelection="true" allowDragSelection="true" left="10" top="10" bottom="10">
		<mx:columns>
			<mx:DataGridColumn id="mainDataGridCol1_col" dataField="displayName"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:Tile verticalScrollPolicy="auto" id="learnerGroups_tile" right="10" top="10" bottom="48" left="203">
	</mx:Tile>
	<mx:HBox verticalAlign="middle" bottom="10" right="10" height="30" left="203">
		<mx:Label id="groupFunctions_lbl"/>
		<mx:Button id="globalAddPanel_btn" />
		<mx:Button id="globalRemovePanel_btn" />
		<mx:Spacer width="100%"/>
		<mx:Button id="finish_btn"/>
		<mx:SWFLoader visible="false">
			<mx:source>../bin-debug/loading_small.swf</mx:source>
		</mx:SWFLoader>
	</mx:HBox>
	
</mx:Application>
