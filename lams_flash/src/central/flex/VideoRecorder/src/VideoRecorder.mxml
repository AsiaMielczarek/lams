<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:commonComponents="org.lamsfoundation.lams.common.ui.components.*"
	xmlns:controls="com.asfusion.controls.*"
	xmlns:local="*"
	enabled="false" layout="absolute" width="100%" height="100%" backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#FFFFFF, #FFFFFF]"
	applicationComplete="onApplicationComplete(event)" 
	preinitialize="onPreinitialize(event)">
	
	<mx:Script>
		<![CDATA[
			import org.lamsfoundation.lams.common.util.ScreenShotterEvent;
			//includes
			include "HTTPServices.as"
			
			// imports
			import org.lamsfoundation.lams.common.managers.LamsAjaxOverlayManager;
			import mx.events.FlexEvent;
			import org.lamsfoundation.lams.common.popups.DebugPopUp;
			import org.lamsfoundation.lams.common.util.ArgumentsToRendererFactory;
			import org.lamsfoundation.lams.common.util.VideoDisplayUtil;
			import org.lamsfoundation.lams.common.ui.components.VideoDisplayEvent;
			import mx.events.CloseEvent;
			import org.lamsfoundation.lams.common.util.LAMSStringUtil;
			import mx.utils.StringUtil;
			import org.lamsfoundation.lams.common.ui.components.SortEvent;
			import mx.graphics.codec.PNGEncoder;
			import mx.events.SliderEvent;
			import mx.events.DragEvent;
			import com.asfusion.controls.Rating;
			import com.asfusion.controls.ratingclasses.RatingEvent;
			import mx.collections.ArrayCollection;
			import mx.events.MetadataEvent;	
			import mx.containers.TitleWindow;
			import mx.rpc.events.FaultEvent;
			import mx.controls.Alert;
			import mx.collections.XMLListCollection;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import adobe.utils.CustomActions;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import org.lamsfoundation.lams.common.dictionary.XMLDictionary;

			// connection-related
			private var nc:NetConnection;
			private var client:Object;
			private var cam:Camera = null;
			private var mic:Microphone = null;
			
			// static strings
			private static var red5App:String = "oflaDemo";
			private static var servletLocation:String = "tool/lavidr10/videoRecorderActions.do";
					
			// from flashvars
			[Bindable] private var contentEditable:Boolean;
			[Bindable] private var userId:int;
			[Bindable] private var toolSessionId:int;
			[Bindable] private var toolContentId:int;
			[Bindable] private var allowUseVoice:Boolean;
			[Bindable] private var allowUseCamera:Boolean;
			[Bindable] private var allowLearnerVideoVisibility:Boolean;
			[Bindable] private var allowLearnerVideoExport:Boolean;
			[Bindable] private var allowComments:Boolean;
			[Bindable] private var allowRatings:Boolean;
			[Bindable] private var red5ServerUrl:String;
			[Bindable] private var serverUrl:String;
			[Bindable] private var servletUrl:String;
			[Bindable] private var languageXML:XML;
			[Bindable] private var mode:String;
			[Bindable] private var contentFolderUrl:String;

			// misc
			[Bindable] private var itemClicked:Object = null;
			[Bindable] private var dictionary:XMLDictionary;
			[Bindable] private var videoRecordings:XMLList = null;
			private var filename:String = "";
			private var ratingClicked:Rating;
			private var playTimer:Timer;
			private var recLabelTimer:Timer;
			private var metadata:Object;
			private var recButtonEnableDelay:int = 2500;
			private var recButtonEnableTimer:Timer = null;
			
			// ui stuff
			private var getDetailsPopUp:GetRecordingDetailsPopUp;
			private var addCommentPopUp:AddCommentPopUp;			
			
			// icon embeds
			[Embed(source="../../../../../../lams_central/web/images/icons/control_play.png")] [Bindable] private var playIcon:Class;
			[Embed(source="../../../../../../lams_central/web/images/icons/control_pause.png")] [Bindable] private var pauseIcon:Class;
			[Embed(source="../../../../../../lams_central/web/images/icons/control_record.png")] [Bindable] private var recordIcon:Class;
			[Embed(source="../../../../../../lams_central/web/images/icons/comment_add.png")] [Bindable] private var addCommentIcon:Class;
			[Embed(source="../../../../../../lams_central/web/images/icons/exclamation.png")] [Bindable] private var exclamationIcon:Class;
			[Embed(source="../../../../../../lams_central/web/images/icons/webcam.png")] [Bindable] private var webcamIcon:Class;
			[Embed(source="../../../../../../lams_central/web/images/icons/arrow_refresh_small.png")] [Bindable] private var refreshIcon:Class;
			
			// constants
			public const TEACHER_MODE:String = "teacher";
			public const AUTHOR_MODE:String = "author";
			public const LEARNER_MODE:String = "learner";
							
			// called from preinitialize
			private function onPreinitialize(event:Event):void {
				// get flashvars
				getFlashVars();
								
				// if in teacher or author mode
				if(mode == TEACHER_MODE || mode == AUTHOR_MODE){
					allowComments = true;
					allowRatings = true;
					allowLearnerVideoVisibility = true;
					allowUseCamera = true;
					allowUseVoice = true;	
				}
								
				// for testing purposes (when running in debug)
				if(toolSessionId == 0){
					contentEditable = true;
					userId = 1;
					toolSessionId = 1;
					toolContentId = 5;
					allowUseVoice = true;
					allowUseCamera = true;
					allowComments = true;
					allowRatings = true;
					allowLearnerVideoVisibility = true;
					red5ServerUrl = "rtmp://172.20.100.22/";
					serverUrl = "http://172.20.100.220:8080/lams/";
					mode = AUTHOR_MODE;
				}
			}
			
			// called from applicationComplete
			private function onApplicationComplete(event:Event):void {
				// init labels if languageXML is not empty
				if(languageXML.toString() != ""){
					dictionary = new XMLDictionary(languageXML);
					setLabels();
					setTooltips();
				}
				else{
					dictionary = new XMLDictionary(new XML(""));
				}
				
				// set the initial icons
				setIcons();
				
				// add some listeners
				addListeners();
				
				// add the app name to the red5 url to complete the url
				red5ServerUrl += red5App;
				
				// add the servlet location to the server url to complete
				servletUrl = serverUrl + servletLocation;
				
				// add server url and servlet url to video display
				videoDisplay.serverUrl = serverUrl;
				videoDisplay.servletUrl = servletUrl;
				
				// if the cam is to be used, set that up
				cam = VideoDisplayUtil.setupCamera();
				if(allowUseCamera && cam){
					videoDisplay.attachCamera(cam);
				}
				// else remove the view camera button
				else{
					recordingButtonBox.removeChild(recordingButtonBox.getChildByName("viewCameraButton"));
				}
				
				// if the mic is to be used, set that up
				mic = VideoDisplayUtil.setupMic();
				if(allowUseVoice && mic){
					videoDisplay.attachMic(mic);
				}
				
				// if neither mic or camera are to be used
				if((!allowUseCamera && !allowUseVoice) || (!cam && !mic)){
					// remove recording button
					removeChild(getChildByName("recordingBox"));
					
					// stretch the video list
					videoList.setStyle("bottom", 10);
					videoList.invalidateList();
				}
				
				// if first time using video recorder, pop flash settings
				if(!isWebcamInfoSet())
				{
					Security.showSettings();
					setWebcamInfo(true);
				}
				
				// init components that need it
				videoInformation.init();
				
				// disable playback buttons and enable the video list
				enablePlaybackButtons(false);
				enableVideoList(true);
				seekSlider.enable(false);
				
				// if content is not editable
				if(!contentEditable){
					// disable view and record buttons
					viewCameraButton.enabled = false;
					startRecButton.enabled = false;
				}
				
				// create the connection
				createConnection();
			}
			
			// gets flashvars from request
			private function getFlashVars():void{
				red5ServerUrl = Application.application.parameters.red5ServerUrl;
				serverUrl = Application.application.parameters.serverUrl;
				contentEditable = LAMSStringUtil.stringToBool(Application.application.parameters.contentEditable);
				userId = Application.application.parameters.userId;
				toolSessionId = Application.application.parameters.toolSessionId;
				toolContentId = Application.application.parameters.toolContentId;
				allowUseVoice = LAMSStringUtil.stringToBool(Application.application.parameters.allowUseVoice);
				allowUseCamera = LAMSStringUtil.stringToBool(Application.application.parameters.allowUseCamera);
				allowLearnerVideoVisibility = LAMSStringUtil.stringToBool(Application.application.parameters.allowLearnerVideoVisibility);
				allowLearnerVideoExport = LAMSStringUtil.stringToBool(Application.application.parameters.allowLearnerVideoExport);
				allowComments = LAMSStringUtil.stringToBool(Application.application.parameters.allowComments);
				allowRatings = LAMSStringUtil.stringToBool(Application.application.parameters.allowRatings);
				languageXML = XML(Application.application.parameters.languageXML);
				mode = Application.application.parameters.mode;
				contentFolderUrl = Application.application.parameters.contentFolderUrl;
			}
			
			// sets initial labels
			private function setLabels():void{
				playButton.label = dictionary.getLabel("videorecorder.play");
				refreshButton.label = dictionary.getLabel("videorecorder.refresh");
				sortAuthorButton.label = dictionary.getLabel("videorecorder.author");
				sortByLabel.text = dictionary.getLabelAndConcatenate("videorecorder.sort.by", [":"]);
				sortDateButton.label = dictionary.getLabel("videorecorder.date");
				sortTitleButton.label = dictionary.getLabel("videorecorder.title");
				videosLabel.text = dictionary.getLabelAndConcatenate("videorecorder.videos", [":"]);
				videoInformationLabel.text = dictionary.getLabelAndConcatenate("videorecorder.video.information", [":"]);
				videoInformation.titleLabel.text = dictionary.getLabelAndConcatenate("videorecorder.title", [":"]);
				videoInformation.authorLabel.text = dictionary.getLabelAndConcatenate("videorecorder.author", [":"]);
				videoInformation.ratingLabel.text = dictionary.getLabelAndConcatenate("videorecorder.rating", [":"]);
				videoInformation.descriptionLabel.text = dictionary.getLabelAndConcatenate("videorecorder.description", [":"]);
				videoInformation.commentsLabel.text = dictionary.getLabelAndConcatenate("videorecorder.comment", ["s:"]);
				videoInformation.addCommentButton.label = dictionary.getLabel("videorecorder.add.comment");
				startRecButton.label = dictionary.getLabel("videorecorder.start.recording");
				viewCameraButton.label = dictionary.getLabel("videorecorder.view.camera");
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.waiting");
			}
			
			// sets initial tooltips
			private function setTooltips():void{
				playButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.play", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
				refreshButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.refresh", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
				sortAuthorButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.sort.author", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
				sortDateButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.sort.date", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
				sortTitleButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.sort.title", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
				viewCameraButton.toolTip = dictionary.getLabel("videorecorder.tooltip.start.camera");
				startRecButton.toolTip = dictionary.getLabel("videorecorder.tooltip.start.recording");
				
				videoInformation.addCommentButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.add.comment", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
				videoInformation.ratingButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.rate.recording", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
			}
			
			// sets initial icons
			private function setIcons():void{
				playButton.setStyle("icon", playIcon);				
				refreshButton.setStyle("icon", refreshIcon);
				
				if(viewCameraButton != null)
					viewCameraButton.setStyle("icon", webcamIcon);
					
				if(startRecButton != null)
					startRecButton.setStyle("icon", recordIcon);
					
				if(videoInformation.addCommentButton != null)
					videoInformation.addCommentButton.setStyle("icon", addCommentIcon);
			}
			
			// adds listeners
			private function addListeners():void{
				videoInformation.ratingButton.addEventListener(RatingEvent.SELECTION_CHANGE, addRatingClick);
				videoInformation.addCommentButton.addEventListener(MouseEvent.CLICK, addCommentClick);
				videoList.addEventListener("recordingDeleted", confirmDeleteClick);
				sortButtonGroup.addEventListener(SortEvent.EVENT_TYPE, sortRecordingsHandler);
				playButton.addEventListener(MouseEvent.CLICK, playClick);
				startRecButton.addEventListener(MouseEvent.CLICK, startRecordingClick);
				viewCameraButton.addEventListener(MouseEvent.CLICK, viewCameraClick);
				
				videoDisplay.addEventListener(VideoDisplayEvent.METADATA, onMetaData);
				videoDisplay.addEventListener(VideoDisplayEvent.PAUSE, onPause);
				videoDisplay.addEventListener(VideoDisplayEvent.UNPAUSE, onUnpause);
				videoDisplay.addEventListener(VideoDisplayEvent.READY, onReady);

				videoDisplay.addEventListener(VideoDisplayEvent.RESET, onReset);
				videoDisplay.addEventListener(VideoDisplayEvent.STARTCAM, onStartCamera);
				videoDisplay.addEventListener(VideoDisplayEvent.STOPCAM, onStopCamera);
				videoDisplay.addEventListener(VideoDisplayEvent.STARTPUBLISH, onStartPublish);
				videoDisplay.addEventListener(VideoDisplayEvent.STOPPUBLISH, onStopPublish);
				videoDisplay.addEventListener(VideoDisplayEvent.COMPLETE, onComplete);
				
				videoDisplay.addEventListener(VideoDisplayEvent.PAUSESEEK, onPauseSeek);
				videoDisplay.addEventListener(VideoDisplayEvent.READYSEEK, onReadySeek);
				seekSlider.addEventListener(SliderEvent.THUMB_PRESS, onSeekPress);
				seekSlider.addEventListener(SliderEvent.THUMB_RELEASE, onSeekRelease);
				
				this.addEventListener(ScreenShotterEvent.SCREENSHOTTAKEN, onScreenShotTaken);
			}
			
			// checks for previous webcam info
			private function isWebcamInfoSet():Boolean{
				var lamsVideoRecorderInfo:Object = SharedObject.getLocal("lamsWebcamInfo");
				
				if(lamsVideoRecorderInfo.data.webcamSet){
					return lamsVideoRecorderInfo.data.webcamSet;
				}else{
					return false;
				}
					
			}
			
			// sets webcam info
			private function setWebcamInfo(checked:Boolean):void{
				var lamsVideoRecorderInfo:Object = SharedObject.getLocal("lamsWebcamInfo");
				lamsVideoRecorderInfo.data.webcamSet = checked;
			}
			
			// creates connection to red5 server
			private function createConnection():void{
				// create basic netConnection object
				nc = new NetConnection();
			
				// add some listeners to it
				nc.addEventListener(NetStatusEvent.NET_STATUS, ncStatusHandler);
				nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				nc.client = this;
				
				// set the nc to the videodisplay
				videoDisplay.setNetConnection(nc);
				
				// disable playback buttons
				enablePlaybackButtons(false);
				
				// connect to the local Red5 server and wait for callback
				nc.connect(red5ServerUrl);
				
				// wait for NetStatusEvent to be thrown
			}
			
			// callback called on NetConnection connect event
			private function ncStatusHandler(event:NetStatusEvent):void {
				// get the info object
				var infoObject:Object = event.info;
				  				
				// if successful connection
				if (infoObject.code == "NetConnection.Connect.Success") {
					// enable application
					Application.application.enabled = true;
					
					// call server and get recordings, update datagrid with results
					getRecordingsFromServer(sortButtonGroup.sortBy, sortButtonGroup.sortDirection);	
				}
				// if connection unsuccessful
				else if(infoObject.code == "NetConnection.Connect.InvalidApp"){
					Application.application.enabled = false;			
    				// pop an alert
					Alert.show(dictionary.getLabel("videorecorder.web.application.not.available"));
				}
				else if(infoObject.code == "NetConnection.Connect.Failed"){
					Application.application.enabled = false;				
    				// pop an alert
					Alert.show(dictionary.getLabel("videorecorder.net.connection.not.connected"));
				}
				else if(infoObject.code == "NetConnection.Connect.Closed"){
					Application.application.enabled = false;
    				// pop an alert
					Alert.show(dictionary.getLabel("videorecorder.net.connection.closed"));
				}
			}
			
			// netconnection security error handler
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				trace("securityErrorHandler: " + event);
			}
			
			// netconnection async error handler
			private function asyncErrorHandler(event:AsyncErrorEvent):void {
				trace("securityErrorHandler: " + event);
			} 
        	
        	// bw detection handler
			public function onBWDone(infoObject:Object):void {
				// print its properties
    			trace(VideoDisplayUtil.printInfoObject(infoObject, "onBWDone"));
			}
			
			// handler to sort and update recordings
        	private function sortRecordingsHandler(event:SortEvent):void{
        		getRecordingsFromServer(sortButtonGroup.sortBy, sortButtonGroup.sortDirection);	
        	}
        	
        	// handler called when the confirm action ("ok", "cancel", "save") on a popup is hit
        	private function popUpRemovedHandler(event:Event):void{
        		// if the given popup is of type getDetailsPopUp
        		if(event.target == getDetailsPopUp){
        			// get the details
        			var title:String = getDetailsPopUp.titleInput.text;
        			var description:String = getDetailsPopUp.descriptionInput.text;
        			var recordingId:int = -1;
        			var rating:Number = 0;
        			
        			// call the http service to save a recording
        			saveRecordingToServer(userId, title, description, filename, rating, toolSessionId, recordingId);
        		}
				// if the given popup is of type addCommentPopUp
        		else if(event.target == addCommentPopUp){
        			// get the details
        			var comment:String = addCommentPopUp.commentInput.text;
        			var commentId:int = -1;
        			var toolSessionId:int = toolSessionId;
        			var recordingId:int = itemClicked.recordingId;
        			
        			// call the http service to save a comment
        			saveCommentToServer(toolSessionId, recordingId, userId, commentId, comment);
        		}
        		
        		// no matter what popup, close it
        		if(event.target is TitleWindow){
        			PopUpManager.removePopUp(TitleWindow(event.target));
        		}
        	}
			
			// view camera click handler
			private function viewCameraClick(event:MouseEvent):void{
				if(!videoDisplay.isCameraViewed){					
					// reset the seek slider timer
					seekSlider.resetTimerLabel();
					
					// start the camera
					videoDisplay.startViewCamera();
				}
				else if(videoDisplay.isCameraViewed){
					videoDisplay.stopViewCamera();
				}
			}
			
			// play click handler
			private function playClick(event:MouseEvent):void{
				videoDisplay.play();
			}
			
			// recording click handler
			private function startRecordingClick(event:MouseEvent):void{
				if(!videoDisplay.isPublishing){
					filename = VideoDisplayUtil.createFilename(toolSessionId, userId);
					videoDisplay.startPublish(filename, true);
				}
				else if(videoDisplay.isPublishing)
					videoDisplay.stopPublish();
			}
			
			// add comment click handler
			private function addCommentClick(event:MouseEvent):void{
				addCommentPopUp = AddCommentPopUp(PopUpManager.createPopUp(this, AddCommentPopUp, true));
				PopUpManager.centerPopUp(addCommentPopUp);
				addCommentPopUp.init(dictionary);
				addCommentPopUp.addEventListener("popUpClose", popUpRemovedHandler);
			}
			
			// add rating click handler
			private function addRatingClick(event:RatingEvent):void{
				if(!Rating(event.currentTarget).voted){
					var recordingId:int = itemClicked.recordingId;
					var ratingId:int = -1;
					var rating:Number = event.selectedValue;
					ratingClicked = Rating(event.currentTarget);
					
					saveRatingToServer(toolSessionId, ratingId, userId, rating, recordingId);			
				}
			}
			
			// delete recording click handler
			private function confirmDeleteClick(event:Event):void{
            	deleteRecordingFromServer(VideoProfile(event.target).data.recordingId);
            	videoInformation.resetInformation();
            	videoDisplay.reset();
			}
			
			// click handler for the videoDataGrid list
			private function videoListClick(event:ListEvent):void {
				if(videoList.enabled && !event.currentTarget.isPrototypeOf(Button)){	
					// reset video information
					videoInformation.resetInformation();
					
					// store last item clicked
					itemClicked = event.itemRenderer.data;
					
					// if content is editable
					if(contentEditable){
						// enable video information buttons
						videoInformation.enableVideoInformationButtons(true);
					}
					else{
						videoInformation.enableVideoInformationButtons(false);
					}
					
					// scroll the video information box back up to top
					videoInformation.verticalScrollPosition = 0;
					
					// update fields
					videoInformation.title.text = itemClicked.title;
					videoInformation.description.text = itemClicked.description;
					videoInformation.author.text = itemClicked.author;
					videoInformation.ratingButton.value = itemClicked.rating;
					videoInformation.printComments(itemClicked.comments);
					
					videoInformation.addCommentButton.toolTip = dictionary.getLabel("videorecorder.tooltip.add.comment");
					
					// show/hide ratings and comments depending on toolContentId status
					if(LAMSStringUtil.stringToBool(itemClicked.isToolContent)){
						videoInformation.ratingsBox.visible = false;
						videoInformation.commentsBox.visible = false;
					}
					else{
						videoInformation.ratingsBox.visible = true;
						videoInformation.commentsBox.visible = true;
					}
					
					// if no vote has been done, enable voting and show average
					if(itemClicked.userRating == -1){
						videoInformation.ratingButton.voted = false;
						videoInformation.ratingButton.toolTip = dictionary.getLabel("videorecorder.tooltip.rate.recording");
					}
					// if vote has been done, show user's vote and disable voting
					else{
						videoInformation.ratingButton.voted = true;
						videoInformation.ratingButton.votedValue = itemClicked.userRating;
						videoInformation.ratingButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.already.rated", [" ", String(itemClicked.userRating)]);
					}
					
					// make ready
					makeReadytItemClicked();
				}
				else{
					resetVideoList();
					videoInformation.resetInformation();
				}
			}
			
			// makes the clicked item ready with the video display
			private function makeReadytItemClicked():void{
				// correct filename if needed
				var filename;
				
				// is local
				var isLocal = LAMSStringUtil.stringToBool(itemClicked.isLocal);
							
				if(isLocal){
					filename = contentFolderUrl + itemClicked.filename;
				}else{
					filename = itemClicked.filename;
				}
							
				// if playing a sound file
				if(LAMSStringUtil.stringToBool(itemClicked.isJustSound)){
					// change the view stack to audio view
					videoDisplay.makeReady(filename, "audio", isLocal);
				}else{
					// change the view stack to player view
					videoDisplay.makeReady(filename, "video", isLocal);
				}
			}
			
			// onMetaData callback, called from videoDisplay
			private function onMetaData(event:VideoDisplayEvent):void{
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.buffering");
				
				seekSlider.setMiniMaxValues(0, event.metadata.duration);
				seekSlider.setValue(0);
				seekSlider.startTimerLabel();
			}
			
			// onReady callback, called from videoDisplay
			private function onReady(event:VideoDisplayEvent):void{
				enablePlaybackButtons(true);
				seekSlider.enable(true);
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.ready");
			}
			
			// onReadySeek callback, called from videoDisplay
			private function onReadySeek(event:VideoDisplayEvent):void{
				enablePlaybackButtons(true);
				seekSlider.enable(true);
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.ready");
			}
			
			// onReset callback, called from videoDisplay
			public function onReset(event:VideoDisplayEvent):void{
				// reset play buttons
				enablePlaybackButtons(false);
				seekSlider.enable(false);
				seekSlider.resetSeekSliderPositon();
				
				// set panel status label
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.waiting");
			}
			
			// onUnpause callback, called from videoDisplay
			private function onUnpause(event:VideoDisplayEvent):void{
				// set panel status label
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.playing");
				
				playButton.label = dictionary.getLabel("videorecorder.pause");
				playButton.setStyle("icon", pauseIcon);
				playButton.toolTip = dictionary.getLabel("videorecorder.tooltip.pause");
			}
			
			// onPause callback, called from videoDisplay
			private function onPause(event:VideoDisplayEvent):void{
				// set panel status label
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.paused");
				
				playButton.label = dictionary.getLabel("videorecorder.resume");
				playButton.setStyle("icon", playIcon);
				playButton.toolTip = dictionary.getLabel("videorecorder.tooltip.resume");
			}
			
			// onPauseSeek callback, called from seekSlider
			private function onPauseSeek(event:VideoDisplayEvent):void{

			}
			
			// onStartPublish callback, called from videoDisplay
			private function onStartPublish(event:VideoDisplayEvent):void{
				// set panel status label
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.recording");
				
				// change the start recording button's label
				startRecButton.label = dictionary.getLabel("videorecorder.stop.recording");
				startRecButton.toolTip = dictionary.getLabel("videorecorder.tooltip.stop.recording");
				
				viewCameraButton.enabled = false;
				viewCameraButton.label = dictionary.getLabel("videorecorder.view.camera");
				viewCameraButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.start.camera", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
				
				// disable the recording button for a given time
				startRecButton.enabled = false;
				
				if(recButtonEnableTimer){
					recButtonEnableTimer.stop();
					recButtonEnableTimer = null;
				}
				
				recButtonEnableTimer = new Timer(recButtonEnableDelay);
				recButtonEnableTimer.addEventListener(TimerEvent.TIMER, reEnableRecButton);
				recButtonEnableTimer.start();
				
				if(recLabelTimer){
					recLabelTimer.stop();
					recLabelTimer = null;
				}
				
				recLabelTimer = new Timer(250);
				recLabelTimer.addEventListener(TimerEvent.TIMER, seekSlider.updateTimerLabelForRecording);
				recLabelTimer.start();
			}
			
			// re-enables start rec button, called from onStartPublish
			private function reEnableRecButton(event:TimerEvent):void{
				startRecButton.enabled = true;
				
				recButtonEnableTimer.stop();
				recButtonEnableTimer = null;
			}
			
			// onStopPublish callback, called from videoDisplay
			private function onStopPublish(event:VideoDisplayEvent):void{		
				// change the start recording button's label
				startRecButton.label = dictionary.getLabel("videorecorder.start.recording");
				startRecButton.toolTip = dictionary.getLabel("videorecorder.tooltip.start.recording");
				
				// set panel status label
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.waiting");
				
				viewCameraButton.enabled = true;
				viewCameraButton.toolTip = dictionary.getLabel("videorecorder.tooltip.start.camera");
				
				getDetailsPopUp = GetRecordingDetailsPopUp(PopUpManager.createPopUp(this, GetRecordingDetailsPopUp, true));
				PopUpManager.centerPopUp(getDetailsPopUp);
				getDetailsPopUp.init(dictionary);
				getDetailsPopUp.addEventListener("popUpClose", popUpRemovedHandler);
				
				recLabelTimer.stop();
				recLabelTimer = null;
			}
			
			// onStartCamera callback, called from videoDisplay
			private function onStartCamera(event:VideoDisplayEvent):void{				
				// reset video information
				videoInformation.resetInformation();
				
				// change the view camera button's label
				viewCameraButton.label = dictionary.getLabel("videorecorder.stop.camera");
				viewCameraButton.toolTip = dictionary.getLabel("videorecorder.tooltip.stop.camera");
				
				// set panel status label
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.waiting");
				
				// disable buttons
				enablePlaybackButtons(false);
				enableVideoList(false);
				videoInformation.enableVideoInformationButtons(false);
			}
			
			// onStopCamera callback, called from videoDisplay
			private function onStopCamera(event:VideoDisplayEvent):void{
				// change the view camera button's label
				viewCameraButton.label = dictionary.getLabel("videorecorder.view.camera");
				viewCameraButton.toolTip = dictionary.getLabel("videorecorder.tooltip.start.camera");
				
				// set panel status label
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.waiting");
				
				// clear item clicked
				resetVideoList();
				
				// enable buttons
				enablePlaybackButtons(true);
				enableVideoList(true);
			}
			
			// onComplete callback, called from videoDisplay
			private function onComplete(event:VideoDisplayEvent):void{
				// set panel status label
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.ready");
				
				// reset play button labels
				playButton.label = dictionary.getLabel("videorecorder.play");
				playButton.setStyle("icon", playIcon);
				playButton.toolTip = dictionary.getLabel("videorecorder.tooltip.play");
			}
			
			// onSeekPress callback, called from seekSlider
			private function onSeekPress(event:SliderEvent):void{

			}
			
			// onSeekRelease callback, called from seekSlider
			private function onSeekRelease(event:SliderEvent):void{
				videoRecorderPanel.status = dictionary.getLabel("videorecorder.buffering");
				
				enablePlaybackButtons(false);
				seekSlider.enable(false);
			}
						
			// onScreenShotTaken callback, called from screenShotter in videoDisplay
			private function onScreenShotTaken(event:ScreenShotterEvent):void{
				var previewImage:BitmapData = event.previewImage;
			
				// call the service
				savePreviewImage(filename, "jpg", previewImage, toolSessionId);
			}
						   	       	
	        // enables/disables the playback related buttons
	        private function enablePlaybackButtons(enabled:Boolean):void{
	        	var trueEnable:Boolean = enabled && itemClicked != null;
	        	
	        	// play button stuff
	        	playButton.label = dictionary.getLabel("videorecorder.play");
	        	playButton.setStyle("icon", playIcon);
	        	
				playButton.enabled = trueEnable;
				
				if(trueEnable)
					playButton.toolTip = dictionary.getLabel("videorecorder.tooltip.play");
				else
					playButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.play", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
	        }
	        	        
	        // enables/disables the video list
	        private function enableVideoList(enabled:Boolean):void{
	  			refreshButton.enabled = enabled;
				videoList.enabled = enabled;
				sortDateButton.enabled = enabled;
				sortAuthorButton.enabled = enabled;
				sortTitleButton.enabled = enabled;
				
				if(enabled){
					refreshButton.toolTip = dictionary.getLabel("videorecorder.tooltip.refresh");
					sortAuthorButton.toolTip = dictionary.getLabel("videorecorder.tooltip.sort.author");
					sortDateButton.toolTip = dictionary.getLabel("videorecorder.tooltip.sort.date");
					sortTitleButton.toolTip = dictionary.getLabel("videorecorder.tooltip.sort.title");
				}
				else{
					refreshButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.refresh", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
					sortAuthorButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.sort.author", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
					sortDateButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.sort.date", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
					sortTitleButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.sort.title", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
				}
				
				// if videoRecordings is defined
				if(videoRecordings){
					var length:int = videoRecordings.length();
					// get children from videoList and enable/disable
					for(var i:int = 0; i < length; i++){
						
						var videoProfile:VideoProfile = VideoProfile(videoList.indexToItemRenderer(i));
						var deleteButton:Button = videoProfile.deleteButton;
						
						if(deleteButton){
							deleteButton.enabled = enabled;
							
							if(enabled)
								deleteButton.toolTip = dictionary.getLabel("videorecorder.tooltip.delete.recording");
							else
								deleteButton.toolTip = dictionary.getLabelAndConcatenate("videorecorder.tooltip.delete.recording", [" (", dictionary.getLabel("videorecorder.disabled"), ")"]);
						}							
					}
				}    	
	        }
	       	
	       	// resets video list
	       	private function resetVideoList():void{
				// clear item clicked
				videoList.selectedItem = null;
				itemClicked = null;
	       	}
	       	
	        // getters
	        public function getUserId():int{
	        	return userId;
	        }
	        
	        public function getAllowLearnerVideoExport():Boolean{
	        	return allowLearnerVideoExport;
	        }
	        
	       	public function getAllowLearnerVideoVisibility():Boolean{
	        	return allowLearnerVideoVisibility;
	        }
	        
	        public function getAllowRatings():Boolean{
	        	return allowRatings;
	        }
	        
	        public function getAllowComments():Boolean{
	        	return allowComments;
	        }
	        
	        public function getDictionary():XMLDictionary{
	        	return dictionary;
	        }
	        
	        public function getMode():String{
	        	return mode;
	        }
	    ]]>
	</mx:Script>

	<mx:Panel width="340" height="310" layout="absolute" left="10" top="10" title="Display:" id="videoRecorderPanel" borderColor="#E2E2E2">
	<commonComponents:VideoDisplay id="videoDisplay" width="320" height="240"/>
	<mx:ControlBar height="38" y="242">
		<mx:Button id="playButton" label="Play" width="75" textAlign="left" fontSize="10" paddingRight="0" paddingLeft="2"/>
		<commonComponents:SeekSlider id="seekSlider" videoDisplay="{videoDisplay}" width="100%"/>
	</mx:ControlBar>
	</mx:Panel>
	<mx:Label id="videoInformationLabel" text="Video information:" fontWeight="bold" top="328" left="10"/>
	<local:VideoInformation id="videoInformation" allowComments="{allowComments}" allowRatings="{allowRatings}" dictionary="{dictionary}" backgroundDisabledColor="#FFFFFF" cornerRadius="5" bottom="10" top="354" left="10" width="340" horizontalScrollPolicy="off" verticalScrollPolicy="on"/>
	<mx:HBox left="358" top="10" right="10">
		<mx:Label id="videosLabel" text="Videos:" fontWeight="bold"/>
	</mx:HBox>
	<mx:TileList borderStyle="solid" id="videoList" itemRenderer="{new ArgumentsToRendererFactory({userId:this.userId, allowLearnerVideoExport:this.allowLearnerVideoExport, allowLearnerVideoVisibility:this.allowLearnerVideoVisibility, mode:this.mode, dictionary:this.dictionary, contentEditable: this.contentEditable},VideoProfile)}" dataProvider="{videoRecordings}" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" itemClick="videoListClick(event)" top="62" left="358" bottom="63" cornerRadius="5" right="10"></mx:TileList>
	<mx:HBox verticalAlign="middle" left="358" top="36" right="10">
		<mx:Label id="sortByLabel" text="Sort by:" fontWeight="normal" fontStyle="normal"/>
		<commonComponents:SortButtonGroup width="100%" horizontalGap="3" id="sortButtonGroup">
			<commonComponents:SortButton id="sortDateButton" label="Date"  sortBy="date" selected="true" horizontalGap="0" sortDirection="descending"/>
			<commonComponents:SortButton id="sortAuthorButton" label="Author"  sortBy="author" horizontalGap="0"/>
			<commonComponents:SortButton id="sortTitleButton" label="Title"  sortBy="title" horizontalGap="0"/>
		</commonComponents:SortButtonGroup>
		<mx:Button label="Update" id="refreshButton" click="getRecordingsFromServer(sortButtonGroup.sortBy, sortButtonGroup.sortDirection)" height="17" textAlign="center"/>
	</mx:HBox>
	<mx:VBox horizontalAlign="right" right="10" bottom="10" left="357" id="recordingBox" verticalGap="5">
		<mx:Label id="recordingControlsLabel" text="Recording controls:" fontWeight="bold"/>
		<mx:HBox width="100%" horizontalAlign="right"  id="recordingButtonBox">
			<mx:Button id="viewCameraButton" label="View Camera"/>
			<mx:Button fontWeight="bold" id="startRecButton" label="Start Recording"/>
		</mx:HBox>
	</mx:VBox>
</mx:Application>