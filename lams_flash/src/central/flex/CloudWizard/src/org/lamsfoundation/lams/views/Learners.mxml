<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" width="100%" height="100%"
	xmlns:vos="org.lamsfoundation.lams.vos.*" xmlns:mate="http://mate.asfusion.com/"
	xmlns:model="org.lamsfoundation.lams.model.*"
	xmlns:validate="org.lamsfoundation.lams.validators.*" >

	<mx:Script>
		<![CDATA[
		
			import mx.events.ValidationResultEvent;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.utils.ObjectUtil;
			import mx.validators.Validator;
			
			import org.lamsfoundation.lams.events.*;
			import org.lamsfoundation.lams.common.dictionary.XMLDictionaryRegistry;
			import org.lamsfoundation.lams.common.managers.LamsAjaxOverlayManager;
   			
   			[Bindable]
   			public var learnersUnselected:ArrayCollection;
   			
   			[Bindable]
   			public var learnersSelected:ArrayCollection;
   			
   			[Bindable]
   			public var staffUnselected:ArrayCollection;
   			
   			[Bindable]
   			public var staffSelected:ArrayCollection;
   			
   			[Bindable]
   			public var learnersGroupName:String; // TODO: get from org name set at different time using dictionary
   			
   			[Bindable]
   			public var staffGroupName:String;
   			
   			[Bindable]
   			public var usersLoaded:Boolean;
   			
   			[Bindable]
   			public var lesson:Lesson;
   			
   			[Bindable]
   			public var dictionary:XMLDictionaryRegistry;	
   			
   			private function getUserSort():Sort {
   				// sort field
   				var sortField:SortField = new SortField();
   				sortField.compareFunction = sortCompareUsers;
   				
   				var userSort:Sort = new Sort();
   				userSort.fields = [sortField];
   				
   				return userSort;
   			}
   			
   			public function set learners(value:ArrayCollection):void {
   				// set default selection - all learners
   				learnersSelected = value;
   				learnersSelected.sort = getUserSort();
   				learnersSelected.refresh();
   				
   				learnersUnselected = new ArrayCollection();
   				learnersUnselected.sort = getUserSort();
   				learnersUnselected.refresh();
   				
   				//showOverlay(learners_dgd, false);
   				//showOverlay(learnersSel_dgd, false);
   			}
   			
   			public function set staff(value:ArrayCollection):void {
   				// set default selected - creator (monitor) as staff
   				staffUnselected = value;
   				staffUnselected.sort = getUserSort();
   				staffUnselected.refresh();
   				
   				staffSelected = new ArrayCollection();
   				
   				for each(var staff:Object in staffUnselected) {
   					if(staff.userID == 4) {
   						staffSelected = new ArrayCollection([staff]);
   						staffUnselected.removeItemAt(staffUnselected.getItemIndex(staff));
   						return;
   					}
   				}
   				
   				staffSelected.sort = getUserSort();
   				staffSelected.refresh();
   				
   				//showOverlay(staff_dgd, false);
   				//showOverlay(staffSel_dgd, false);
   			}
   			
   			public function printName(value:Object, column:DataGridColumn=null):String {
   				return dictionary.getLabelAndInsert('class.tab.print.name.label', [value.firstName, value.lastName, value.login]); 
   			}
   			
   			private function dragOverHandler(event:DragEvent):void {
            
                // Explpicitly handle the dragOver event.            
                event.preventDefault();
                
                // Since you are explicitly handling the dragOver event,
                // call showDropFeedback(event) to have the drop target
                // display the drop indicator.
                // The drop indicator is removed
                // automatically for the list controls by the built-in 
                // event handler for the dragDrop event.
                event.currentTarget.showDropFeedback(event);
            
                if (event.dragSource.hasFormat("items"))
                {                
                    if (validDragDrop(event)) {                    
                        DragManager.showFeedback(DragManager.MOVE);
                        return;
                    }
                    else {
                        DragManager.showFeedback(DragManager.NONE);
                        return;
                    }
                }
           	}
   			
   			private function validDragDrop(event:DragEvent):Boolean {
   				var dropTarget:DataGrid = DataGrid(event.currentTarget);
   				if(staff_dgd == dropTarget && event.dragInitiator != staffSel_dgd || 
   					staffSel_dgd == dropTarget && event.dragInitiator != staff_dgd) {
   					return false;
   				} else if(learners_dgd == dropTarget && event.dragInitiator != learnersSel_dgd || 
   					learnersSel_dgd == dropTarget && event.dragInitiator != learners_dgd) {
   					return false;
   				}
   				
   				return true;
   			}
   			
   			private function doDragExit(event:DragEvent):void { 
   				var dropTarget:DataGrid = DataGrid(event.currentTarget);
				dropTarget.hideDropFeedback(event); 
			} 
			
			private function showOverlay(component:UIComponent, value:Boolean):void {
				if(value)
					LamsAjaxOverlayManager.showOverlay(component);
				else
					LamsAjaxOverlayManager.hideOverlay(component);
			}
			
			private function showDataGridOverlay(event:Event):void {
				//showOverlay(UIComponent(event.currentTarget), true);
			}
			
			/* sort users (by name) for data grid columns */
			private function sortCompareUsers(userA:Object, userB:Object):int {
				var result:int = ObjectUtil.stringCompare(userA.lastName, userB.lastName);
				
				if(result == 0)
					result = ObjectUtil.stringCompare(userA.firstName, userB.firstName);	
				
				return result;
			}
   			
   			private function hasFocus(value:Boolean):void {
				if(value) {
					// tab is current selection
					if(!usersLoaded) {
						var wizardEvent:WizardEvent = new WizardEvent(WizardEvent.LOAD_ORGANISATION_USERS);
						this.dispatchEvent(wizardEvent);
					} else {
						// validate 
						validateUsers();
					}
				}
			}
			
			// validate learners and staff selected data-grids
			private function validateUsers(event:Event=null):void {
				var valArray:Array = Validator.validateAll(this.usersValidatorCollection);
				for each(var valEvent:ValidationResultEvent in valArray) {
					if(valEvent.results != null && valEvent.type == ValidationResultEvent.INVALID) {
						this.dispatchEvent(valEvent);
						Wizard.setValidationFocus(valEvent.currentTarget.listener);
					}	
				}
			}
			
		]]>
	</mx:Script>
	
	<!-- Event Listeners -->
	<mate:Listener type="{NavigationEvent.TAB_SELECT}" receive="hasFocus(event.selectedIndex==Wizard.LEARNERS_INDEX)" />
	
	<!-- Model ______________________________________________________________________ -->
	
	<!-- GUI ______________________________________________________________________ -->
		
	<mx:VBox width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10" verticalGap="12">
		<!-- instructions for intellectually challenged -->
		<mx:Label width="100%" textAlign="left" fontWeight="bold" text="{dictionary.getLabel('class.tab.heading.label')}" />
		
		<!-- staff/monitors selection -->
		<mx:HDividedBox height="50%" width="100%">
			<mx:DataGrid id="staff_dgd" width="50%" height="100%" dataProvider="{staffUnselected}" dropEnabled="true" dragEnabled="true" dragMoveEnabled="true" allowDragSelection="true" allowMultipleSelection="true" 
						 dragDrop="doDragExit(event)" dragExit="doDragExit(event)" dragOver="dragOverHandler(event)" creationComplete="showDataGridOverlay(event)" sortableColumns="true">
				<mx:columns>
					<mx:DataGridColumn headerText="{dictionary.getLabel('class.tab.staff.available.label')}" labelFunction="printName" sortCompareFunction="sortCompareUsers"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:DataGrid id="staffSel_dgd" width="50%" height="100%" dataProvider="{staffSelected}" dragEnabled="true" dragMoveEnabled="true" dropEnabled="true" allowDragSelection="true" allowMultipleSelection="true" 
						 dragDrop="doDragExit(event)" dragExit="doDragExit(event)" dragOver="dragOverHandler(event)" creationComplete="showDataGridOverlay(event)" sortableColumns="true">
				<mx:columns>
					<mx:DataGridColumn headerText="{dictionary.getLabel('class.tab.staff.selected.label')}" labelFunction="printName" sortCompareFunction="sortCompareUsers"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:HDividedBox>
		
		<!-- learners selection -->
		<mx:HDividedBox height="50%" width="100%">
			<mx:DataGrid id="learners_dgd" width="50%" height="100%" dataProvider="{learnersUnselected}" dragEnabled="true" dragMoveEnabled="true" dropEnabled="true" allowDragSelection="true" allowMultipleSelection="true" 
						 dragDrop="doDragExit(event)" dragExit="doDragExit(event)" dragOver="dragOverHandler(event)" creationComplete="showDataGridOverlay(event)" sortableColumns="true">
				<mx:columns>
					<mx:DataGridColumn headerText="{dictionary.getLabel('class.tab.learners.available.label')}" labelFunction="printName" sortCompareFunction="sortCompareUsers"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:DataGrid id="learnersSel_dgd" width="50%" height="100%" dataProvider="{learnersSelected}" dragEnabled="true" dragMoveEnabled="true" dropEnabled="true" allowDragSelection="true" allowMultipleSelection="true" 
						 dragDrop="doDragExit(event)" dragExit="doDragExit(event)" dragOver="dragOverHandler(event)" creationComplete="showDataGridOverlay(event)" sortableColumns="true">
				<mx:columns>
					<mx:DataGridColumn headerText="{dictionary.getLabel('class.tab.learners.selected.label')}" labelFunction="printName" sortCompareFunction="sortCompareUsers" />
				</mx:columns>
			</mx:DataGrid>
		</mx:HDividedBox>
		
	</mx:VBox>
	
	<!-- lesson name validator -->
	<mx:Array id="usersValidatorCollection">
		<validate:LessonValidator id="staffValidator" source="{lesson.newLesson}" property="staff" listener="{staffSel_dgd}" errorMessage="{dictionary.getLabel('al.validation.msg3.2')}" />
		<validate:LessonValidator id="learnersValidator" source="{lesson.newLesson}" property="learners" listener="{learnersSel_dgd}" errorMessage="{dictionary.getLabel('al.validation.msg3.2')}" />
	</mx:Array>
	
</mx:VBox>