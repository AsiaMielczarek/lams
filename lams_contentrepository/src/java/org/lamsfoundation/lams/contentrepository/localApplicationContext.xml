<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--  This configuration uses a local datasource and does not use the cache. -->
<!-- 
  Copyright (C) 2005 LAMS Foundation (http://lamsfoundation.org)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
  USA

  http://www.gnu.org/licenses/gpl.txt 
-->


<!--
  - Application context definition for content repository application context.
  - Some of this may need to move to the main context so that everyone can
  - access it.
	- Contains bean references to the transaction manager and to the DAOs in
	- dataAccessContext.xml (see web.xml's "contextConfigLocation").
	-->
<beans>

	<!-- ========================= GENERAL DEFINITIONS ========================= -->

	<!-- Message source for this context, loaded from localized "messages_xx" files -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename"><value>messages</value></property>										
	</bean>


	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	<!-- Local DataSource that works in any environment -->
	<bean id="crDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"><value>com.mysql.jdbc.Driver</value></property>
		<property name="url"><value>jdbc:mysql://localhost/lams?characterEncoding=utf8</value></property>
		<property name="username"><value>lams</value></property>
		<property name="password"><value>lamsdemo</value></property>
	</bean>

	<!-- Hibernate SessionFactory -->
	<bean id="coreSessionFactory" class="org.springframework.orm.hibernate.LocalSessionFactoryBean">
		<property name="dataSource"><ref local="crDataSource"/></property>
		<property name="mappingResources">
			<list>	
				<value>org/lamsfoundation/lams/contentrepository/CrCredential.hbm.xml</value>
 				<value>org/lamsfoundation/lams/contentrepository/CrNode.hbm.xml</value>
				<value>org/lamsfoundation/lams/contentrepository/CrNodeVersion.hbm.xml</value>
				<value>org/lamsfoundation/lams/contentrepository/CrNodeVersionProperty.hbm.xml</value>
				<value>org/lamsfoundation/lams/contentrepository/CrWorkspace.hbm.xml</value>
				<value>org/lamsfoundation/lams/contentrepository/CrWorkspaceCredential.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">net.sf.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.c3p0.minPoolSize">5</prop>
				<prop key="hibernate.c3p0.maxPoolSize">20</prop>
				<prop key="hibernate.c3p0.timeout">1800</prop>
				<prop key="hibernate.c3p0.max_statement">50</prop>
			</props>
		</property>
	</bean>

	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<bean id="crTransactionManager" class="org.springframework.orm.hibernate.HibernateTransactionManager">
		<property name="sessionFactory"><ref local="coreSessionFactory"/></property>
	</bean>


	
	<!-- ========================= BUSINESS OBJECT DEFINITIONS ======================== -->

	<!--
		- A parent bean definition which is a base definition for transaction proxies.
		- It's marked as abstract, since it's not supposed to be instantiated itself.
		- We set shared transaction attributes here, following our naming patterns.
		- The attributes can still be overridden in child bean definitions.
	-->
<!-- 	<bean id="baseTransactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" >
		<property name="transactionManager"><ref bean="transactionManager"/></property>
		<property name="transactionAttributes">
			<props>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>
-->

	<!--  repository (as repositoryAdminService) and ticket are the two main interfaces -->
	<!--  into the repository and as such have transaction definitions on their interfaces -->

	<!--  don't actually have to specify to roll back on RepositoryRuntimeException (as Runtime exceptions roll back -->
	<!--  automatically, but put then in here as documentation	-->
	<bean id="repositoryService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name ="transactionManager">
			<ref local ="crTransactionManager"/>
		</property>
		<property name ="target">
			<ref local="repositoryTarget"/>
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="login">PROPAGATION_SUPPORTS,readOnly,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="addWorkspace">PROPAGATION_REQUIRED,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="createCredentials">PROPAGATION_REQUIRED,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="assignCredentials">PROPAGATION_REQUIRED,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="updateCredentials">PROPAGATION_REQUIRED,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="addFileItem">PROPAGATION_REQUIRED,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="addPackageItem">PROPAGATION_REQUIRED,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="updateFileItem">PROPAGATION_REQUIRED,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="updatePackageItem">PROPAGATION_REQUIRED,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="deleteVersion">PROPAGATION_REQUIRED,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="deleteNode">PROPAGATION_REQUIRED,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="logout">PROPAGATION_SUPPORTS,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<!--  Read only methods -->
				<prop key="getFileItem">PROPAGATION_REQUIRED,readOnly,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="getVersionHistory">PROPAGATION_REQUIRED,readOnly,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
				<prop key="getNodeList">PROPAGATION_REQUIRED,readOnly,-RepositoryCheckedException,-RepositoryRuntimeException</prop>
			</props>
		</property>
		<property name="preInterceptors">
			<list>
				<ref local="checkCredentialTicketBeforeAdvice"/>
			</list>
		</property>
		
	</bean>

	<bean id="repositoryTarget" class="org.lamsfoundation.lams.contentrepository.service.SimpleRepository">
		<property name="workspaceDAO"><ref bean="workspaceDAO"/></property>
		<property name="credentialDAO"><ref bean="credentialDAO"/></property>
	</bean>

	<bean id="checkCredentialTicketBeforeAdvice" class="org.lamsfoundation.lams.contentrepository.CheckCredentialTicketBeforeAdvice">
	</bean>

	<bean id="node" class="org.lamsfoundation.lams.contentrepository.service.SimpleVersionedNode"
		singleton="false" destroy-method="destroy">
		<property name="nodeDAO"><ref bean="nodeDAO"/></property>
		<property name="fileDAO"><ref bean="fileDAO"/></property>
	</bean>

	<!--  DAO classes -->
	<bean id="workspaceDAO" class="org.lamsfoundation.lams.contentrepository.dao.hibernate.WorkspaceDAO">
		<property name="sessionFactory"><ref local="coreSessionFactory"/></property>
	</bean>  

	<bean id="credentialDAO" class="org.lamsfoundation.lams.contentrepository.dao.hibernate.CredentialDAO">
		<property name="sessionFactory"><ref local="coreSessionFactory"/></property>
	</bean>  

	<bean id="nodeDAO" class="org.lamsfoundation.lams.contentrepository.dao.hibernate.NodeDAO">
		<property name="sessionFactory"><ref local="coreSessionFactory"/></property>
	</bean>  

	<!--  Most DAO's are for Hibernate. fileDAO manages reading and writing files to the filesystem -->
	<bean id="fileDAO" class="org.lamsfoundation.lams.contentrepository.dao.file.FileDAO">
		<property name="repositoryLocation"><value>D:\repository</value></property>
	</bean>  

</beans>
