<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!-- 
  Copyright (C) 2005 LAMS Foundation (http://lamsfoundation.org)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
  USA

  http://www.gnu.org/licenses/gpl.txt 
-->


<!--
  - Application context definition for content repository application context.
  - Requires lams.jar applicationContent.xml.
 -->
<beans>

	<!-- Hibernate SessionFactory -->
	<bean id="crSessionFactory" class="org.springframework.orm.hibernate.LocalSessionFactoryBean">
		<property name="dataSource"><ref bean="dataSource"/></property>
		<property name="mappingResources">
			<list>	
				<value>org/lamsfoundation/lams/contentrepository/CrCredential.hbm.xml</value>
 				<value>org/lamsfoundation/lams/contentrepository/CrNode.hbm.xml</value>
				<value>org/lamsfoundation/lams/contentrepository/CrNodeVersion.hbm.xml</value>
				<value>org/lamsfoundation/lams/contentrepository/CrNodeVersionProperty.hbm.xml</value>
				<value>org/lamsfoundation/lams/contentrepository/CrWorkspace.hbm.xml</value>
				<value>org/lamsfoundation/lams/contentrepository/CrWorkspaceCredential.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">net.sf.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.c3p0.minPoolSize">5</prop>
				<prop key="hibernate.c3p0.maxPoolSize">20</prop>
				<prop key="hibernate.c3p0.timeout">1800</prop>
				<prop key="hibernate.c3p0.max_statement">50</prop>
				<!-- will need to be revisited for JBOSS 4.0 -->
				<!--  <prop key="hibernate.cache.provider_class">net.sf.hibernate.cache.TreeCacheProvider</prop> -->
			</props>
		</property>
	</bean>

	<!-- ========================= BUSINESS OBJECT DEFINITIONS ======================== -->

	<!--  repository (as repositoryAdminService) and ticket are the two main interfaces -->
	<!--  into the repository and as such have transaction definitions on their interfaces -->

	<!--  Only rollback on runtime exceptions - the checked exceptions may be handled by -->
	<!--  the calling code, so we don't want to mark the transaction as rollback.        -->
	<!--  Exceptions that we don't want people to catch shouldn't be a checked exception -->
	<bean id="repositoryService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name ="transactionManager">
			<ref bean ="transactionManager"/>
		</property>
		<property name ="target">
			<ref local="repositoryTarget"/>
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="login">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="addWorkspace">PROPAGATION_REQUIRED</prop>
				<prop key="createCredentials">PROPAGATION_REQUIRED</prop>
				<prop key="assignCredentials">PROPAGATION_REQUIRED</prop>
				<prop key="updateCredentials">PROPAGATION_REQUIRED</prop>
				<prop key="addFileItem">PROPAGATION_REQUIRED</prop>
				<prop key="addPackageItem">PROPAGATION_REQUIRED</prop>
				<prop key="updateFileItem">PROPAGATION_REQUIRED</prop>
				<prop key="updatePackageItem">PROPAGATION_REQUIRED</prop>
				<prop key="deleteVersion">PROPAGATION_REQUIRED</prop>
				<prop key="deleteNode">PROPAGATION_REQUIRED</prop>
				<prop key="logout">PROPAGATION_SUPPORTS</prop>
				<prop key="setProperty">PROPAGATION_SUPPORTS</prop>
				<!--  Read only methods -->
				<prop key="getFileItem">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="getVersionHistory">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="getNodeList">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
		<property name="preInterceptors">
			<list>
				<ref local="checkCredentialTicketBeforeAdvice"/>
			</list>
		</property>
		
	</bean>

	<bean id="repositoryTarget" class="org.lamsfoundation.lams.contentrepository.service.SimpleRepository">
		<property name="workspaceDAO"><ref bean="workspaceDAO"/></property>
		<property name="credentialDAO"><ref bean="credentialDAO"/></property>
	</bean>

	<bean id="checkCredentialTicketBeforeAdvice" class="org.lamsfoundation.lams.contentrepository.CheckCredentialTicketBeforeAdvice">
	</bean>

	<bean id="node" class="org.lamsfoundation.lams.contentrepository.service.SimpleVersionedNode"
		singleton="false" destroy-method="destroy">
		<property name="nodeDAO"><ref bean="nodeDAO"/></property>
		<property name="fileDAO"><ref bean="fileDAO"/></property>
	</bean>

	<!--  DAO classes -->
	<bean id="workspaceDAO" class="org.lamsfoundation.lams.contentrepository.dao.hibernate.WorkspaceDAO">
		<property name="sessionFactory"><ref local="crSessionFactory"/></property>
	</bean>  

	<bean id="credentialDAO" class="org.lamsfoundation.lams.contentrepository.dao.hibernate.CredentialDAO">
		<property name="sessionFactory"><ref local="crSessionFactory"/></property>
	</bean>  

	<bean id="nodeDAO" class="org.lamsfoundation.lams.contentrepository.dao.hibernate.NodeDAO">
		<property name="sessionFactory"><ref local="crSessionFactory"/></property>
	</bean>  

	<!--  Most DAO's are for Hibernate. fileDAO manages reading and writing files to the filesystem -->
	<bean id="fileDAO" class="org.lamsfoundation.lams.contentrepository.dao.file.FileDAO">
		<property name="repositoryLocation"><value>/tmp/repository</value></property>
	</bean>  

</beans>
