<?xml version="1.0"?>

<project name="LAMS-ContentRepository" basedir="." default="usage">

	<!-- import properties from the specified file -->
	<property file="build.properties"/>
	<property file="../lams_build/common.properties"/>
	<property file="../lams_build/${osPropertiesName}.properties" />

	<path id="all-libs">
		<fileset dir="${sharedlib}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${j2eelibs}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="project.classpath">
		<path refid="all-libs"/>
		<!-- Java CLASSPATH should be added as the last item -->
		<!-- This property is supposed to be set in eclipse  -->
		<pathelement location="${java.class.path}" />
	</path>
	<target name="usage">
		<echo message=""/>
		<echo message="${project} build file"/>
		<echo message="------------------------------------------------------"/>
		<echo message=""/>
		<echo message="Among the available targets are:"/>
		<echo message=""/>
		<echo message="deploy-jar  --> Deploy the content repository jar"/>
		<echo message="deploy-jarwar  --> Deploy the content repository jar and web example"/>
		<echo message="build-all  --> Make jar and war archive for deployment"/>
		<echo message="build-jar  --> Make jar archive for deployment"/>
		<echo message="build-war  --> Make war archive for deployment"/>
		<echo message="clean-build  --> Make war archive for deployment"/>
		<echo message="copyfiles --> Copy the third party jar files and cofiguration files for deployment"/> 
		<echo message="test-report --> Run the junit tests"/> 
<!--		<echo message="middlegen-cr --> <!-- Run middlegen for content repository tables"/>  -->
<!--		<echo message="hbm2java-cr --> <!-- Run hbm2java for content repository mapping files"/> -->
		<echo message="------------------------------------------------------"/>
		<echo message="The tables and test data are created as part of the lams_common db setup."/>
		<echo message="------------------------------------------------------"/>
		
		<echo message=""/>
	</target>

	<!-- =================================================================== -->
	<!-- Build and deploy all the java files                            -->
	<!-- =================================================================== -->
	<target name="build-all" depends="build-jar, build-war" description="Builds all the war/jar files">
	</target>
	

	<target name="check-driver-present">
		<available file="${db.driver}" type="dir" property="driver.present"/>
	</target>
	<target name="panic-if-driver-not-present" unless="driver.present">
		<fail>
	      The JDBC driver you have specified by including one of the files in ${basedir}/config/database
	      doesn't exist. You have to download this driver separately and put it in ${db.driver}
	      Please make sure you're using a version that is equal or superior to the one we looked for.
	      If you name the driver jar file differently, please update the db.driver property
	      in the ${basedir}/config/database/xxx.xml file accordingly.
	     </fail>
	</target>


	<!-- =================================================================== -->
	<!-- Run Middlegen For Content Repository                                -->
	<!-- Don't run this target for any more as changes have been made.       -->
	<!-- running middlegen would remove the changes.						 -->
	<!-- =================================================================== -->
	<!-- <target 
      name="middlegen-cr" 
      description="Run Middlegen For Content Repository tables" 
      unless="middlegen.skip"
      depends="init,fail-if-no-xdoclet-1.2.x,check-driver-present,panic-if-driver-not-present"
    >
		<taskdef
         name="middlegen-cr"
         classname="middlegen.MiddlegenTask"
         classpathref="all-libs"
        />

		<middlegen-cr
         appname="learningdesign"
         prefsdir="${middlegen}"
         gui="${middlegen.gui}"
         databaseurl="${db.url.build}"
         driver="${db.driver}"
         username="${db.username}"
         password="${db.password}"
         schema="${db.schema}"
         catalog="${db.catalog}"
         includeViews="false"
        >

			<hibernate 
			destination="${hbm}"
			package="${package.contentrepository.name}"
            genXDocletTags="true"
            javaTypeMapper="middlegen.plugins.hibernate.HibernateJavaTypeMapper"
            />

			<table name="lams_cr_node"/>
			<table name="lams_cr_node_version"/>
			<table name="lams_cr_node_version_property"/> 
			<table name="lams_cr_credential"/>
			<table name="lams_cr_workspace"/>
			<table name="lams_cr_workspace_credential"/>

		</middlegen-cr>

	</target>
	-->
	
	<target name="print-classpath">
		<echo message="java.class.path = ${java.class.path}"/>
	</target>

	<!-- ================================================================ -->
	<!-- Preparations									                  -->
	<!-- ================================================================ -->
	<target name="preparedirs">
		<mkdir dir="${build}"/>
		<mkdir dir="${build.classes.java}"/>
		<mkdir dir="${build.lib}"/>
	</target>


	<target name="clean-build" depends="preparedirs" description="removes all class files">
		<delete dir="${build}" quiet="false"/>
		<mkdir dir="${build}"/>
		<mkdir dir="${build.classes.java}"/>
		<mkdir dir="${build.classes.test}"/>
		<mkdir dir="${build.lib}"/>
	</target>

	<target name="compile" depends="clean-build" description="compile java sources">
		<javac srcdir="${src.java.dir}" compiler="modern"
	         	 	destdir="${build.classes.java}" deprecation="on" debug="on">
			<classpath>
				<path refid="project.classpath"/>
			</classpath>
		</javac>
		<!-- Spring files -->
		<copy overwrite="yes" todir="${build.classes.java}/org/lamsfoundation/lams/contentrepository/">
			<fileset dir="${src.java.dir}/org/lamsfoundation/lams/contentrepository">
					<include name="*.xml"/>
					<include name="*.properties"/>
			</fileset>
		</copy>
	</target>

	<target name="compile.test" depends="compile">
		<mkdir dir="${build.classes.test}"/>
		<javac destdir="${build.classes.test}" compiler="modern">
			<src path="${src.test.dir}"/>
			<classpath>
				<pathelement location="${build.classes.test}"/>
				<path refid="project.classpath"/>
			</classpath>
		</javac>
		<copy overwrite="yes" todir="${build.classes.test}">
			<fileset dir="${src.test.dir}">
				<include name="**/*.xml"/>
			</fileset>
			<fileset dir="${src.test.dir}">
				<include name="**/*.txt"/>
			</fileset>
			<fileset dir="${src.test.dir}">
				<include name="**/*.zip"/>
			</fileset>
		</copy>
	</target>

	<!-- ================================================================ -->
	<!-- Make jar archive for deployment        		    	          -->
	<!-- ================================================================ -->
	<target name="build-jar" depends="compile" description="creates jar file">
		<delete file="${build.lib}/${product}.jar"/>
		<jar jarfile="${build.lib}/${product}.jar" manifest="${conf.dir}/META-INF/MANIFEST.MF">
			<fileset dir="${build.classes.java}">
			</fileset>
			<fileset dir="${hbm}">
			</fileset>
		</jar>
		<copy overwrite="yes" todir="${build.lib}/language/${package.contentrepository}">
			<fileset dir="${conf.language.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.txt"/>
			</fileset>
		</copy>
	</target>

	<!-- = = = = = = = = = = = = = = = = = = = = = = = =  -->
	<!-- Make the war archive  for deployment             -->
	<!-- = = = = = = = = = = = = = = = = = = = = = = = =  -->
	<target name="webdoclet" depends="preparedirs">
		<webdoclet destdir="${generated.java}" force="${xdoclet.force}">
	         <fileset dir="${src.java.dir}">
	            <include name="**/Download.java" />
	            <include name="**/TestLogin.java" />
	            <include name="**/*Action.java" />
	            <include name="**/*Form.java" />
	         </fileset>

	         <deploymentdescriptor 
				         	servletspec="2.4" 
	         				distributable="false"
	         				destdir="${conf.webinf.dir}"
				         	mergedir="${conf.xdoclet.dir}"
	         				sessiontimeout="${sessiontimeout}"/>
			
	         <strutsconfigxml 
	         				destdir="${conf.struts.dir}"
	         				version="1.2" 
	         				mergedir="${conf.xdoclet.dir}"/>
			 
	     </webdoclet>
	</target>
	
	<target name="build-war" description="creates war file" depends="webdoclet,jsp-plaincopy,jsp-precompile">
		<delete file="${build.lib}/${product}.war"/>
		<war warfile="${build.lib}/${product}.war" 
  				webxml="${build.war}/WEB-INF/web.xml" manifest="${conf.dir}/war/META-INF/MANIFEST.MF">
			<fileset dir="${build.war.assembly}">
				<include name="**" />
			</fileset>
		</war>
	</target>

	<!-- =================================================================== -->
	<!-- Deploy the project's jar file only                                  -->
	<!-- =================================================================== -->
	<target name="deploy-jar" depends="build-jar" description="deploy jar file">
		<delete quiet="true">
			<fileset dir="${jboss.deploy}/tmp"/>
			<fileset dir="${jboss.deploy}/work"/>
		</delete>
		<copy file="${build.lib}/${product}.jar"
				todir="${jboss.deploy}"/>
	</target>

	<!-- =================================================================== -->
	<!-- Deploy the example struts jar and war                               -->
	<!-- =================================================================== -->
	<target name="deploy-jarwar" depends="build-jar, build-war" description="deploy example war file">
		<delete quiet="true">
			<fileset dir="${jboss.deploy}/tmp"/>
			<fileset dir="${jboss.deploy}/work"/>
		</delete>
		<copy file="${build.lib}/${product}.jar"
				todir="${jboss.deploy}"/>
		<copy file="${build.lib}/${product}.war"
				todir="${jboss.deploy}"/> 
	</target>

	<target name="generate-hbm-files" 
			description="Generate the hibernate hbm.xml files from the Java source (using XDoclet)">
		
		<taskdef name="hibernatedoclet"
			classname="xdoclet.modules.hibernate.HibernateDocletTask"
			classpathref="all-libs"/>
		
		<echo message="Building hbm.xml files using XDoclet"/>

		<hibernatedoclet
			destdir="${hbm}"
			excludedtags="@version,@author,@todo"
			force="true">
				<fileset dir="${src.java.dir}">
					<include name="**/Cr*.java"/>
				</fileset>
			<hibernate version="3.0"/>
		</hibernatedoclet>
	</target>

	<taskdef name="webdoclet" classname="xdoclet.modules.web.WebDocletTask">
	    <classpath refid="all-libs"/>
	</taskdef>


	<!-- =================================================================== -->
	<!-- Run JUnit Tests                                                     -->
	<!-- =================================================================== -->
	<target name="test-report" depends="test">
		<mkdir dir="${build.report}/html"/> 
		<junitreport todir="${build.report}"> 
			<fileset dir="${build.report}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report todir="${build.report}/html"/> 
		</junitreport>
	</target>	
	
	<target name="test" depends="compile.test"> 
		<mkdir dir="${build.report}"/>
		<junit printsummary="yes" haltonerror="no" haltonfailure="no"
			   fork="yes">
			<jvmarg value="-Xms512M"/>
			<jvmarg value="-Xmx1024M"/>
			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>
			<batchtest todir="${build.report}">
				<fileset dir="${src.test.dir}">
					<include name="**/Test*.java"/>
					<exclude name="**/AllTests.java"/>
				</fileset>
			</batchtest> 
			<classpath>
				<pathelement location="${build.classes.java}"/>
				<pathelement location="${build.classes.test}"/>
				<pathelement location="${hbm}"/>
				<path refid="project.classpath"/>
			</classpath>
		</junit>
	</target>
	
	<!-- Runs if jsp.precompile setting is set in lams_build/common.properties -->
	<target name="jsp-precompile" if="jsp.precompile">
		<!-- Work on a copy of web files, not originals-->
		<echo>Copying web files</echo>
		<delete dir="${build.war}" quiet="false"/>
	 	<copy overwrite="yes" todir="${build.war}">
			<fileset dir="${conf.web.dir}">
				<include name="**"/>
				<exclude name="WEB-INF/classes"/>
			</fileset>
	 	</copy>
		
		<!-- Define JSP compiler -->
		<path id="jsp.precompile.classpath">
			<path refid="project.classpath"/>
			<pathelement location="${build.classes.java}"/>
			<fileset dir="${jboss.home}/lib">
				<include name="jboss-common-core.jar" />
				<include name="jboss-logging-spi.jar" />
			</fileset>
			<fileset dir="${jboss.ear.deployers}/jbossweb.deployer">
				<include name="*.jar" />
			</fileset>
	        <fileset dir="${jboss.ear.deploy}/jbossweb.sar">
	            <include name="jbossweb.jar" />
	        </fileset>
		</path>
		<taskdef classname="org.apache.jasper.JspC" name="jasper2" classpathref="jsp.precompile.classpath" />
		
		<!-- Generate Java files and put servlet mappings in web.xml file -->
		<echo>Generating Java source from JSP pages</echo>
		<jasper2 uriroot="${build.war}"
			webXmlFragment="${build.war}/WEB-INF/generated_web.xml"
			outputDir="${build.war}/WEB-INF/src"
			package="${jsp.java.src.package}"
			addWebXmlMappings="true" validateXml="false" failOnError="true"
		/>
		
		<!-- Compile main Java source as some JSPs refer to it
		Uncomment if you get "class not found" errors when precompiling JSPs
		<antcall target="compile-java"/>
		-->
		
		<!-- Compile Java files generated from JSPs -->
		<echo>Compiling JSP classes</echo>
		
		<!-- Make src folder if it does not exist i.e. no JSPs were compiled in previous step -->
		<mkdir dir="${build.war}/WEB-INF/src"/>
		<mkdir dir="${build.war}/WEB-INF/classes"/>
	    <javac destdir="${build.war}/WEB-INF/classes"
	           optimize="on"
	           debug="off" failonerror="true"
	           srcdir="${build.war}/WEB-INF/src" 
		  	   excludes="**/*.smap"
	    	   classpathref="jsp.precompile.classpath">
	      <include name="**" />
	      <exclude name="tags/**" />
	    </javac>
		
		<!-- Prepare files for WAR, exclude plain JSP and tags -->
		<echo>Copying web resources</echo>
		<copy todir="${build.war.assembly}">	
			<fileset dir="${build.war}">
				<include name="**"/>
				<exclude name="WEB-INF/src/"/>
				<exclude name="WEB-INF/web.xml"/>
				<exclude name="**/*.java"/>
				<exclude name="**/*.jsp"/>
				<exclude name="**/*.tag"/>
				<exclude name="**/*.tld"/>
				<exclude name="**/.cvsignore"/>
			</fileset>
		</copy>
		
	 	<copy todir="${build.war.assembly}/WEB-INF/lib" flatten="true" failonerror="false">
			<fileset dir="${basedir}/lib">
				<include name="**/*"/>
			</fileset>
	 	</copy>
	</target>
					
	<!-- Runs if jsp.precompile setting is NOT set in lams_build/common.properties 
		 JSPs will be compiled at runtime, which is default behaviour allowing hotdeploy -->
	<target name="jsp-plaincopy" unless="jsp.precompile">
		<delete dir="${build.war}" quiet="false"/>
		
		<echo>Copying web resources</echo>
	 	<copy todir="${build.war}">
			<fileset dir="${conf.web.dir}">
				<include name="WEB-INF/web.xml"/>
			</fileset>
	 	</copy>
		
	 	<copy todir="${build.war.assembly}">
			<fileset dir="${conf.web.dir}">
				<include name="**"/>
				<exclude name="WEB-INF/web.xml"/>
				<exclude name="WEB-INF/classes"/>
				<exclude name="**/.cvsignore"/>
			</fileset>
	 	</copy>
		
	 	<copy todir="${build.war.assembly}/WEB-INF/lib" flatten="true" failonerror="false">
			<fileset dir="${basedir}/lib">
				<include name="**/*"/>
			</fileset>
	 	</copy>
	</target>
</project>

