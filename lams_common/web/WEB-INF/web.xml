<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_4.dtd">

<web-app>

	<!--
		To use non XDoclet filters, create a filters.xml file that
		contains the additional filters (eg Sitemesh) and place it in your
		projects merge dir.  Don't include filter-mappings in this file,
		include them in a file called filter-mappings.xml and put that in
		the same directory.
	-->
	
	<display-name>LAMS</display-name>

	<description>Learning Acitivity Management System</description>
	
	<!--
	  - Location of the Log4J config file, for initialization and refresh checks.
	  - Applied by Log4jConfigListener.
	  -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.xml</param-value>
	</context-param>

	<!--
	  - Location of the XML file that defines the root application context.
	  - Applied by ContextLoaderServlet.
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/applicationContext.xml
		</param-value>
	</context-param>

	<!--
	  - Loads the root application context of this web app at startup,
	  - by default from "/WEB-INF/applicationContext.xml".
		- Note that it is preferable to use ContextLoaderListener in a servlet container
		- that follows the Servlet 2.4 initialization order (most Servlet 2.3 containers do).
		-
	  - Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
	  - to access it anywhere in the web application, outside of the framework.
	  -
	  - The root context is the parent of all servlet-specific contexts.
	  - This means that its beans are automatically available in these child contexts,
	  - both for getBean(name) calls and (external) bean references.
		-->
	<servlet>
		<servlet-name>context</servlet-name>
		<servlet-class>org.springframework.web.context.ContextLoaderServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!--
	  - Struts servlet that dispatches requests to registered actions.
		- Reads its configuration from "struts-config.xml".
		-
		- A web app can just contain one such servlet.
		- If you need multiple namespaces, use Struts' module mechanism.
    -->
	<servlet>
		<servlet-name>action</servlet-name>
		<servlet-class>
			org.apache.struts.action.ActionServlet
		</servlet-class>
		<init-param>
			<param-name>config</param-name>
			<param-value>/WEB-INF/struts/struts-config.xml</param-value>
		</init-param>
		<init-param>
			<param-name>debug</param-name>
			<param-value>999</param-value>
		</init-param>
		<init-param>
			<param-name>detail</param-name>
			<param-value>2</param-value>
		</init-param>
		<init-param>
			<param-name>validate</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<!--
		- Dispatcher servlet mapping for the main web user interface.
	-->
	<servlet-mapping>
		<servlet-name>action</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

	<session-config>
		<session-timeout>3600</session-timeout>
	</session-config>

	<!--
		To specify error pages, create a file named error-pages.xml, put it in your project's mergedir.
		Organize error-pages.xml following this DTD slice:
		
		<!ELEMENT error-page ((error-code | exception-type), location)>
	-->

	<!-- Struts Tag Library Defintions -->
	<taglib>
		<taglib-uri>/WEB-INF/struts-bean.tld</taglib-uri>
		<taglib-location>
			/WEB-INF/struts/struts-bean.tld
		</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>/WEB-INF/struts-html.tld</taglib-uri>
		<taglib-location>
			/WEB-INF/struts/struts-html.tld
		</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>/WEB-INF/struts-logic.tld</taglib-uri>
		<taglib-location>
			/WEB-INF/struts/struts-logic.tld
		</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>/WEB-INF/struts-template.tld</taglib-uri>
		<taglib-location>
			/WEB-INF/struts/struts-template.tld
		</taglib-location>
	</taglib>

	<!-- JSTL Tag Library Defintions -->
	<taglib>
		<taglib-uri>http://java.sun.com/jstl/core</taglib-uri>
		<taglib-location>/WEB-INF/jstl/c.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>http://java.sun.com/jstl/core_rt</taglib-uri>
		<taglib-location>/WEB-INF/jstl/c-rt.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>http://java.sun.com/jstl/fmt</taglib-uri>
		<taglib-location>/WEB-INF/jstl/fmt.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>http://java.sun.com/jstl/fmt_rt</taglib-uri>
		<taglib-location>/WEB-INF/jstl/fmt-rt.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>http://java.sun.com/jstl/xml</taglib-uri>
		<taglib-location>/WEB-INF/jstl/x.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>http://java.sun.com/jstl/xml_rt</taglib-uri>
		<taglib-location>/WEB-INF/jstl/x-rt.tld</taglib-location>
	</taglib>

	<!-- Tomcat security config -->
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>Secure Content</web-resource-name>
			<url-pattern>*.jsp</url-pattern>
			<url-pattern>*.html</url-pattern>
		</web-resource-collection>
		<!-- 
		<auth-constraint>
			<role-name>*</role-name>
		</auth-constraint>
		-->
	</security-constraint>

	<login-config>
		<auth-method>FORM</auth-method>
		<form-login-config>
			<form-login-page>/login.jsp</form-login-page>
			<form-error-page>/login.jsp?failed=y</form-error-page>
		</form-login-config>
	</login-config>

</web-app>
