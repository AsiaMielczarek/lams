<?xml version="1.0"?>

<!-- 
The DOCTYPE declaration declares the location of database-specific parts of the
Ant build file. 
-->
<!DOCTYPE project [
	<!ENTITY properties SYSTEM "file:./properties.xml">
]>

<project name="LAMS" basedir="." default="usage">

	<!-- import properties from the specified file -->
	&properties;

	<path id="all-libs">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="project.classpath">
		<!-- If Eclipse is not used, this should be ${build.classes} -->
		<pathelement location="${classes}" />
		<path refid="all-libs"/>
		<!-- Java CLASSPATH should be added as the last item -->
		<!-- This property is supposed to be set in .ant.properties file -->
		<!-- Currently this is not set properly but it does not matter
			as long as ${classes} is used in the project.classpath -->
		<pathelement location="${java.class.path}" />
	</path>
	
	<target name="usage">
		<echo message=""/>
		<echo message="${project.name} build file"/>
		<echo message="------------------------------------------------------"/>
		<echo message=""/>
		<echo message="Among the available targets are:"/>
		<echo message=""/>
		<echo message="middlegen-learningdesign    --> Run middlegen for learningdesign tables"/>
		<echo message="hbm2java-learningdesign  --> Run hbm2java for learningdesign mapping files"/>
		<echo message=""/>
	</target>

	<target name="init">
		<available property="xdoclet-jars-installed" file="lib/xdoclet/xdoclet-${xdoclet.version}.jar"/>
	</target>

	<!-- =================================================================== -->
	<!-- Fails if XDoclet 1.2.x is not on classpath                          -->
	<!-- =================================================================== -->
	<target name="fail-if-no-xdoclet-1.2.x" unless="xdoclet-jars-installed">
		<fail>
	      You must download several jar files before you can build Middlegen.
	      Execute the "download-deps" target. Then try to build again.

	      If you are behind a proxy, you should define the properties
	      http.proxyHost and http.proxyPort. Example:
	      
	      ant -Dhttp.proxyHost=foo.com -Dhttp.proxyPort=8080
	      
	      It's also possible to download the jars manually.
	     </fail>
	</target>

	<target name="check-driver-present">
		<available file="${database.driver.file}" type="file" property="driver.present"/>
	</target>
	<target name="panic-if-driver-not-present" unless="driver.present">
		<fail>
	      The JDBC driver you have specified by including one of the files in ${basedir}/config/database
	      doesn't exist. You have to download this driver separately and put it in ${database.driver.file}
	      Please make sure you're using a version that is equal or superior to the one we looked for.
	      If you name the driver jar file differently, please update the database.driver.file property
	      in the ${basedir}/config/database/xxx.xml file accordingly.
	     </fail>
	</target>


	<!-- =================================================================== -->
	<!-- Run Middlegen For LearningDesign                                                       -->
	<!-- =================================================================== -->
	<target 
      name="middlegen-learningdesign" 
      description="Run Middlegen For LearningDesign" 
      unless="middlegen.skip"
      depends="init,fail-if-no-xdoclet-1.2.x,check-driver-present,panic-if-driver-not-present"
    >
		<taskdef
         name="middlegen-learningdesign"
         classname="middlegen.MiddlegenTask"
         classpathref="all-libs"
        />

		<middlegen-learningdesign
         appname="learningdesign"
         prefsdir="${middlegen.dir}"
         gui="${gui}"
         databaseurl="${database.url}"
         driver="${database.driver}"
         username="${database.userid}"
         password="${database.password}"
         schema="${database.schema}"
         catalog="${database.catalog}"
         includeViews="false"
        >

			<hibernate 
			destination="${hbm.dir}"
			package="${package.learningdesign.name}"
            genXDocletTags="true"
            javaTypeMapper="middlegen.plugins.hibernate.HibernateJavaTypeMapper"
            />

			<table name="lams_learning_activity"/>
			<table name="lams_learning_design"/>
			<table name="lams_learning_library"/>
			<table name="lams_learning_transition"/>
			<table name="lams_group"/>
			<table name="lams_grouping"/>

		</middlegen-learningdesign>

	</target>

	<!-- =================================================================== -->
	<!-- Run hbm2java for learningdesign                                                       -->
	<!-- =================================================================== -->
	<target name="hbm2java-learningdesign" description="Generate .java from .hbm files.">
		<taskdef
         name="hbm2java-learningdesign"
         classname="net.sf.hibernate.tool.hbm2java.Hbm2JavaTask"
         classpathref="all-libs"
      />
		<hbm2java-learningdesign output="${src.java.dir}">
			<fileset dir="${hbm.dir}/${package.learningdesign.dir}">
				<include name="*.hbm.xml"/>
			</fileset>
		</hbm2java-learningdesign>
	</target>

	<target name="print-classpath">
		<echo message="java.class.path = ${java.class.path}"/>
	</target>

	<!-- ================================================================ -->
	<!-- Preparations									                  -->
	<!-- ================================================================ -->
	<target name="preparedirs">
		<mkdir dir="${build}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.dist}"/>
		<mkdir dir="${build.lib}"/>
		<mkdir dir="${build.web}"/>
	</target>


	<target name="clean" depends="preparedirs" description="removes all class files">
		<delete>
	  		<fileset dir="${build.classes}"/>
	  		<fileset dir="${build.lib}"/>
		</delete>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.lib}"/>
	</target>
	
	<!-- ================================================================ -->
	<!-- making packages for deployment					    	          -->
	<!-- ================================================================ -->
	<target name="web-jar" description="creates jar file">
    	<delete file="${build.lib}/${product.name}.jar"/>
    	<jar jarfile="${build.lib}/${product.name}.jar">
    		<fileset dir="${basedir}/classes">
      		</fileset>
    	</jar>
	</target>
	
	<!-- - - - - - - - - - - - - - - - - - - - - - - - -  -->
	<!-- Creates the war archive                          -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - -  --> 
	<target name="war" depends="web-jar" description="creates war file">
  		<delete file="${build.lib}/${product.name}.war"/>
  		<war warfile="${build.lib}/${product.name}.war" 
  				webxml="${webinf}/web.xml">
  			<webinf dir="${webinf}">
  				<include name="jboss-web.xml"/>
  				<include name="struts/*"/>
  				<include name="jstl/*"/>
  			</webinf>
  			<lib dir="${build.lib}">
  				<include name="${product.name}.jar"/>
  			</lib>
  			<fileset dir="${web}">
  				<include name="*"/>
  				<include name="admin/*"/>
  			</fileset>
  		</war>
  	</target>

	<target name="deploy-jar-war" depends="web-jar,war">
		<copy file="${build.lib}/${product.name}.jar"
				todir="${jboss-home}/server/default/deploy"/>
		<copy file="${build.lib}/${product.name}.war"
				todir="${jboss-home}/server/default/deploy"/>
	</target>

	<!-- =================================================================== -->
	<!-- copy jar files and cofigure files                                   -->
	<!-- =================================================================== -->
  	<target name="copyfiles" depends="" description="copy lib and config files">
  		<copy overwrite="yes" todir="${jboss-home}/server/default/lib/">
  			<fileset dir="${lib.dir}">
  				<include name="**/*.jar"/>
  			</fileset>
  		</copy>
  		<copy overwrite="yes" todir="${jboss-home}/server/default/conf/">
  			<fileset dir="${conf.jboss.dir}/">
  				<include name="login-config.xml"/>
  			</fileset>
  		</copy>
  		<copy overwrite="yes" todir="${jboss-home}/server/default/deploy/">
  			<fileset dir="${conf.jboss.dir}/service">
  				<include name="mysql*.xml"/>
  			</fileset>
  		</copy>

  	</target>
	
</project>

