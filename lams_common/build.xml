<?xml version="1.0"?>

<!-- 
The DOCTYPE declaration declares the location of database-specific parts of the
Ant build file. 
-->
<!DOCTYPE project [
	<!ENTITY properties SYSTEM "file:./properties.xml">
]>

<project name="LAMS" basedir="." default="usage">

	<!-- import properties from the specified file -->
	&properties;

	<path id="all-libs">
		<fileset dir="${lib}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="project.classpath">
		<path refid="all-libs"/>
		<!-- Java CLASSPATH should be added as the last item -->
		<!-- This property is supposed to be set in eclipse  -->
		<pathelement location="${java.class.path}" />
	</path>

	<target name="usage">
		<echo message=""/>
		<echo message="${project} build file"/>
		<echo message="------------------------------------------------------"/>
		<echo message=""/>
		<echo message="Among the available targets are:"/>
		<echo message=""/>
		<echo message="deploy-lams-windows  --> Deploy lams project on windows"/>
		<echo message="rebuild-db   --> Clean and rebuild the database"/>
		<echo message="insert-test-data --> Insert test data to database"/>
		<echo message="lams-jar  --> Make jar archive for deployment"/>
		<echo message="lams-war  --> Make war archive for deployment"/>
		<echo message="copyfiles-windows --> Copy the third party jar files and cofiguration files for deployment on windows"/>
		<echo message="middlegen-learningdesign --> Run middlegen for learningdesign tables"/>
		<echo message="hbm2java-learningdesign  --> Run hbm2java for learningdesign mapping files"/>
		<echo message=""/>
	</target>

	<target name="init">
		<available property="xdoclet-jars-installed" file="lib/xdoclet/xdoclet-${xdoclet.version}.jar"/>
	</target>

	<!-- =================================================================== -->
	<!-- Fails if XDoclet 1.2.x is not on classpath                          -->
	<!-- =================================================================== -->
	<target name="fail-if-no-xdoclet-1.2.x" unless="xdoclet-jars-installed">
		<fail>
	      You must download several jar files before you can build Middlegen.
	      Execute the "download-deps" target. Then try to build again.

	      If you are behind a proxy, you should define the properties
	      http.proxyHost and http.proxyPort. Example:
	      
	      ant -Dhttp.proxyHost=foo.com -Dhttp.proxyPort=8080
	      
	      It's also possible to download the jars manually.
	     </fail>
	</target>

	<target name="check-driver-present">
		<available file="${database.driver.file}" type="file" property="driver.present"/>
	</target>
	<target name="panic-if-driver-not-present" unless="driver.present">
		<fail>
	      The JDBC driver you have specified by including one of the files in ${basedir}/config/database
	      doesn't exist. You have to download this driver separately and put it in ${database.driver.file}
	      Please make sure you're using a version that is equal or superior to the one we looked for.
	      If you name the driver jar file differently, please update the database.driver.file property
	      in the ${basedir}/config/database/xxx.xml file accordingly.
	     </fail>
	</target>


	<!-- =================================================================== -->
	<!-- Run Middlegen For LearningDesign                                                       -->
	<!-- =================================================================== -->
	<target 
      name="middlegen-learningdesign" 
      description="Run Middlegen For LearningDesign" 
      unless="middlegen.skip"
      depends="init,fail-if-no-xdoclet-1.2.x,check-driver-present,panic-if-driver-not-present"
    >
		<taskdef
         name="middlegen-learningdesign"
         classname="middlegen.MiddlegenTask"
         classpathref="all-libs"
        />

		<middlegen-learningdesign
         appname="learningdesign"
         prefsdir="${middlegen}"
         gui="${gui}"
         databaseurl="${database.url}"
         driver="${database.driver}"
         username="${database.userid}"
         password="${database.password}"
         schema="${database.schema}"
         catalog="${database.catalog}"
         includeViews="false"
        >

			<hibernate 
			destination="${hbm}"
			package="${package.learningdesign.name}"
            genXDocletTags="true"
            javaTypeMapper="middlegen.plugins.hibernate.HibernateJavaTypeMapper"
            />

			<table name="lams_learning_activity"/>
			<table name="lams_learning_design"/>
			<table name="lams_learning_library"/>
			<table name="lams_learning_transition"/>
			<table name="lams_group"/>
			<table name="lams_grouping"/>

		</middlegen-learningdesign>

	</target>

	<!-- =================================================================== -->
	<!-- Run hbm2java for learningdesign                                                       -->
	<!-- =================================================================== -->
	<target name="hbm2java-learningdesign" description="Generate .java from .hbm files.">
		<taskdef
         name="hbm2java-learningdesign"
         classname="net.sf.hibernate.tool.hbm2java.Hbm2JavaTask"
         classpathref="all-libs"
      />
		<hbm2java-learningdesign output="${src.java}">
			<fileset dir="${hbm}/${package.learningdesign}">
				<include name="*.hbm.xml"/>
			</fileset>
		</hbm2java-learningdesign>
	</target>

	<target name="print-classpath">
		<echo message="java.class.path = ${java.class.path}"/>
	</target>

	<!-- ================================================================ -->
	<!-- Preparations									                  -->
	<!-- ================================================================ -->
	<target name="makeconfdir-windows">
		<delete quiet="true">
			<fileset dir="${lamsconf.windows}"/>
		</delete>
		<mkdir dir="${lamsconf.windows}"/>
	</target>
	
	<target name="preparedirs">
		<mkdir dir="${build}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.test}"/>
		<mkdir dir="${build.lib}"/>
	</target>


	<target name="clean" depends="preparedirs" description="removes all class files">
		<delete>
			<fileset dir="${build.classes}"/>
			<fileset dir="${build.lib}"/>
		</delete>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.lib}"/>
	</target>

	<target name="compile" depends="clean" description="compile java sources">
		<javac srcdir="${src.java}" compiler="modern"
	         	 	destdir="${build.classes}" deprecation="on" debug="on">
			<classpath>
				<path refid="project.classpath"/>
			</classpath>
		</javac>
	</target>

	<target name="compile.test" depends="compile">
		<javac destdir="${build.test}" compiler="modern">
			<src path="${src.test.java}"/>
			<classpath>
				<pathelement location="${build.classes}"/>
				<path refid="project.classpath"/>
			</classpath>
		</javac>
		<copy overwrite="yes" todir="${build.test}">
			<fileset dir="${src.test.java}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>
	</target>
	<!-- ================================================================ -->
	<!-- Make jar archive for deployment        		    	          -->
	<!-- ================================================================ -->
	<target name="lams-jar" depends="compile,compile.test" description="creates jar file">
		<delete file="${build.lib}/${product}.jar"/>
		<jar jarfile="${build.lib}/${product}.jar">
			<fileset dir="${build.classes}">
			</fileset>
			<fileset dir="${build.test}">
			</fileset>			
			<fileset dir="${hbm}">
			</fileset>
		</jar>
	</target>

	<!-- = = = = = = = = = = = = = = = = = = = = = = = =  -->
	<!-- Make the war archive  for deployment             -->
	<!-- = = = = = = = = = = = = = = = = = = = = = = = =  -->
	<target name="lams-war" depends="lams-jar" description="creates war file">
		<delete file="${build.lib}/${product}.war"/>
		<war warfile="${build.lib}/${product}.war" 
  				webxml="${webinf}/web.xml">
			<webinf dir="${webinf}">
				<include name="*.xml"/>
				<!--include name="*.properties"/-->
				<include name="struts/*"/>
				<include name="jstl/*"/>
				<include name="tiles/*"/>
				<exclude name="web.xml"/>
			</webinf>
			<lib dir="${build.lib}">
				<include name="${product}.jar"/>
			</lib>
			<fileset dir="${web}">
				<include name="*"/>
				<include name="doc/*"/>
				<include name="admin/*"/>
				<include name="images/*"/>
				<include name="admin/file/*"/>
			</fileset>
		</war>
	</target>

	<!-- ============================================================================== -->
	<!-- Copy the third party jar files and cofiguration files for deployment on windows-->
	<!-- ============================================================================== -->
	<target name="copyfiles-windows" depends="makeconfdir-windows" description="copy lib and config files">
		<copy overwrite="yes" todir="${jboss.home.windows}/server/default/lib/">
			<fileset dir="${lib}/cglib/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/hibernate/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/j2ee/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/jakarta-commons/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/jdom/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/log4j/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/mysql/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/odmg/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/spring/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/struts/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/aopalliance/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/jakarta-taglibs/">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${lib}/jakarta-poi/">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<copy overwrite="yes" todir="${jboss.home.windows}/server/default/conf/">
			<fileset dir="${conf.jboss.windows}/">
				<include name="login-config.xml"/>
			</fileset>
		</copy>
		<copy overwrite="yes" todir="${lamsconf.windows}">
			<fileset dir="${conf.auth.windows}/">
				<include name="*.xml"/>
				<include name="*.dtd"/>
			</fileset>
			<fileset dir="${conf.lams.windows}/">
				<include name="*.xml"/>
				<include name="*.dtd"/>
			</fileset>
		</copy>
		<copy overwrite="yes" todir="${jboss.deploy.windows}">
			<fileset dir="${conf.jboss.windows}/service">
				<include name="mysql*.xml"/>
			</fileset>
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- Deploy the project on windows                                       -->
	<!-- =================================================================== -->
	<target name="deploy-lams-windows" depends="lams-jar,lams-war,copyfiles-windows">
		<delete quiet="true">
			<fileset dir="${jboss.deploy.windows}/tmp"/>
			<fileset dir="${jboss.deploy.windows}/work"/>
		</delete>
		<copy file="${build.lib}/${product}.jar"
				todir="${jboss.deploy.windows}"/>
		<copy file="${build.lib}/${product}.war"
				todir="${jboss.deploy.windows}"/>
	</target>

	<!-- =================================================================== -->
	<!-- Clean and rebuild the database                                      -->
	<!-- =================================================================== -->
	<target name="rebuild-db"
		description="rebuild LAMS database. Mysql has to be running first">
		<sql driver="${database.driver}" url="${database.url}" userid="${database.userid}"
				password="${database.password}">
			<classpath>
				<pathelement location="${database.driver.file}"/>
			</classpath>
			<transaction src="${sql}/drop_lams_11_tables.sql"/>
			<transaction src="${sql}/create_lams_11_tables.sql"/>
			<transaction src="${sql}/insert_types_data.sql"/>
		</sql>
	</target>

	<!-- =================================================================== -->
	<!-- Insert test data to lams database                                   -->
	<!-- =================================================================== -->
	<target name="insert-test-data" depends="rebuild-db"
		description="insert test data to lams database">
		<sql driver="${database.driver}" url="${database.url}" userid="${database.userid}"
				password="${database.password}">
			<classpath>
				<pathelement location="${database.driver.file}"/>
			</classpath>
			<transaction src="${sql}/insert_test_data.sql"/>
		</sql>
	</target>
	<!-- =================================================================== -->
	<!-- Run JUnit Tests                                                     -->
	<!-- =================================================================== -->
	<target name="test" depends="compile.test,insert-test-data"> 
		<mkdir dir="${build.report}"/>
		<copy file="${webinf}/web.xml" todir="${testwebinf}" overwrite="true"/>		
		<copy file="${webinf}/struts/struts-config.xml" todir="${testwebinf}" overwrite="true"/>			
		<copy file="${webinf}/tiles/tiles-defs.xml" todir="${testwebinf}/tiles" overwrite="true"/>			
		<junit printsummary="yes" haltonerror="no" haltonfailure="no"
			   fork="yes">
			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>
			<batchtest todir="${build.report}">
				<fileset dir="${src.test.java}">
					<include name="**/Test*.java"/>
					<exclude name="**/Test*All.java"/>
					<exclude name="**/TestInitLesson.java"/>
				</fileset>
			</batchtest>
			<classpath>
				<pathelement location="${build.classes}"/>
				<pathelement location="${build.classes.test}"/>
				<pathelement location="${hbm}"/>
				<pathelement location="${testweb}"/>
				<path refid="project.classpath"/>
			</classpath>
		</junit>
	</target>
	
	<target name="test-report" depends="test">
		<mkdir dir="${build.report}/html"/> 
		<junitreport todir="${build.report}"> 
			<fileset dir="${build.report}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report todir="${build.report}/html"/> 
		</junitreport>
	</target>	
</project>

