/****************************************************************
 * Copyright (C) 2005 LAMS Foundation (http://lamsfoundation.org)
 * =============================================================
 * License Information: http://lamsfoundation.org/licensing/lams/2.0/
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA
 * 
 * http://www.gnu.org/licenses/gpl.txt
 * ****************************************************************
 */
/* $$Id$$ */
package org.lamsfoundation.lams.tool;

import java.util.List;

import org.lamsfoundation.lams.tool.exception.DataMissingException;
import org.lamsfoundation.lams.tool.exception.ToolException;
import org.lamsfoundation.lams.usermanagement.User;



/**
 * The interface that defines the tool's contract regarding session. It must 
 * be implemented by the tool to establish the communication channel between
 * tool and lams core service.
 * 
 * @author Jacky Fang 
 * @since 2004-12-6
 * @version 1.1
 */
public interface ToolSessionManager
{
    /**
     * Create a tool session for a piece of tool content using the tool 
     * session id generated by LAMS. If no content exists with the given 
     * tool content id, then use the default content id.
     * 
     * @param toolSessionId the generated tool session id.
     * @param toolSessionName the tool session name.
     * @param toolContentId the tool content id specified.
     * @throws ToolException if an error occurs e.g. defaultContent is missing.
     */
    public void createToolSession(Long toolSessionId, String toolSessionName, Long toolContentId) throws ToolException;
    
    /**
     * Call the controller service to complete and leave the tool session.
     * @param toolSessionId the runtime tool session id.
     * @return the url for next activity.
     * @throws DataMissingException if no tool session matches the toolSessionId 
     * @throws ToolException if any other error occurs
     */
    public String leaveToolSession(Long toolSessionId, Long learnerId) 
    	throws DataMissingException, ToolException;

    /**
     * Export the XML fragment for the session export. Not sure if this is required.
     * @throws DataMissingException if no tool session matches the toolSessionId 
     * @throws ToolException if any other error occurs
     */
    public ToolSessionExportOutputData exportToolSession(Long toolSessionId) 
    	throws DataMissingException, ToolException;

    /**
     * Export the XML fragment for the session export. Not sure if this is required.
     * @throws DataMissingException if no tool session matches the toolSessionId 
     * @throws ToolException if any other error occurs
     */
    public ToolSessionExportOutputData exportToolSession(List toolSessionIds) 
    	throws DataMissingException, ToolException;
    
    /**
     * Remove sesson data according specified the tool session id. 
     * @param toolSessionId the generated tool session id.
     * @throws DataMissingException if no tool session matches the toolSessionId 
     * @throws ToolException if any other error occurs
     */
    public void removeToolSession(Long toolSessionId)
    	throws DataMissingException, ToolException;
    
}
