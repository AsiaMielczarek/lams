<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
 - Application context definition for LAMS. Used to deploy to JBOSS.
-->

<beans>

 	<!-- Hibernate Properties. Should be used by all Hibernate session factories unless -->
  	<!--  the tool has a specific need for a different setting. 						-->			
  	<!-- If you change hibernate.treecache.objectName, you will also need to change the -->
  	<!--  cacheManager object 															-->
  	<bean id="hibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	  	<property name="properties">
		<props>
			<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
			<prop key="hibernate.show_sql">false</prop>
			<prop key="hibernate.c3p0.minPoolSize">5</prop>
			<prop key="hibernate.c3p0.maxPoolSize">20</prop>
			<prop key="hibernate.c3p0.timeout">1800</prop>
			<prop key="hibernate.c3p0.max_statement">50</prop>
  			<prop key="hibernate.cache.provider_class">org.jboss.hibernate.cache.DeployedTreeCacheProvider</prop>
			<prop key="hibernate.treecache.objectName">jboss.cache:service=TreeCache</prop>
		</props>
		</property>
  	</bean>
  	
	<import resource="commonContext.xml"/>

	<!-- JNDI DataSource for all "core" components 		  -->
	<!-- uses lams-ds datasource set up in the app-server -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName"><value>java:jdbc/lams-ds</value></property>
	</bean>

	<!-- JNDI DataSource for all tools				      -->
	<!-- uses tool-ds datasource set up in the app-server -->
	<bean id="toolDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName"><value>java:jdbc/tool-ds</value></property>
	</bean>
	
	<bean id="quartzDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName"><value>java:jdbc/quartz-ds</value></property>
	</bean>

	<!--  Transaction manager for all transactions involving the core classes or the content repository. -->
	
	<!--  If your code calls classes in the content repository or in the core, and your data needs   -->
	<!--  to be consistent with the rest of the system (and what data doesn't.... ), then you 		 -->
	<!--  must use this transaction manager. If you do not, then the core code data changes will be  -->
	<!--  committed independent of your changes. 			 										 -->
	<!--  "autodetectTransactionManager" defaults to true so we don't need to include it.  		 	 -->
	<!--  But remember all application servers do not have the same JNDI name for their transaction manager! -->
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>

</beans>

