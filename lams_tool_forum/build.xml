<?xml version="1.0" encoding="UTF-8"?>
<project name="LAMS Forum" basedir="." default="_build">
	<!-- begin properties *******************************************************************************************-->
	<!-- import properties from the specified file -->
	<property file="build.properties"/>
	<property file="../lams_build/common.properties"/>
	<property file="../lams_build/${osPropertiesName}.properties" />
	
	<property name="project.displayname" value="${project} - ${project.displayname}"/>
	<property name="project.description" value="${project} - ${project.description}"/>

	<!-- end properties *********************************************************************************************-->

	<!-- begin path *************************************************************************************************-->
	<path id="all-libs">
		<fileset dir="${sharedlib}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${j2eelibs}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="project.classpath">
		<path refid="all-libs"/>
		<!-- Java CLASSPATH should be added as the last item -->
		<!-- This property is supposed to be set in eclipse  -->
		<pathelement location="${java.class.path}" />
	</path>
	<path id="schemaexport.classpath">
		<path refid="project.classpath"/>
		<pathelement location="${build.classes.java}"/>
	</path>

	<!-- end path ***************************************************************************************************-->

	<!-- begin tasks ***********************************************************************************************/-->
	<target name="init">
		<echo>+------------------------------------------+</echo>
		<echo>| creating directory structure             |</echo>
		<echo>+------------------------------------------+</echo>

		<!-- build filesystem structure /-->
        <mkdir dir="${build}"/>
		<mkdir dir="${build.classes.java}"/>
        <mkdir dir="${build.report}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${build.deploy}"/>
        <mkdir dir="${build.classes.test}"/>
        <mkdir dir="${build.report}"/>
	</target>


	<target name="clean" description="Delete all generated files">
		<echo>+------------------------------------------+</echo>
		<echo>| clean                                    |</echo>
		<echo>+------------------------------------------+</echo>

		<delete dir="${build.classes.java}" quiet="false"/>
        <delete dir="${build.classes.test}" quiet="false"/>
		<delete dir="${build.lib}" quiet="false"/>
		<delete dir="${build.deploy}" quiet="false"/>

	</target>
			
	<target name="compile-java" description="Compiles the Task" depends="init">
		<javac srcdir="${src.java.dir}"
            source="1.4"
            debug="on"
            compiler="modern"
            classpathref="project.classpath"
            destdir="${build.classes.java}"/>
	 	<copy overwrite="yes" todir="${build.classes.java}" verbose="true">
			<fileset dir="${src.java.dir}">
				<include name="**/*.xml"/>
				<include name="**/*.hbm.xml"/>
				<include name="**/*.properties"/>
			</fileset>
		</copy>
	</target>

	<target name="generate-hbm" depends="compile-java">
		<echo>+------------------------------------------+</echo>
		<echo>| generating hibernate metadata            |</echo>
		<echo>+------------------------------------------+</echo>

		<taskdef name="hibernatedoclet"
			classname="xdoclet.modules.hibernate.HibernateDocletTask"
			classpathref="all-libs"/>

		<echo>Building hbm.xml files using XDoclet to ${conf.hibernate.mapping.dir} from ${src.java.dir}</echo>

		<hibernatedoclet
			destdir="${conf.hibernate.mapping.dir}"
			excludedtags="@version,@author,@todo"
			force="true">
				<fileset dir="${src.java.dir}">
					<include name="**/*.java"/>
				</fileset>
			<hibernate version="3.0"/>
		</hibernatedoclet>
		
		<copy todir="${src.java.dir}" overwrite="true" verbose="true">
			<fileset dir="${conf.hibernate.mapping.dir}">
				<include name="**/*.hbm.xml"/>
			</fileset>
		</copy>
    </target>
	
	<!-- exports all the hbm mappings to the specified database -->
	<target name="schemaexport" description="Exports all hbm.xml files in {conf.hibernate.mapping.dir}/hbm"
		depends="clean,generate-hbm">
	    <echo message="Run the schema export for all hbm.xml files in ${conf.hibernate.mapping.dir}/hbm"/>
		<taskdef
			name="schemaexport"
			classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"
			classpathref="schemaexport.classpath"
			>
		</taskdef>
		<schemaexport
			properties="${conf.hibernate.mapping.dir}/hibernate.properties"
			quiet="no"
			text="no"
			drop="no"
			delimiter=";"
			output="${db.scripts}/table-schema.sql">
			<fileset dir="${conf.hibernate.mapping.dir}">
				<include name="**/*.hbm.xml"/>
			</fileset>
		</schemaexport>	
	</target>	
	
	<target name="compile-test" depends="compile-java">
		<javac srcdir="${src.test.dir}" compiler="modern"
	         	 	destdir="${build.classes.test}" deprecation="on" debug="on">
			<classpath>
				<pathelement location="${build.classes.java}"/>
				<path refid="project.classpath"/>
			</classpath>
		</javac>
		<copy overwrite="yes" todir="${build.classes.test}">
			<fileset dir="${src.test.dir}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>
	</target>
	
	<!-- =================================================================== -->
	<!-- Forum Database tasks                                               -->
	<!-- =================================================================== -->
	<target name="clean-db"	description="clean forum database.">
		<sql driver="${db.driver}" url="${db.url}" userid="${db.username}"
				password="${db.password}">
			<classpath>
				<pathelement location="${db.driver.jar}"/>
			</classpath>
			<transaction src="${db.scripts}/cleanup_lams_tool_forum.sql"/>
		</sql>
	</target>
	
	<target name="init-db"	description="drop and create forum database.">
		<sql driver="${db.driver}" url="${db.url}" userid="${db.username}"
				password="${db.password}">
			<classpath>
				<pathelement location="${db.driver.jar}"/>
			</classpath>
			<transaction src="${db.scripts}/drop_lams_tool_forum.sql"/>
			<transaction src="${db.scripts}/create_lams_tool_forum.sql"/>
		</sql>
	</target>
	
	<target name="build-db"	depends="init-db" 
							description="build qa tool database.">
		<sql driver="${db.driver}" url="${db.url}" userid="${db.username}"
				password="${db.password}">
			<classpath>
				<pathelement location="${db.driver.name}"/>
			</classpath>
			<transaction src="${db.scripts}/insert_lams_tool_forum_data.sql"/>
		</sql>
	</target>

	<target name="test-report" depends="compile-test, init-db">

		<mkdir dir="${build.report}"/>
		<mkdir dir="${build.report}/html"/> 
		
		<junit printsummary="yes" errorProperty="test.failed" failureProperty="test.failed"
			   fork="yes">
			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>
			<batchtest todir="${build.report}">
				<fileset dir="${src.test.dir}">
	                 <include name="org/lamsfoundation/lams/tool/forum/**/*.*"/>
				</fileset>
			</batchtest>
			<classpath>
				<pathelement location="${build.classes.java}"/>
				<pathelement location="${build.classes.test}"/>
				<pathelement location="${conf.hibernate.mapping.dir}"/>
				<pathelement location="${conf.web.dir}"/>
				<path refid="project.classpath"/>
			</classpath>
		</junit>

		<junitreport todir="${build.report}"> 
			<fileset dir="${build.report}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report todir="${build.report}/html"/> 
		</junitreport>
		
		<fail message="Tests failed. Check log and/or reports" if="test.failed"/>
	</target>

	<target name="jar" description="JARs the Task" depends="generate-hbm, compile-java">
		<echo>+------------------------------------------+</echo>
		<echo>| create jar file                          |</echo>
		<echo>+------------------------------------------+</echo>
		<delete file="${build.lib}/${product}.jar"/>
		<jar destfile="${build.lib}/${product}.jar">
			<fileset dir="${build.classes.java}">
			</fileset>
			<fileset dir="${conf.hibernate.mapping.dir}">
			</fileset>
		</jar> 
	</target>

    <target name="web"  description="generates xdoclet for web">
	    <taskdef
	        name="webdoclet"
	        classname="xdoclet.modules.web.WebDocletTask"
	        classpathref="project.classpath"
	    />
		<webdoclet destDir="${conf.webinf.dir}" force="${xdoclet.force}" 
			mergedir="${conf.xdoclet.dir}" verbose="true">
			
         <fileset dir="${src.java.dir}">
            <include name="**/*Action.java" />
            <include name="**/*Form.java" />
         </fileset>

         <deploymentdescriptor servletspec="2.4" 
				distributable="false" sessiontimeout="${sessiontimeout}"/>
			
         <strutsconfigxml validatexml="true" version="1.2" mergedir="${conf.xdoclet.dir}"/>
         <strutsdynaformvalidationxml destdir="${conf.struts.dir}" mergedir="${conf.xdoclet.dir}" version="1.1.3"  />

      </webdoclet>

	</target>

	<target name="build-war" depends="web" description="creates war file">
		<echo>+------------------------------------------+</echo>
		<echo>| build jar file                           |</echo>
		<echo>+------------------------------------------+</echo>
		<delete file="${build.lib}/${product}.war"/>
		<war warfile="${build.lib}/${product}.war" 
  				webxml="${conf.webinf.dir}/web.xml" manifest="${conf.dir}/war/META-INF/MANIFEST.MF">
			<webinf dir="${conf.webinf.dir}">
				<include name="**/*.tld"/>
				<include name="*.xml"/>
				<include name="struts/*"/>
				<include name="tags/*"/>
				<include name="fckeditor/*"/>
				<exclude name="web.xml"/>
			</webinf>
			<classes dir="${build.classes.java}"/>	
			<fileset dir="${conf.web.dir}">
				<include name="*"/>
				<include name="includes/**"/>
				<include name="images/**"/>
				<include name="jsps/**"/> 
			</fileset>
		</war>
	</target>

	<!-- =================================================================== -->
	<!-- Deploy the jar and war                               				 -->
	<!-- =================================================================== -->
	<target name="deploy-war" depends="_build" description="Deploy the IMS Content Package tool war file and jar file">
		<copy file="${build.lib}/${product}.jar"
				todir="${jboss.deploy}"/> 
		<copy file="${build.lib}/${product}.war"
				todir="${jboss.deploy}"/> 
	</target>

	<!-- =================================================================== -->
	<!-- Generate the deploy package                                         -->
	<!-- =================================================================== -->
	<target name="create-deploy-package" depends="_build" 
		description="Generate the deployment package.">

		<echo>+------------------------------------------+</echo>
		<echo>| Generate the deployment package.         |</echo>
		<echo>+------------------------------------------+</echo>
		<path id="deploy.lib.classpath">
			<fileset dir="${deploy.tool.dir}">
				<include name="lib/*.jar"/>
			</fileset>
		</path> 
			  
		<mkdir dir="${build.deploy}"/>
		<mkdir dir="${build.deploy}/lib"/> 
		<mkdir dir="${build.deploy}/sql"/> 
		<mkdir dir="${build.deploy}/language"/>
		 
		<copy overwrite="yes" todir="${build.deploy}/sql">
			<fileset dir="${db.scripts}/">
				<include name="create_lams_tool_forum.sql"/>
				<include name="drop_lams_tool_forum.sql"/>
				<include name="activity_insert.sql"/>
				<include name="library_insert.sql"/>
				<include name="tool_insert.sql"/>
			</fileset>
		</copy>

		<copy overwrite="yes" todir="${build.deploy}/">
			<fileset dir="${deploy.tool.dir}">
				<include name="*.*"/>
			</fileset>
		</copy>

		<copy overwrite="yes" todir="${build.deploy}/lib">
			<fileset dir="${deploy.tool.dir}/lib">
				<include name="*.jar"/>
			</fileset>
		</copy>
		
		<copy overwrite="yes" todir="${build.deploy}/language">
			<fileset dir="${conf.language.dir}">
				<include name="*.properties"/>
				<include name="*.txt"/>
			</fileset>
		</copy>		

		<taskdef name="generateDeployProperties" 
			classname="org.lamsfoundation.lams.tool.deploy.CreateToolPackageTask">
		    <classpath refid="deploy.lib.classpath"/>
		</taskdef>

		<generateDeployProperties depends="compile" 
			mode="development" 
			outputPath="${build.deploy}"
			dbPassword="${db.password}"
			dbUsername="${db.username}"
			dbDriverUrl="${db.url}"
			dbDriverClass="com.mysql.jdbc.Driver"
			deployFiles="${build.lib}/${product}.war,${build.lib}/${product}.jar"
			toolSignature="${signature}"
			toolTablesScriptPath="${db.scripts}/create_lams_tool_forum.sql"
			toolTablesDeleteScriptPath="${db.scripts}/drop_lams_tool_forum.sql"
			toolActivityInsertScriptPath="${db.scripts}/activity_insert.sql"
			toolLibraryInsertScriptPath="${db.scripts}/library_insert.sql"
			toolInsertScriptPath="${db.scripts}/tool_insert.sql"
			lamsEarPath="${jboss.deploy}"
			toolContext="${toolContext}"
			toolWebUri="${product}.war"
			languageFilesPackage="org.lamsfoundation.lams.tool.forum">

			<!-- language files go as a fileset. Not nice but can't work out how to embed them in a tag. -->
			<fileset dir="${build.deploy}/language">
				<include name="**/*.properties"/>
				<include name="**/*.txt"/>
			</fileset>
				
		</generateDeployProperties>
		
	</target>

	<target name="deploy-tool" depends="create-deploy-package" 
		description="Build the war, jar and run the deploy tool. Deletes most old tool references from db, creates db tables, application.xml in ear, copies war and jar file to ear. deploy-tool is only designed to be run in a development environment, or on an empty db. Do not run on a production environment.">

		<path id="deploy.classpath">
			<fileset dir="${build.deploy}">
				<include name="lib/*.jar"/>
			</fileset>
		</path> 

		<echo>Deploying the Forum tool</echo>
	
		<java
			classname="org.lamsfoundation.lams.tool.deploy.Deploy"
			classpathref="deploy.classpath"
			fork="true">
				<arg file="${build.deploy}/deploy.xml"/>
				<arg value="True"/> <!-- forcedb -->
		</java>
					
	</target>

	<!-- begin navigation tasks *************************************************************************************-->
	<target
        name="_build"
        depends="clean,init, compile-java, jar, build-war">
		<echo>+------------------------------------------+</echo>
		<echo>| built war file                           |</echo>
		<echo>+------------------------------------------+</echo>
	</target>

 	<!-- end navigation tasks ***************************************************************************************-->
	
	<!-- Debug target: Explode tool to ear folder for debug use  -->
	<target name="delete-exploded-tool-folder" description="delete old tool exploded tool folder">
		<!-- delete old war folder tree -->
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${jboss.deploy}/${product}.war">
			    <include name="**"/>
			</fileset>
		</delete>
		<!-- if use explode tool target when jboss is running, explode may be failed and left the the temp folder. Here try to delete the temp folder -->
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${jboss.deploy}/temp-${product}.war">
			    <include name="**"/>
			</fileset>
		</delete>
	</target>
	
	<target name="explode-tool" depends="delete-exploded-tool-folder,deploy-tool" description="explode tool jar and war package to a war folder">
		<!-- rename war file to avoid name conflict -->
		<move tofile="${jboss.deploy}/temp-${product}.war" file="${jboss.deploy}/${product}.war"/>
		<!-- explode the ear -->
		<!-- Don't explode jar file, becuase classes in jar will conflict with those same classes files in war -->
		<!--<unjar src="${jboss.deploy}/${product}.jar" dest="${jboss.deploy}/${product}.war" />-->
		<unjar src="${jboss.deploy}/temp-${product}.war" dest="${jboss.deploy}/${product}.war" />
		<!-- delete war and jar files -->
		<delete>
			<fileset dir="${jboss.deploy}">
			    <include name="temp-${product}.war"/>
			 <!--   <include name="${product}.jar"/> -->
			</fileset>
		</delete>
	
	</target>
    <!-- ================================= 
          target: synchronize-jsp              
         ================================= -->
    <target name="synchronize-deploy" description="copy non-java file into deploy folder">
        <copy verbose="yes" todir="${jboss.deploy}/${product}.war">
        	<fileset dir="${conf.web.dir}">
        		<include name="**/*.*"/>
        	</fileset>
        </copy>
        <copy verbose="yes" todir="${jboss.deploy}/${product}.war/WEB-INF/classes">
	    	<fileset dir="${build.classes.java}">
	    		<include name="**/*.properties"/>
	    		<include name="**/*.xml"/>
	    	</fileset>
        </copy>
    </target>

	<!-- end tasks **************************************************************************************************-->
</project>
