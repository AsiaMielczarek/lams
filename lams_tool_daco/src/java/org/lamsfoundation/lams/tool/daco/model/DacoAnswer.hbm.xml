<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping
>
    <class
        name="org.lamsfoundation.lams.tool.daco.model.DacoAnswer"
        table="tl_ladaco10_answers"
    >

        <id
            name="uid"
            column="uid"
            type="java.lang.Long"
        >
            <generator class="native">
              <!--  
                  To add non XDoclet generator parameters, create a file named 
                  hibernate-generator-params-DacoAnswer.xml 
                  containing the additional parameters and place it in your merge dir. 
              --> 
            </generator>
        </id>

        <many-to-one
            name="user"
            class="org.lamsfoundation.lams.tool.daco.model.DacoUser"
            cascade="none"
            outer-join="auto"
            update="true"
            insert="true"
            column="user_uid"
        />

        <property
            name="recordId"
            type="java.lang.Integer"
            update="true"
            insert="true"
            column="record_id"
        />

        <property
            name="answer"
            type="java.lang.String"
            update="true"
            insert="true"
            column="answer"
        />

        <many-to-one
            name="question"
            class="org.lamsfoundation.lams.tool.daco.model.DacoQuestion"
            cascade="none"
            outer-join="auto"
            update="true"
            insert="true"
            column="question_uid"
        />

        <property
            name="fileUuid"
            type="java.lang.Long"
            update="true"
            insert="true"
            column="file_uuid"
        />

        <property
            name="fileVersionId"
            type="java.lang.Long"
            update="true"
            insert="true"
            column="file_version_id"
        />

        <property
            name="fileType"
            type="java.lang.String"
            update="true"
            insert="true"
            column="file_type"
        />

        <property
            name="fileName"
            type="java.lang.String"
            update="true"
            insert="true"
            column="file_name"
        />

        <!--
            To add non XDoclet property mappings, create a file named
                hibernate-properties-DacoAnswer.xml
            containing the additional properties and place it in your merge dir.
        -->

    </class>
    
<sql-query name="userNumberQuery">
<return-scalar column="question_uid" type="java.lang.String"/>
<return-scalar column="answer" type="java.lang.String"/>
<return-scalar column="question_type" type="java.lang.String"/>
<return-scalar column="sum" type="java.lang.String"/>
<return-scalar column="average" type="java.lang.String"/>
<return-scalar column="count" type="java.lang.String"/>
SELECT question_uid,
NULL AS answer,
NULL AS question_type,
SUM(answer) AS sum,
AVG(answer) AS average,
NULL AS count
FROM tl_ladaco10_answers AS a, tl_ladaco10_questions AS q
WHERE a.question_uid=q.uid
	AND q.content_uid=:contentUid
	AND a.user_uid=:userUid
	AND question_type=:numberQuestionType
	AND answer IS NOT NULL
GROUP BY question_uid
ORDER BY question_uid
</sql-query>

<sql-query name="allNumberQuery">
<return-scalar column="question_uid" type="java.lang.String"/>
<return-scalar column="answer" type="java.lang.String"/>
<return-scalar column="question_type" type="java.lang.String"/>
<return-scalar column="sum" type="java.lang.String"/>
<return-scalar column="average" type="java.lang.String"/>
<return-scalar column="count" type="java.lang.String"/>
SELECT question_uid,
NULL AS answer,
question_type,
SUM(answer) AS sum,
AVG(answer) AS average,
NULL AS count
FROM tl_ladaco10_answers AS a, tl_ladaco10_questions AS q
WHERE a.question_uid=q.uid
	AND q.content_uid=:contentUid 
	AND question_type=:numberQuestionType
	AND answer IS NOT NULL
GROUP BY question_uid ORDER BY question_uid
</sql-query>

<sql-query name="userAnswerEnumerationQuery">
<return-scalar column="question_uid" type="java.lang.String"/>
<return-scalar column="answer" type="java.lang.String"/>
<return-scalar column="question_type" type="java.lang.String"/>
<return-scalar column="sum" type="java.lang.String"/>
<return-scalar column="average" type="java.lang.String"/>
<return-scalar column="count" type="java.lang.String"/>
SELECT DISTINCT a.question_uid,
answer,
question_type,
NULL AS sum,
CONCAT(ROUND(COUNT(1)/(SELECT COUNT(1) FROM tl_ladaco10_answers WHERE question_uid=q.uid AND answer IS NOT NULL)*100),'%') AS average,
COUNT(1) AS count
FROM tl_ladaco10_answers AS a, tl_ladaco10_questions AS q
WHERE a.question_uid=q.uid
	AND q.content_uid=:contentUid
	AND a.user_uid=:userUid
	AND question_type IN (:numberQuestionType,:radioQuestionType,:dropdownQuestionType,:checkboxQuestionType)
	AND answer IS NOT NULL
GROUP BY question_uid, answer ORDER BY question_uid,answer
</sql-query>

<sql-query name="allAnswerEnumerationQuery">
<return-scalar column="question_uid" type="java.lang.String"/>
<return-scalar column="answer" type="java.lang.String"/>
<return-scalar column="question_type" type="java.lang.String"/>
<return-scalar column="sum" type="java.lang.String"/>
<return-scalar column="average" type="java.lang.String"/>
<return-scalar column="count" type="java.lang.String"/>
SELECT DISTINCT a.question_uid,
answer,
question_type,
NULL AS sum,
CONCAT(ROUND(COUNT(1)/(SELECT COUNT(1) FROM tl_ladaco10_answers WHERE question_uid=q.uid AND answer IS NOT NULL)*100),'%') AS average,
COUNT(1) AS count
FROM tl_ladaco10_answers a, tl_ladaco10_questions q
WHERE a.question_uid=q.uid
	AND q.content_uid=:contentUid 
	AND question_type IN (:numberQuestionType,:radioQuestionType,:dropdownQuestionType,:checkboxQuestionType)
	AND answer IS NOT NULL
GROUP BY question_uid, answer ORDER BY question_uid,answer
</sql-query>

</hibernate-mapping>
