
package org.lamsfoundation.lams.tool.mc.web;

import java.io.IOException;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.Globals;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.lamsfoundation.lams.tool.exception.ToolException;
import org.lamsfoundation.lams.tool.mc.McAppConstants;
import org.lamsfoundation.lams.tool.mc.McApplicationException;
import org.lamsfoundation.lams.tool.mc.McComparator;
import org.lamsfoundation.lams.tool.mc.McSession;
import org.lamsfoundation.lams.tool.mc.McUtils;
import org.lamsfoundation.lams.tool.mc.service.IMcService;
import org.lamsfoundation.lams.tool.mc.service.McServiceProxy;
import org.lamsfoundation.lams.usermanagement.dto.UserDTO;
import org.lamsfoundation.lams.web.session.SessionManager;
import org.lamsfoundation.lams.web.util.AttributeNames;


/**
 * 
 * @author Ozgur Demirtas
 *
 * <lams base path>/<tool's learner url>&userId=<learners user id>&toolSessionId=123&mode=teacher

 * Tool Session:
 *
 * A tool session is the concept by which which the tool and the LAMS core manage a set of learners interacting with the tool. 
 * The tool session id (toolSessionId) is generated by the LAMS core and given to the tool.
 * A tool session represents the use of a tool for a particulate activity for a group of learners. 
 * So if an activity is ungrouped, then one tool session exist for for a tool activity in a learning design.
 *
 * More details on the tool session id are covered under monitoring.
 * When thinking about the tool content id and the tool session id, it might be helpful to think about the tool content id 
 * relating to the definition of an activity, whereas the tool session id relates to the runtime participation in the activity.

 *  * 
 * Learner URL:
 * The learner url display the screen(s) that the learner uses to participate in the activity. 
 * When the learner accessed this user, it will have a tool access mode ToolAccessMode.LEARNER.
 *
 * It is the responsibility of the tool to record the progress of the user. 
 * If the tool is a multistage tool, for example asking a series of questions, the tool must keep track of what the learner has already done. 
 * If the user logs out and comes back to the tool later, then the tool should resume from where the learner stopped.
 * When the user is completed with tool, then the tool notifies the progress engine by calling 
 * org.lamsfoundation.lams.learning.service.completeToolSession(Long toolSessionId, User learner).
 *
 * If the tool's content DefineLater flag is set to true, then the learner should see a "Please wait for the teacher to define this part...." 
 * style message.
 * If the tool's content RunOffline flag is set to true, then the learner should see a "This activity is not being done on the computer. 
 * Please see your instructor for details."
 *
 * ?? Would it be better to define a run offline message in the tool? We have instructions for the teacher but not the learner. ??
 * If the tool has a LockOnFinish flag, then the tool should lock learner's entries once they have completed the activity. 
 * If they return to the activity (e.g. via the progress bar) then the entries should be read only.
 *
 */

public class McLearningStarterAction extends Action implements McAppConstants {
	static Logger logger = Logger.getLogger(McLearningStarterAction.class.getName());
	 /* Since the toolSessionId is passed, we will derive toolContentId from the toolSessionId
	 *
	 * This class is used to load the default content and initialize the presentation Map for Learner mode 
	 * 
	 * createToolSession will not be called once the tool is deployed.
	 * 
	 * It is important that ALL the session attributes created in this action gets removed by: QaUtils.cleanupSession(request)
	 */ 

	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) 
  								throws IOException, ServletException, McApplicationException {
		Map mapQuestionsContent= new TreeMap(new McComparator());
		Map mapAnswers= new TreeMap(new McComparator());

		IMcService mcService = McUtils.getToolService(request);
		logger.debug("retrieving mcService from session: " + mcService);
		if (mcService == null)
		{
			mcService = McServiceProxy.getMcService(getServlet().getServletContext());
		    logger.debug("retrieving mcService from proxy: " + mcService);
		    request.getSession().setAttribute(TOOL_SERVICE, mcService);		
		}

		setupPaths(request);
		McLearningForm mcLearningForm = (McLearningForm) form;

		/*
		 * initialize available question display modes in the session
		 */
		request.getSession().setAttribute(QUESTION_LISTING_MODE_SEQUENTIAL,QUESTION_LISTING_MODE_SEQUENTIAL);
	    request.getSession().setAttribute(QUESTION_LISTING_MODE_COMBINED, QUESTION_LISTING_MODE_COMBINED);
	    
	    /*
	     * mark the http session as a learning activity 
	     */
	    request.getSession().setAttribute(TARGET_MODE,TARGET_MODE_LEARNING);
	    
	    /*
	     * persist time zone information to session scope. 
	     */
	    McUtils.persistTimeZone(request);
	    
	    /*
	     * obtain and setup the current user's data 
	     */
	    String userId = "";
	    /* get session from shared session.*/
	    HttpSession ss = SessionManager.getSession();
	    /* get back login user DTO*/
	    UserDTO user = (UserDTO) ss.getAttribute(AttributeNames.USER);
	    if ((user == null) || (user.getUserID() == null))
	    {
	    	logger.debug("error: The tool expects userId");
	    	persistError(request,"error.learningUser.notAvailable");
	    	request.setAttribute(USER_EXCEPTION_USERID_NOTAVAILABLE, new Boolean(true));
			return (mapping.findForward(ERROR_LIST));
	    }else
	    	userId = user.getUserID().toString();
	    
	    logger.debug("retrieved userId: " + userId);
		
	    
	    /*
	     * process incoming tool session id and later derive toolContentId from it. 
	     */
	    String strToolSessionId=request.getParameter(TOOL_SESSION_ID);
	    long toolSessionId=0;
	    if ((strToolSessionId == null) || (strToolSessionId.length() == 0)) 
	    {
	    	persistError(request, "error.toolSessionId.required");
	    	request.setAttribute(USER_EXCEPTION_TOOLSESSIONID_REQUIRED, new Boolean(true));
			return (mapping.findForward(ERROR_LIST));
	    }
	    else
	    {
	    	try
			{
	    		toolSessionId=new Long(strToolSessionId).longValue();
		    	logger.debug("passed TOOL_SESSION_ID : " + new Long(toolSessionId));
		    	request.getSession().setAttribute(TOOL_SESSION_ID,new Long(toolSessionId));	
			}
	    	catch(NumberFormatException e)
			{
	    		persistError(request, "error.sessionId.numberFormatException");
	    		logger.debug("add error.sessionId.numberFormatException to ActionMessages.");
				request.setAttribute(USER_EXCEPTION_NUMBERFORMAT, new Boolean(true));
				return (mapping.findForward(ERROR_LIST));
			}
	    }
		
	    /*
	     * By now, the passed tool session id MUST exist in the db through the calling of:
	     * public void createToolSession(Long toolSessionId, Long toolContentId) by the container.
	     *  
	     * make sure this session exists in tool's session table by now.
	     */
		
	    if (!McUtils.existsSession(new Long(toolSessionId), request)) 
		{
				logger.debug("tool session does not exist" + toolSessionId);
				/*
				 *for testing only, remove this line in development 
				 */
				Long currentToolContentId= new Long(10);
				logger.debug("simulating container behaviour: calling createToolSession with toolSessionId : " + 
						new Long(toolSessionId) + " and toolContentId: " + currentToolContentId);
				try
				{
					mcService.createToolSession(new Long(toolSessionId), currentToolContentId);
					logger.debug("simulated container behaviour.");
				}
				catch(ToolException e)
				{
					logger.debug("we should never come here.");
				}
				 
		}
		
		/*
		 * by now, we made sure that the passed tool session id exists in the db as a new record
		 * Make sure we can retrieve it and relavent content
		 */
		
	    
		McSession mcSession=mcService.retrieveMcSession(new Long(toolSessionId));
	    logger.debug("retrieving qaSession: " + mcSession);
	    
		return (mapping.findForward(LOAD_LEARNER));	
		
  }
	
	
	/**
	 * sets up ROOT_PATH and PATH_TO_LAMS attributes for presentation purposes
	 * setupPaths(HttpServletRequest request)
	 * @param request
	 */
	protected void setupPaths(HttpServletRequest request)
	{
		String protocol = request.getProtocol();
		if(protocol.startsWith("HTTPS")){
			protocol = "https://";
		}else{
			protocol = "http://";
		}
		String root = protocol+request.getServerName()+":"+request.getServerPort()+request.getContextPath()+"/";
		String pathToLams = protocol+request.getServerName()+":"+request.getServerPort()+request.getContextPath()+"/../..";
		request.getSession().setAttribute(ROOT, root);
		request.getSession().setAttribute(ROOT_PATH, root);
		request.getSession().setAttribute(PATH_TO_LAMS, pathToLams);
		
		logger.debug("setting root to: " + request.getSession().getAttribute(ROOT));
	}
	
	/**
     * persists error messages to request scope
     * @param request
     * @param message
     */
	public void persistError(HttpServletRequest request, String message)
	{
		ActionMessages errors= new ActionMessages();
		errors.add(Globals.ERROR_KEY, new ActionMessage(message));
		logger.debug("add " + message +"  to ActionMessages:");
		saveErrors(request,errors);	    	    
	}
}  
