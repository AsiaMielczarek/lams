<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app >
	<context-param>
	  	<param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>
	  	<param-value>org.lamsfoundation.lams.tool.qa.QaResources</param-value>
	</context-param>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:/org/lamsfoundation/lams/applicationContext.xml
	    	classpath:/org/lamsfoundation/lams/lesson/lessonApplicationContext.xml
	    	classpath:/org/lamsfoundation/lams/tool/toolApplicationContext.xml
	    	classpath:/org/lamsfoundation/lams/learning/learningApplicationContext.xml
			classpath:/org/lamsfoundation/lams/contentrepository/applicationContext.xml
			classpath:/org/lamsfoundation/lams/tool/mc/mcApplicationContext.xml
		</param-value>
	</context-param>
	
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>	

    <!--
    To use non XDoclet filters, create a filters.xml file that
    contains the additional filters (eg Sitemesh) and place it in your
    project's merge dir.  Don't include filter-mappings in this file,
    include them in a file called filter-mappings.xml and put that in
    the same directory.
    -->

    <!--
    To use non XDoclet filter-mappings, create a filter-mappings.xml file that
    contains the additional filter-mappings and place it in your
    project's merge dir.
    -->

    <!--
    To use non XDoclet listeners, create a listeners.xml file that
    contains the additional listeners and place it in your
    project's merge dir.
    -->

     	<!--
	  - Loads the root application context of this web app at startup,
	  - by default from "/WEB-INF/applicationContext.xml".
		- Note that it is preferable to use ContextLoaderListener in a servlet container
		- that follows the Servlet 2.4 initialization order (most Servlet 2.3 containers do).
		-
	  - Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
	  - to access it anywhere in the web application, outside of the framework.
	  -
	  - The root context is the parent of all servlet-specific contexts.
	  - This means that its beans are automatically available in these child contexts,
	  - both for getBean(name) calls and (external) bean references.
		-->
	<servlet>
		<servlet-name>context</servlet-name>
		<servlet-class>org.springframework.web.context.ContextLoaderServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet>
	    <servlet-name>action</servlet-name>
	    <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
	    <init-param>
	      <param-name>config</param-name>
	      <param-value>/WEB-INF/struts-config.xml</param-value>
	    </init-param>
	    <init-param>
	      <param-name>debug</param-name>
	      <param-value>999</param-value>
	    </init-param>
	    <init-param>
	      <param-name>detail</param-name>
	      <param-value>2</param-value>
	    </init-param>
	    <init-param>
	      <param-name>validate</param-name>
	      <param-value>true</param-value>
	    </init-param>
	    <load-on-startup>2</load-on-startup>
    </servlet>
    
    <servlet>
            <servlet-name>Connector</servlet-name>
            <servlet-class>com.fredck.FCKeditor.connector.ConnectorServlet</servlet-class>
            <init-param>
                  <param-name>baseDir</param-name>
                  <param-value>/UserFiles/</param-value>
            </init-param>
            <init-param>
                  <param-name>debug</param-name>
                  <param-value>false</param-value>
            </init-param>
            <load-on-startup>1</load-on-startup>
	</servlet>

  	<servlet-mapping>
		<servlet-name>action</servlet-name>
	   	<url-pattern>*.do</url-pattern>
	</servlet-mapping>

  	<servlet-mapping>
	        <servlet-name>Connector</servlet-name>
             <url-pattern>/editor/filemanager/browser/default/connectors/jsp/connector</url-pattern>
	</servlet-mapping>             
              	

   <session-config>
      <session-timeout>120</session-timeout>
   </session-config>
   
   <taglib>
    <taglib-uri>fck-editor</taglib-uri>
    <taglib-location>/WEB-INF/fckeditor/tlds/FCKeditor.tld</taglib-location>
  </taglib>

   <!--
   To specify mime mappings, create a file named mime-mappings.xml, put it in your project's mergedir.
   Organize mime-mappings.xml following this DTD slice:

   <!ELEMENT mime-mapping (extension, mime-type)>
   -->

   <!--
   To specify error pages, create a file named error-pages.xml, put it in your project's mergedir.
   Organize error-pages.xml following this DTD slice:

   <!ELEMENT error-page ((error-code | exception-type), location)>
   -->

  <!--
  To add taglibs by xml, create a file called taglibs.xml and place it
  in your merge dir.
  -->

   <!--
   To set up security settings for your web app, create a file named web-security.xml, put it in your project's mergedir.
   Organize web-security.xml following this DTD slice:

   <!ELEMENT security-constraint (display-name?, web-resource-collection+, auth-constraint?, user-data-constraint?)>
   <!ELEMENT web-resource-collection (web-resource-name, description?, url-pattern*, http-method*)>
   <!ELEMENT web-resource-name (#PCDATA)>
   <!ELEMENT url-pattern (#PCDATA)>
   <!ELEMENT http-method (#PCDATA)>
   <!ELEMENT user-data-constraint (description?, transport-guarantee)>
   <!ELEMENT transport-guarantee (#PCDATA)>

   <!ELEMENT login-config (auth-method?, realm-name?, form-login-config?)>
   <!ELEMENT auth-method (#PCDATA)>
   <!ELEMENT realm-name (#PCDATA)>
   <!ELEMENT form-login-config (form-login-page, form-error-page)>
   <!ELEMENT form-login-page (#PCDATA)>
   <!ELEMENT form-error-page (#PCDATA)>
   -->

</web-app>
