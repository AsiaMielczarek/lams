<?xml version="1.0" encoding="UTF-8"?>

<project name="build_base" basedir="." default="print-usage">
	<description>
		This is a base for most LAMS build.xml files.
		It contains several most common tasks.
	</description>
	
	<!-- Directory of this parent file -->
	<dirname property="base.dir" file="${ant.file.build_base}"/>
	 
	<!-- Import project specific property file; base dir for this is the importing build.xml file -->
	<property file="build.properties" />
	<!-- Import common property files; base dir for this is the current file -->
	<property file="${base.dir}/build.properties"/>
	<property file="${base.dir}/common.properties"/>
	<property file="${base.dir}/${osPropertiesName}.properties"/>
	
	<!-- Set library paths -->
	<path id="libs.classpath" >
		<fileset dir="../lams_build/lib">
			<include name="**/*.jar" />
		</fileset>
		<!-- Same list as in projects' .classpath file references to WIldFly modules.
			 They need to be exactly listed as **/*.jar would load other versions of JARs
			 that are also present in lams_build/lib.
		-->
		<fileset dir="${jboss.home}/modules/system/layers/base">
			<include name="javax/servlet/api/main/jboss-servlet-api*.jar" />
			<include name="javax/servlet/jsp/api/main/jboss-jsp-api*.jar" />
			<include name="javax/servlet/jstl/api/main/jboss-jstl-api*.jar" />
			<include name="org/javassist/main/javassist-*.jar" />
			<include name="org/hibernate/main/hibernate-core-*.jar" />
			<include name="org/jboss/logging/main/jboss-logging-*.jar" />
			<include name="org/jboss/log4j/logmanager/main/log4j-jboss-logmanager-*.jar" />
			<include name="org/jboss/logmanager/main/jboss-logmanager-*.jar" />
			<include name="org/slf4j/main/slf4j-api-*.jar" />
			<include name="org/slf4j/impl/main/slf4j-jboss-logmanager-*.jar" />
			<include name="org/apache/xerces/main/xercesImpl-*.jar" />
			<include name="javax/mail/api/main/javax.mail-*.jar" />
			<include name="org/jboss/remoting-jmx/main/remoting-jmx-*.jar" />
			<include name="org/apache/commons/beanutils/main/commons-beanutils-*.jar" />
			<include name="org/apache/commons/collections/main/commons-collections-*.jar" />
			<include name="org/apache/commons/io/main/commons-io-*.jar" />
		</fileset>
		<!-- Optional project own libraries -->
		<fileset dir="lib" erroronmissingdir="false">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="product.classpath">
		<path refid="libs.classpath"/>
		<pathelement location="${basedir}/build/classes/java"/>
	</path>

	<fileset id="hbm.fileset" dir="${src.java.dir}"
		     description="List of Java files for _build-hbm target.">
		<include name="**/*.java" />
	</fileset>
	
	<!-- ================================================================ -->
	<!-- Print information								                  -->
	<!-- ================================================================ -->
	
	<target name="print-usage" description="Displays Ant targets descriptions">
		<echo>
		${ant.project.name} build file
		------------------------------------------------------
		
		Available targets are:
			
		print-usage				--> Display this information
		copy-tags               --> Copies custom JSP tags from Central
		deploy-jar         		--> Deploys JAR to EAR
		deploy-war         		--> Deploys WAR to EAR
		copy-to-lams-lib      --> Copies JAR to lams-build for other projects to use
		explode-war             --> Unpacks WAR in EAR
		explode-war-synchronize --> Updates web content in exploded WAR
		explode-war-delete      --> Removes exploded WAR
		</echo>	
	</target>
	
	<target name="_print-classpath">
		<!-- Internal target: Prints out paths to library and project classes. -->
		<echo message="java.class.path = ${java.class.path}" />
		<property name="libs.classpath.string" refid="libs.classpath" />
		<echo message="libs.classpath = ${libs.classpath.string}" />
	</target>
	
	
	<target name="_target-not-available">
		<echo>This target is not implemented or applicable for ${ant.project.name}</echo>
	</target>
	
	<!-- ================================================================ -->
	<!-- Preparations									                  -->
	<!-- ================================================================ -->

	<target name="_clean-dirs">
		<!-- Internal target: Recreates dirs for compiled output files. -->
		<echo>${ant.project.name}: Removing cache and build folders</echo>
		<delete dir="${jboss.home}server/default/tmp" quiet="true" />
		<delete dir="${jboss.home}server/default/work" quiet="true" />
		<delete dir="${basedir}/build" quiet="true" />
				
		<echo>${ant.project.name}: Creating build dir structure</echo>
		<mkdir dir="${basedir}/build/classes/java" />
		<mkdir dir="${basedir}/build/lib" />
		<mkdir dir="${basedir}/build/deploy" />
		<mkdir dir="${basedir}/build/deploy/sql" />
		<mkdir dir="${basedir}/build/deploy/language" />
		<mkdir dir="${basedir}/build/war" />
	</target>
	
	
	<target name="copy-tags" description="Copies LAMS TLD and TAGs.">
		<echo>${ant.project.name}: Copying tags from Central</echo>
   		<copy todir="${conf.web.dir}/WEB-INF/tlds/lams" 
   			  file="${tag.web.dir}/tlds/lams/lams.tld" overwrite="true" verbose="true" />	
		<copy todir="${conf.web.dir}/WEB-INF/tags" overwrite="true" verbose="true">
			<fileset dir="${tag.web.dir}/tags" />
		</copy>
	</target>
	
	<!-- =================================================================== -->
	<!-- Database Tasks                                             		 -->
	<!-- =================================================================== -->
	
	<target name="_db-script">
		<!-- Internal target: Runs SQL script given by call parameter. -->
		<sql driver="com.mysql.jdbc.Driver"
		     url="${db.url.build}"
			 userid="${db.username}"
			 password="${db.password}"
			 encoding="utf8">
			<classpath>
				<fileset dir="../lams_build/lib/mysql" includes="*.jar"/> 
			</classpath>
			<transaction src="${sql.script}" />
		</sql>
	</target>
	
	<!-- ================================================================ -->
	<!-- Compilations								                      -->
	<!-- ================================================================ -->

	<target name="_compile-java" depends="_clean-dirs">
		<!-- Internal target: Compile Java sources. -->
		<echo>${ant.project.name}: Compiling Java sources</echo>
		<javac srcdir="${src.java.dir}"
			   compiler="modern"
	           source="1.8"
			   target="1.8"
               debug="on"
               includeantruntime="false"
			   debuglevel="lines,vars,source"
               classpathref="libs.classpath"
               destdir="${basedir}/build/classes/java">
               <compilerarg line="-encoding utf-8"/>
        </javac>
        
		<echo>${ant.project.name}: Copying additional non-Java sources</echo>
	 	<copy todir="${basedir}/build/classes/java" overwrite="true">
			<fileset dir="${src.java.dir}">
				<include name="**/*.xml"/>
				<include name="**/*.properties"/>
				<!-- Autopatch -->
				<include name="**/*.sql"/>
			</fileset>
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- XDoclet tasks			                             				 -->
	<!-- =================================================================== -->
	
	<taskdef name="webdoclet"
		     classname="xdoclet.modules.web.WebDocletTask"
		     classpathref="libs.classpath"
	/>
	<target name="_build-webdoclet" depends="_clean-dirs">
		<!-- Internal target: Generates XML files from Java source using XDoclet. -->
		
		<!-- First try to build struts-config.xml and web.xml from conf/xdoclet files
		     If Tool is based on static (non-generated) version of these files, 
		     they will still be generated, but will be overwritten by next step.
		-->
		<echo>${ant.project.name}: Building XML files using XDoclet</echo>

		<webdoclet destDir="${basedir}/build/war/WEB-INF"
			       mergeDir="${conf.dir}/xdoclet"
			       >
			<fileset dir="${src.java.dir}">
				<include name="**/*.java" />
				<exclude name="**/*Skeleton.java" />
			</fileset>
			<deploymentdescriptor sessiontimeout="120" servletspec="2.4" distributable="false" />
			<strutsconfigxml version="1.2" validateXML="true" />
			<strutsdynaformvalidationxml version="1.1.3"  />
		</webdoclet>
		
		<echo>Overwriting generated code with custom files for ${ant.project.name}, if exist</echo>
	 	<copy todir="${basedir}/build/war/WEB-INF" overwrite="true" verbose="true">
			<fileset dir="${conf.web.dir}/WEB-INF">
				<include name="web.xml"/>
				<include name="struts-config.xml"/>
				<include name="validation.xml"/>
			</fileset>
	 	</copy>
	</target>
	
	
	<target name="_build-hbm">
		<!-- Internal target: Generates Hibernate hbm.xml files from Java sources using XDoclet. -->
		
		<taskdef name="hibernatedoclet"
			     classname="xdoclet.modules.hibernate.HibernateDocletTask"
			     classpathref="libs.classpath"
		/>
		
		<!-- Generate HBM files if annotations exist -->
		<echo>${ant.project.name}: Building Hibernate XML files using XDoclet</echo>
		<hibernatedoclet destdir="${basedir}/build/classes/java" excludedtags="@version,@author,@todo" force="true">
			<fileset refid="hbm.fileset" />
			<hibernate version="3.0" />
		</hibernatedoclet>
		
		<!-- Copy remaining HBM non-generated files from conf directory -->
		<echo>${ant.project.name}: Copying static Hibernate XML files</echo>
		<copy todir="${basedir}/build/classes/java" overwrite="true">
			<fileset dir="${conf.dir}/hibernate/mappings" erroronmissingdir="false">
				<include name="**/*.hbm.xml"/>
			</fileset>
		</copy>
	</target>
	
	<!-- ================================================================ -->
	<!-- Build archives        		    	          					  -->
	<!-- ================================================================ -->
	
	<target name="_copy-language" if="product.core">
		<!-- Internal target: Copies language tags to build dir for easier EAR assembly.
		     Required only for base products, not Tools -->
		<echo>${ant.project.name}: Copying language files to build dir</echo>
		<copy todir="${basedir}/build/lib/language/${product.path.filesystem}">
			<fileset dir="${conf.dir}/language/lams">
				<include name="**/*.properties"/>
				<include name="**/*.txt"/>
			</fileset>
		</copy>
	</target>
	
	<target name="_build-manifest">
		<!-- Internal target: Creates a JAR/WAR manifest out of a template. -->
		<echo>${ant.project.name}: Preparing manifest</echo>
		<copy tofile="${basedir}/build/MANIFEST.MF" verbose="true">
			<fileset dir="${base.dir}/conf/j2ee">
				<include name="MANIFEST-template.MF" />
			</fileset>
	        <filterset>
	        	<filter token="product" value="${ant.project.name}"/>
	        	<filter token="version" value="${project.version}"/>
	        </filterset>
		</copy>
	</target>
	
	
	<target name="_build-jar" depends="_compile-java, _build-hbm, _build-manifest, _copy-language">
		<!-- Internal target: Creates JAR file. -->
		<echo>${ant.project.name}: Building JAR</echo>
		<jar jarfile="${basedir}/build/lib/${product}.jar"
			 manifest="${basedir}/build/MANIFEST.MF">
			<fileset dir="${basedir}/build/classes/java" />
		</jar>
	</target>

	
	<target name="_build-war" 
		    depends="_build-webdoclet, _build-manifest, _copy-language, _jsp-plaincopy, _jsp-precompile">
		<!-- Internal target: Creates WAR file. -->
		<echo>${ant.project.name}: Building WAR</echo>
		<war warfile="${basedir}/build/lib/${product}.war" 
  		     webxml="${basedir}/build/war/WEB-INF/web.xml"
			 manifest="${basedir}/build/MANIFEST.MF">
			<fileset dir="${basedir}/build/war/assembly">
				<include name="**" />
			</fileset>
		</war>
	</target>
	
	
	<!-- This is needed for lams_build, otherwise building WAR deletes JAR and other way around -->
	<target name="_build-product" depends="_build-jar, _build-war" />

	<!-- =================================================================== -->
	<!-- Product deployment			                                         -->
	<!-- =================================================================== -->
	
	<target name="deploy-jar" depends="_build-jar" description="Deploys JAR.">	
		<echo>${ant.project.name}: Deploying JAR</echo>
		<copy file="${basedir}/build/lib/${product}.jar" todir="${jboss.home}/standalone/deployments/lams.ear" overwrite="true" verbose="true" />
	</target>
	
	
	<target name="deploy-war" depends="_build-war, explode-war-delete" description="Deploys WAR.">
		<echo>${ant.project.name}: Deploying WAR</echo>
		<copy file="${basedir}/build/lib/${product}.war" todir="${jboss.home}/standalone/deployments/lams.ear" overwrite="true" verbose="true" />
		
		<echo>Copying language files for ${ant.project.name}, if exist</echo>
		<copy todir="${jboss.home}/standalone/deployments/lams.ear/lams-dictionary.jar/${product.path.filesystem}" overwrite="true">
		   <fileset dir="${conf.dir}/language/lams" erroronmissingdir="false">
		    <include name="**/*.properties"/>
		    <include name="**/*.txt"/>
		   </fileset>
		</copy>
	</target>
	
	
	<target name="copy-to-lams-lib" if="product.core" depends="_build-jar"
		    description="Copies JAR file to lams_build/lib/lams for other projects to use.">
  		<copy overwrite="yes" todir="../lams_build/lib/lams">
  			<fileset dir="${basedir}/build/lib">
  				<include name="${product}.jar"/>
  			</fileset>
  		</copy>	
	</target>
	
	
	<target name="_add-conf-module">
		<!-- Internal target: Adds subprojects' JAR/WAR to LAMS EAR application.xml -->
		<property name="moduleActivationPlaceholder" value="&lt;!-- Optional Module Placeholder - do not remove --&gt;" />
		<loadfile srcFile="conf/moduleActivation.xml" property="moduleActivationEntry" quiet="true" />
		<echo>${ant.project.name}: Enable module in EAR config files</echo>
		<!-- Remove existing entries first, so it is possible to run target multiple times -->
		<replaceregexp file="${jboss.home}/standalone/deployments/lams.ear/META-INF/application.xml"
					   flags="gi"
		               match="${moduleActivationEntry}" 
			           replace=""
		/>
		<replaceregexp file="${jboss.home}/standalone/deployments/lams.ear/META-INF/application.xml"
			 		   flags="i"
			           match="(${moduleActivationPlaceholder})"
			           replace="${moduleActivationEntry}    \1"
		/>
	</target>

	<!-- =================================================================== -->
	<!-- Explode WAR                                        				 -->
	<!-- =================================================================== -->
	
	<available property="product.war.exists" file="${jboss.home}/standalone/deployments/lams.ear/${product}.war" type="file" />
	
	<target name="explode-war" if="product.war.exists" description="Explodes deployed WAR to folder.">
		<echo>${ant.project.name}: Renaming existing WAR</echo>
		<move tofile="${jboss.home}/standalone/deployments/lams.ear/temp-${product}.war" file="${jboss.home}/standalone/deployments/lams.ear/${product}.war" />
		<echo>${ant.project.name}: Exploding WAR to folder</echo>
		<unjar src="${jboss.home}/standalone/deployments/lams.ear/temp-${product}.war" dest="${jboss.home}/standalone/deployments/lams.ear/${product}.war" />
		<echo>${ant.project.name}: Removing temporary WAR</echo>
		<delete>
			<fileset dir="${jboss.home}/standalone/deployments/lams.ear">
				<include name="temp-${product}.war" />
			</fileset>
		</delete>
	</target>
	
	
	<target name="explode-war-synchronize" description="Copies web files into exploded WAR folder.">
		<echo>Overwriting deployed ${ant.project.name} web files with source files</echo>
		<copy todir="${jboss.home}/standalone/deployments/lams.ear/${product}.war" verbose="yes">
			<fileset dir="${conf.web.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
	</target>
	
	
	<target name="explode-war-delete" description="Deletes exploded WAR folder.">
		<echo>${ant.project.name}: Removing WAR folder</echo>
		<delete dir="${jboss.home}/standalone/deployments/lams.ear/${product}.war" quiet="true" />

		<echo>Removing temporary WAR for ${ant.project.name}, if exists</echo>
		<delete file="${jboss.home}/standalone/deployments/lams.ear/temp-${product}.war" quiet="true" />
	</target>
	
	
	<!-- =================================================================== -->
	<!-- JSP precompilation                                   				 -->
	<!-- =================================================================== -->
	
	<!-- Runs if jsp.precompile setting is set in lams_build/common.properties -->
	<target name="_jsp-precompile" if="jsp.precompile" depends="_compile-java">
		<!-- Internal target: Precompiles JSP files. -->
		<echo>${ant.project.name}: Precompiling JSP files</echo>
		
		<!-- Work on a copy of web files, not originals
             Copy them to build.war directory first for processing -->
		<echo>${ant.project.name}: Copying web files for building</echo>
	 	<copy todir="${basedir}/build/war" overwrite="true">
			<fileset dir="${conf.web.dir}">
				<include name="**"/>
				<!-- These were created or copied in _build-webdoclet task -->
				<exclude name="WEB-INF/web.xml"/>
				<exclude name="WEB-INF/struts-config.xml"/>
				<exclude name="WEB-INF/validation.xml"/>
			</fileset>
	 	</copy>
		
		<!-- Define JSP compiler
		<path id="jsp.precompile.classpath">
			<path refid="product.classpath"/>
			<fileset dir="${jboss.home}/modules/system/layers/base">
				<include name="org/jboss/common-core/main/jboss-common-core-*.jar" />
			</fileset>
			
			<fileset dir="${jboss.home}/standalone/deploymentsers/jbossweb.deployer">
				<include name="*.jar" />
			</fileset>
		</path>
		 -->
		
		<taskdef name="jasper2"
				 classname="org.apache.jasper.JspC"
			     classpathref="libs.classpath"
		/>
		
		<!-- Generate Java files and put servlet mappings in web.xml file -->
		<echo>${ant.project.name}: Generating Java source files from JSP pages</echo>
		<jasper2 uriroot="${basedir}/build/war"
			webXmlFragment="${basedir}/build/war/WEB-INF/generated_web.xml"
			outputDir="${basedir}/build/war/WEB-INF/src"
			package="${product.path.jsp}"
			addWebXmlMappings="true"
			validateXml="false"
			failOnError="true"
		/>

		<!-- Compile Java files generated from JSPs -->
		<echo>${ant.project.name}: Compiling JSP classes</echo>
		
		<!-- Make src folder if it does not exist i.e. no JSPs were compiled in previous step -->
		<mkdir dir="${basedir}/build/war/WEB-INF/src"/>
		<mkdir dir="${basedir}/build/war/WEB-INF/classes"/>
	    <javac destdir="${basedir}/build/war/WEB-INF/classes"
			   compiler="modern"
               source="1.8"
			   target="1.8"
	           debug="off"
			   includeantruntime="false"
	    	   failonerror="true"
	           srcdir="${basedir}/build/war/WEB-INF/src" 
		  	   excludes="**/*.smap"
	    	   classpathref="libs.classpath">
	      <compilerarg line="-encoding utf-8"/>
	      <include name="**" />
	      <exclude name="tags/**" />
	    </javac>
		
		<!-- Prepare files for WAR so copy processing results to assembly dir,
		     excluding plain JSP and tags -->
		<echo>${ant.project.name}: Copying compiled and remaining web resources</echo>
		<copy todir="${basedir}/build/war/assembly">
			<fileset dir="${basedir}/build/war">
				<include name="**"/>
				<exclude name="assembly/"/>
				<exclude name="WEB-INF/src/"/>
				<exclude name="WEB-INF/tags/"/>
				<exclude name="WEB-INF/tlds/"/>
				<exclude name="WEB-INF/web.xml"/>
				<!-- Make double sure that unwanted files are not copied -->
				<exclude name="**/*.java"/>
				<exclude name="**/*.jsp"/>
				<exclude name="**/*.tag"/>
				<exclude name="**/*.tld"/>
			</fileset>
		</copy>
		
		<echo>${ant.project.name}: Copying additional libraries</echo>
	 	<copy todir="${basedir}/build/war/assembly/WEB-INF/lib" flatten="true" verbose="true">
			<fileset dir="${basedir}/lib" erroronmissingdir="false">
				<include name="**/*"/>
			</fileset>
	 	</copy>
	</target>
			
	
	<!-- Runs if jsp.precompile setting is NOT set in lams_build/common.properties 
		 JSPs will be compiled at runtime, which is default behaviour allowing hotdeploy -->
	<target name="_jsp-plaincopy" unless="jsp.precompile">
		<!-- Internal target: Copies JSP files. -->
		<echo>${ant.project.name}: Copying JSP files without precompilation</echo>

		<!-- No processing is needed so copy files straight to assembly dir to create WAR -->
		<echo>Copying web resources</echo>
	 	<copy todir="${basedir}/build/war/assembly">
			<fileset dir="${basedir}/build/war">
				<!-- Some XML files were created or copied in _build-webdoclet task --> 
				<include name="**"/>
				<exclude name="assembly/"/>
				<exclude name="WEB-INF/web.xml"/>
			</fileset>
			<fileset dir="${conf.web.dir}">
				<include name="**"/>
				<exclude name="WEB-INF/classes/"/>
				<exclude name="WEB-INF/web.xml"/>
				<exclude name="WEB-INF/struts-config.xml"/>
				<exclude name="WEB-INF/validation.xml"/>
			</fileset>
	 	</copy>
		
		<echo>${ant.project.name}: Copying additional libraries</echo>
	 	<copy todir="${basedir}/build/war/assembly/WEB-INF/lib" flatten="true" verbose="true">
			<fileset dir="${basedir}/lib" erroronmissingdir="false">
				<include name="**/*"/>
			</fileset>
	 	</copy>
	</target>
	
</project>
