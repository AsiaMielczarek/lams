<?xml version="1.0"?>

<!-- -->
<!DOCTYPE project [
]>
<project name="Lams_Admin" default="usage" basedir=".">

	<property file="build.properties"/>
	<property file="../lams_build/common.properties"/>
	<property file="../lams_build/${osPropertiesName}.properties" />

	<path id="all-libs">
			<fileset dir="${sharedlib}">
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="${j2eelibs}">
					<include name="**/*.jar"/>
			</fileset>
	</path>

	<path id="project.classpath">
		<path refid="all-libs" />
		<!-- Java CLASSPATH should be added as the last item -->
		<!-- This property is supposed to be set in eclipse  -->
		<pathelement location="${java.class.path}" />
	</path>

	<target name="usage">
		<echo message="" />
		<echo message="${name} build file" />
		<echo
			message="------------------------------------------------------" />
		<echo message="" />
		<echo message="Among the available targets are:" />
		<echo message="" />
		<echo message="build    --> build all; don't create JARs" />
		<echo message="alljars  --> create all JAR files" />
		<echo message="tests    --> run tests" />
		<echo message="" />
	</target>

	<target name="init">
		<available property="xdoclet-jars-installed"
			file="lib/xdoclet/xdoclet-${xdoclet.version}.jar" />
	</target>


	<!-- ================================================================ -->
	<!-- Preparations									                  -->
	<!-- ================================================================ -->
	<target name="preparedirs">
		<mkdir dir="${build}" />
		<mkdir dir="${build.classes.java}" />
		<mkdir dir="${build.classes.test}" />
		<mkdir dir="${build.lib}" />
	</target>

	<target name="clean" depends="preparedirs"
		description="removes all class files">
		<delete>
			<fileset dir="${build.classes.java}" />
			<fileset dir="${build.classes.test}" />
			<fileset dir="${build.lib}" />
		</delete>
	</target>

	<target name="compile.java" depends="clean"
		description="compile java sources">
		<javac srcdir="${src.java.dir}" compiler="modern"
			destdir="${build.classes.java}" deprecation="on" debug="on">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
		</javac>
	</target>

	<target name="compile.test" depends="compile.java">
		<javac destdir="${build.classes.test}" compiler="modern">
			<src path="${src.test.dir}" />
			<classpath>
				<pathelement location="${build.classes.java}" />
				<path refid="project.classpath" />
			</classpath>
		</javac>
	</target>
	<target name="copyContext" description="copies the applicationContext.xml files to the web directory">
		<copy overwrite="yes" todir="${build.web}">
			<fileset dir="${conf.web.dir}">
				<include name="**/*.xml"/>
				<include name="**/*.tld"/>
			</fileset>
		</copy>
		<copy overwrite="yes" todir="${build.classes.java}/org/lamsfoundation/lams">
				<fileset dir="${src.java.dir}/org/lamsfoundation/lams">
						<include name="**/*.xml"/>
						<include name="**/*.properties"/>
				</fileset>
		</copy>	
	</target>

	<!-- =================================================================== -->
	<!-- Fails if XDoclet 1.2.x is not on classpath                          -->
	<!-- =================================================================== -->
	<target name="fail-if-no-xdoclet-1.2"
		unless="xdoclet-jars-installed">
		<fail>
			You must download several jar files before you can build
			Middlegen. Execute the "download-deps" target. Then try to
			build again.

			If you are behind a proxy, you should define the properties
			http.proxyHost and http.proxyPort. Example:

			ant -Dhttp.proxyHost=foo.com -Dhttp.proxyPort=8080

			It's also possible to download the jars manually.
		</fail>
	</target>

	<!-- ================================================================ -->
	<!-- Make jar archive for deployment        		    	          -->
	<!-- ================================================================ -->
		<target name="build-jar" depends="compile.java,copyContext" description="creates jar file">
			<delete file="${build.lib}/${product}.jar"/>
			<jar jarfile="${build.lib}/${product}.jar" manifest="${conf.dir}/jar/META-INF/MANIFEST.MF">
				<fileset dir="${build.classes.java}"/>
				<!--<fileset dir="${conf.hibernate.mapping.dir}"/>-->
				<fileset dir="${build.web}"/>
			</jar>
		</target>
	
	   <!-- =================================================================== -->
	   <!-- Run xdoclet			                                                -->
	   <!-- =================================================================== -->
	   	<taskdef name="webdoclet" classname="xdoclet.modules.web.WebDocletTask">
		    <classpath refid="all-libs"/>
		</taskdef>
		
		<target name="webdoclet" depends="preparedirs">
			<webdoclet destdir="${generated.java}" force="${xdoclet.force}">

	         <fileset dir="${src.java.dir}">
	            <include name="**/*Action.java" />
	            <include name="**/*Form.java" />
	         </fileset>

	         <deploymentdescriptor servletspec="2.4" distributable="false"
	         	destdir="${conf.webinf.dir}"
				mergedir="${conf.xdoclet.dir}" sessiontimeout="${sessiontimeout}"/>
				
	         <strutsconfigxml destdir="${conf.struts.dir}" mergedir="${conf.xdoclet.dir}" version="1.2" />
	         <strutsdynaformvalidationxml destdir="${conf.struts.dir}" mergedir="${conf.xdoclet.dir}" version="1.1.3"  />
	      </webdoclet>
	   </target>
	
	   <!-- ================================================ -->
	   <!-- Make the WAR archive for deployment				 -->
	   <!-- ================================================ -->	
		
	   <target name="build-war" depends="webdoclet,build-jar" description="creates war file">
	   		<delete file="${build.lib}/${product}.war"/>	
	   		<war warfile="${build.lib}/${product}.war" manifest="${conf.dir}/war/META-INF/MANIFEST.MF"
	   			 webxml="${conf.webinf.dir}/web.xml">
	   			
	   			<webinf dir="${conf.webinf.dir}">
	   				<include name=".xml"/>
	   				<include name="**/*.*"/>
	   				<exclude name="web.xml"/>
	   				<exclude name="classes/**"/>
	   			</webinf>
	   			<classes dir="${build.classes.java}"/>	
	   			<!-- front end programs like HTML, JSP, CSS etc. -->
	   			<fileset dir="${conf.web.dir}">
						<include name="**/*.jsp"/>
				</fileset>
	   			
	   	   </war>
	   	
	   </target>
	
	<!-- =================================================================== -->
	<!-- Deploy the jar and war                               -->
	<!-- =================================================================== -->
	<target name="deploy-war" depends="build-war" description="Deploy the Admin war file and jar file">
		<delete quiet="true">
			<fileset dir="${jboss.deploy}/tmp"/>
			<fileset dir="${jboss.deploy}/work"/>
		</delete>
		<copy file="${build.lib}/${product}.jar"
				todir="${jboss.deploy}"/> 
		<copy file="${build.lib}/${product}.war"
				todir="${jboss.deploy}"/> 
	</target>

	<!-- =================================================================== -->
	<!-- Run JUnit Tests                                                     -->
	<!-- =================================================================== -->
	<target name="test" depends="compile.test">
		<mkdir dir="${build.report}" />
		<junit printsummary="yes" haltonerror="no" haltonfailure="no"
			fork="yes">
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<batchtest todir="${build.report}">
				<fileset dir="${src.dir.test}">
					<include name="**/Test*.java" />
					<exclude name="**/Test*All.java" />
					<exclude name="**/TestInitSurveySession.java" />
					<exclude name="**/*Action.java" />
				</fileset>
			</batchtest>
			<classpath>
				<pathelement location="${build.classes.java}" />
				<pathelement location="${build.classes.test}" />
				<!--<pathelement location="${conf.hibernate.mapping.dir}" />-->
				<pathelement location="${conf.web.dir}" />
				<path refid="project.classpath" />
			</classpath>
		</junit>
	</target>

	<target name="test-report" depends="test">
		<mkdir dir="${build.report}/html" />
		<junitreport todir="${build.report}">
			<fileset dir="${build.report}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${build.report}/html" />
		</junitreport>
	</target>

</project>
