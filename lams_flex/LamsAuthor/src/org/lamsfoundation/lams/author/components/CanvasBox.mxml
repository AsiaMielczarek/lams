<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	backgroundColor="#FFFFF8"
    dragEnter="dragEnterHandler(event);" 
    dragDrop="dragDropHandler(event);"
    xmlns:mate="http://mate.asfusion.com/"
    click="doZoom(event)"
    borderStyle="solid"
    width="4000" height="3000"   
    x="0" y="0"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.containers.Canvas;
			import org.lamsfoundation.lams.author.util.Constants;
			import mx.core.Application;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import org.lamsfoundation.lams.author.components.activity.*;
			import org.lamsfoundation.lams.author.events.TransitionEvent;
			import mx.controls.Image;
			import mx.managers.DragManager;
			import mx.events.DragEvent;
			import mx.effects.Zoom;
			
			public var currentZoom:Number = 1;
			
			public const MAX_ZOOM:Number = 1;
			public const MIN_ZOOM:Number = 0.2;
			public const ZOOM_LEVEL:Number = 0.2;
			
		  		             
            // The dragEnter event handler for the Canvas container
            // enables dropping.
            private function dragEnterHandler(event:DragEvent):void {
                if (event.dragSource.hasFormat("img"))
                {
                    DragManager.acceptDragDrop(Canvas(event.currentTarget));
                }
            }

            // The dragDrop event handler for the Canvas container
            // sets the Image control's position by 
            // "dropping" it in its new location.
            private function dragDropHandler(event:DragEvent):void {
                
                
                if (event.dragInitiator is ActivityComponent) {
                	var activityComponent:ActivityComponent;
                	activityComponent = event.dragInitiator as ActivityComponent;
                	activityComponent.x = UIComponent(event.currentTarget).mouseX - 10;
              		activityComponent.y = UIComponent(event.currentTarget).mouseY - 10;
              		activityComponent.setCenter();
              		activityComponent.updateTransitionPositions();
                } else {
                	var learningLibraryComponent:LearningLibraryEntryComponent = event.dragInitiator as LearningLibraryEntryComponent;
                	
                	if (learningLibraryComponent.learningLibraryEntry.isCombined) {
                		var combinedActivityComponent:CombinedActivityComponent = new CombinedActivityComponent();
	                	combinedActivityComponent.learningLibraryEntry = learningLibraryComponent.learningLibraryEntry;
	                	combinedActivityComponent.load()
						combinedActivityComponent.x = UIComponent(event.currentTarget).mouseX;
	              		combinedActivityComponent.y = UIComponent(event.currentTarget).mouseY;
	                	this.addChild(combinedActivityComponent);
	                	combinedActivityComponent.setCenter();
                	} else {
                		var toolActivityComponent:ToolActivityComponent = new ToolActivityComponent();
	                	toolActivityComponent.tool = learningLibraryComponent.learningLibraryEntry.toolTemplates[0];
	                	toolActivityComponent.load()
						toolActivityComponent.x = UIComponent(event.currentTarget).mouseX;
	              		toolActivityComponent.y = UIComponent(event.currentTarget).mouseY;
	                	this.addChild(toolActivityComponent);
	                	toolActivityComponent.setCenter();
                	}
                }
                
                // Return cursor state to normal
				Application.application.changeCursorState(Constants.CURSOR_STATE_NORMAL);                    
            }
			
			public function doZoom(isOut:Boolean):void
			{
				var zoom:Zoom = new Zoom();
				
				//zoom.originX = event.localX;
				//zoom.originY = event.localY;
				zoom.originX = 0;
				zoom.originY = 0;
				zoom.zoomHeightFrom = currentZoom;
				zoom.zoomWidthFrom = currentZoom;
				
				if (!isOut && currentZoom < MAX_ZOOM) {
					zoom.zoomHeightTo = currentZoom + ZOOM_LEVEL;
					zoom.zoomWidthTo = currentZoom + ZOOM_LEVEL;
					currentZoom += 0.2;
					currentZoom = Math.round(currentZoom * 10)/10;
					zoom.play([this], false);
				} else if (isOut && currentZoom > MIN_ZOOM) {
					zoom.zoomHeightTo = currentZoom - ZOOM_LEVEL;
					zoom.zoomWidthTo = currentZoom - ZOOM_LEVEL;
					currentZoom -= 0.2;
					currentZoom = Math.round(currentZoom * 10)/10;
					
					zoom.play([this], false);
				}
				
				
			}
            
             
		]]>
	</mx:Script>
	
	
	<!--<mate:Listener type="{TransitionEvent.TRANSITION_EVENT}" receive="startDragging(event)" />-->
</mx:Canvas>
