<?xml version="1.0" encoding="utf-8"?>
<ButtonPanel xmlns:mx="http://www.adobe.com/2006/mxml" 
	buttonClick="toggleMininmiseMaximise()" buttonPadding="4"
	buttonIcon="{minimiseIcon}"
	xmlns:group="org.lamsfoundation.lams.author.components.activity.group.*"
	xmlns:common="org.lamsfoundation.lams.common.components.*"
	xmlns="org.lamsfoundation.lams.common.ui.components.*"
	layout="absolute"
	minWidth="250"
	rollOver="rollOver(event)"
	rollOut="rollOut(event)"
	title="{Application.application.dictionary.getLabel('pi_title')}"
	styleName="propertyInspectorUnselected"
	visible="false"
	>
	
	<mx:Style source="assets/css/propertyInspector.css" />
	
	<mx:Script>
		<![CDATA[
			import org.lamsfoundation.lams.author.controller.PropertyInspectorController;
			import org.lamsfoundation.lams.author.util.Constants;
			import org.lamsfoundation.lams.author.util.AuthorUtil;
			import org.lamsfoundation.lams.author.controller.AuthorController;
			import org.lamsfoundation.lams.author.model.ToolOutputDefinition;
			import mx.events.ListEvent;
			import org.lamsfoundation.lams.author.components.activity.group.LearnerGroupActivityComponent;
			import org.lamsfoundation.lams.author.components.activity.group.MonitorGroupActivityComponent;
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import org.lamsfoundation.lams.author.components.activity.group.RandomGroupActivityComponent;
			import org.lamsfoundation.lams.author.components.activity.group.GroupActivityComponent;
			import mx.binding.utils.ChangeWatcher;
			import mx.binding.utils.BindingUtils;
			import org.lamsfoundation.lams.author.components.activity.ActivityComponent;
			import org.lamsfoundation.lams.author.components.activity.ToolActivityComponent;
			import mx.core.Application;
			import mx.managers.PopUpManager;
					
			public static const MIN_INPUT_WIDTH:int = 100;
			public static const MAX_INPUT_WIDTH:int = 100;
			
			private var authController:AuthorController = AuthorController.instance;
			private var propController:PropertyInspectorController = PropertyInspectorController.instance;
			
			[Bindable] private var selectedActivityComponent:ActivityComponent;
			
			[Bindable] private var applicationCenter:Point = new Point();
			
			[Bindable][Embed("assets/icons/minimise.png")] 
			private var minimiseIcon:Class;
			
			[Bindable][Embed("assets/icons/maximise.png")] 
			private var maximiseIcon:Class;
			
			[Bindable] private var groupTypes:Array = new Array(1, 2, 3);
			
			[Bindable] private var currentAvailableGroups:ArrayCollection;
			
						
			public function openPropertyInspector():void {
				visible = true;
				PopUpManager.addPopUp(this, this, false);
				
				applicationCenter.x = Application.application.width/2;
				applicationCenter.y = Application.application.height/2;
				
				if (selectedActivityComponent != null && AuthorUtil.activitySupportsGrouping(selectedActivityComponent.rootActivity)) {
					currentAvailableGroups = authController.getAllPossibleGroupings(selectedActivityComponent);
				} else {
					currentAvailableGroups = null;
				}
			}
			
			public function closePropertyInspector():void {
				visible = false;
				PopUpManager.removePopUp(this);
			}
			
			// Enable the propertyInspector on rollOver
			private function rollOver(event:MouseEvent):void {
					this.styleName = "propertyInspectorSelected";
					setChildIndex(opacityLayer, 0);
			}
			
			// Disable and white out the propertyInspector on rollOut
			private function rollOut(event:MouseEvent):void {

				// Check the mouse is not still within the area of the propertyInspector
				if (event.localX < 0 || event.localX > width || event.localY < 0 || event.localY > height){
					this.styleName = "propertyInspectorUnselected"
					setChildIndex(opacityLayer, this.getChildren().length -1);
					focusManager.hideFocus();
				}
				
			}
			
			// Minimise/Maximise the property inspector
			private function toggleMininmiseMaximise():void {
				if (vbox.visible) {
					this.vbox.visible = false;
					this.vbox.includeInLayout = false;
					this.opacityLayer.visible = false;
					this.opacityLayer.includeInLayout = false;
					this.mybtn.setStyle("icon", maximiseIcon);
				} else {
					this.vbox.visible = true;
					this.vbox.includeInLayout = true;
					this.opacityLayer.visible = true;
					this.opacityLayer.includeInLayout = true;
					this.mybtn.setStyle("icon", minimiseIcon);
				}
			}
			
			private function openNameGroupsWindow():void {
				nameGroupsWindow.openWindow();
			}
			
		]]>
	</mx:Script>
	
	<mx:Binding destination="selectedActivityComponent" source="AuthorController.instance.selectedActivityComponent" />
	<mx:Binding destination="selectedActivityComponent.title" source="txtTitle.text" />
	
	<mx:VBox id="vbox" height="100%" width="100%" 
		horizontalAlign="center" verticalGap="2" paddingBottom="0" paddingLeft="0" paddingRight="0" top="5">
		<mx:Grid id="grid" verticalGap="4">
			
			<!-- Grid row for the activity title, valid for most acitvity types -->
			<mx:GridRow id="titleGridRow" 
				height="16" visible="{selectedActivityComponent != null}" 
				includeInLayout="{selectedActivityComponent != null}">
				<mx:GridItem>
					<mx:Label text="{Application.application.dictionary.getLabel('pi_lbl_title')}" height="22" />
				</mx:GridItem>
				<mx:GridItem>
					<mx:TextInput id="txtTitle" width="100" maxChars="256" height="22" 
						text="{selectedActivityComponent.title}" />
				</mx:GridItem>
			</mx:GridRow>
			
			<!-- ROW FOR GROUPING -->
			<mx:GridRow id="groupingGridRow" 
				visible="{AuthorUtil.activitySupportsGrouping(selectedActivityComponent.rootActivity)}" 
				includeInLayout="{groupingGridRow.visible}">
				<mx:GridItem>
					<mx:Label text="{Application.application.dictionary.getLabel('grouping_act_title')}" />
				</mx:GridItem>
				<mx:GridItem>
					<common:BindableComboBox id="groupingCombo" dropdownWidth="250" labelField="title" width="{MIN_INPUT_WIDTH}" 
						dataProvider="{currentAvailableGroups}" 
						/>
				</mx:GridItem>
			</mx:GridRow>
			
			<!-- ROWS FOR TOOL ACTIVITIES -->
			<mx:GridRow styleName="firstInGroup"
				visible="{selectedActivityComponent is ToolActivityComponent}" 
				includeInLayout="{selectedActivityComponent is ToolActivityComponent}">
				<mx:GridItem>
					<mx:Label text="{Application.application.dictionary.getLabel('pi_runoffline')}" />
				</mx:GridItem>
				<mx:GridItem>
					<mx:CheckBox id="runOffline" change="propController.setRunOffline(event)"
						selected="{(selectedActivityComponent is ToolActivityComponent) ? ToolActivityComponent(this.selectedActivityComponent).activity.runOffline : undefined}" />
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow
				visible="{selectedActivityComponent is ToolActivityComponent}" 
				includeInLayout="{selectedActivityComponent is ToolActivityComponent}">
				<mx:GridItem>
					<mx:Label text="{Application.application.dictionary.getLabel('pi_define_monitor_cb_lbl')}" />
				</mx:GridItem>
				<mx:GridItem>
					<mx:CheckBox id="defineLater" change="propController.setDefineLater(event)"
						selected="{(selectedActivityComponent is ToolActivityComponent) ? ToolActivityComponent(this.selectedActivityComponent).activity.defineLater : undefined}"/>
				</mx:GridItem>
			</mx:GridRow>
			
			<!-- ROWS FOR GROUP ACITIVITES -->
			<mx:GridRow id="groupingTypeGridRow" styleName="firstInGroup"
				visible="{selectedActivityComponent is GroupActivityComponent}" 
				includeInLayout="{groupingTypeGridRow.visible}">
				<mx:GridItem>
					<mx:Label text="{Application.application.dictionary.getLabel('pi_group_type')}" />
				</mx:GridItem>
				<mx:GridItem>
				<common:BindableComboBox id="groupingTypeCombo" dropdownWidth="250" labelFunction="propController.getGroupTypeName"
						value="{(selectedActivityComponent is GroupActivityComponent) ? GroupActivityComponent(selectedActivityComponent).activity.groupingTypeID : undefined}"
						dataProvider="{groupTypes}" width="{MIN_INPUT_WIDTH}"  change="propController.setGroupType(event)" />
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow id="groupingNumGR"
				visible="{selectedActivityComponent is GroupActivityComponent}" 
				includeInLayout="{selectedActivityComponent is GroupActivityComponent}">
				<mx:GridItem>
					<mx:Label text="{Application.application.dictionary.getLabel('pi_num_groups')}" />
				</mx:GridItem>
				<mx:GridItem>
					<mx:RadioButton id="groupNumRad"
						visible="{(selectedActivityComponent is GroupActivityComponent) ? GroupActivityComponent(selectedActivityComponent).activity.groupingTypeID != Constants.GROUPING_TYPE_TEACHER_CHOSEN : false}"
						includeInLayout="{groupNumRad.visible}"
						selected="{(selectedActivityComponent is GroupActivityComponent) ? 
							(GroupActivityComponent(selectedActivityComponent).activity.useGroupNumber || 
								GroupActivityComponent(selectedActivityComponent).activity..groupingTypeID != Constants.GROUPING_TYPE_TEACHER_CHOSEN)
									: undefined}"
						change="propController.setGroupUseGroupNumber(event)"
						/>
					<mx:NumericStepper id="groupNum" minimum="2" height="22" width="40" fontSize="10" textAlign="center"
						enabled="{groupNumRad.selected}" 
						value="{(selectedActivityComponent is GroupActivityComponent) ? GroupActivityComponent(selectedActivityComponent).activity.numberOfGroups : undefined}"
						change="propController.setGroupNumber(event)"
						/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow id="learnerNumGR" 
				visible="{(selectedActivityComponent is GroupActivityComponent) ? GroupActivityComponent(selectedActivityComponent).activity.groupingTypeID != Constants.GROUPING_TYPE_TEACHER_CHOSEN : false}" 
				includeInLayout="{learnerNumGR.visible}">
				<mx:GridItem>
					<mx:Label text="{Application.application.dictionary.getLabel('pi_num_learners')}" />
				</mx:GridItem>
				<mx:GridItem>
					<mx:RadioButton id="learnerNumRad"
						visible="{learnerNumGR.visible}"
						includeInLayout="{learnerNumGR.visible}"
						selected="{(selectedActivityComponent is GroupActivityComponent) ? !GroupActivityComponent(selectedActivityComponent).activity.useGroupNumber : undefined}"
						change="propController.setGroupUseGroupNumber(event)"
						/>
					<mx:NumericStepper id="learnerNum" minimum="1" height="22" width="40" fontSize="10" textAlign="center"
						visible="{learnerNumRad.visible}"
						includeInLayout="{learnerNumRad.visible}"
						enabled="{learnerNumRad.selected}" 
						value="{(selectedActivityComponent is GroupActivityComponent) ? GroupActivityComponent(selectedActivityComponent).activity.learnersPerGroups : undefined}"
						change="propController.setLearnerNumber(event)"
						/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow id="equalGroupSizesGR" styleName="firstInGroup"
				visible="{(selectedActivityComponent is GroupActivityComponent) ? GroupActivityComponent(selectedActivityComponent).activity.groupingTypeID == Constants.GROUPING_TYPE_LEARNER_CHOICE : false}"
				includeInLayout="{equalGroupSizesGR.visible}">
				<mx:GridItem>
					<mx:Label text="{Application.application.dictionary.getLabel('pi_equal_group_sizes')}" />
				</mx:GridItem>
				<mx:GridItem>
					<mx:CheckBox id="equalGroupSizesChk" change="propController.setEqualGroupSizes(event)"
						selected="{(selectedActivityComponent is GroupActivityComponent) ? GroupActivityComponent(this.selectedActivityComponent).activity.equalGroupSizes : undefined}"/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow id="viewStudentsBeforeSelectionGR" 
				visible="{equalGroupSizesGR.visible}"
				includeInLayout="{equalGroupSizesGR.visible}">
				<mx:GridItem>
					<mx:Label text="{Application.application.dictionary.getLabel('view_students_before_selection')}" />
				</mx:GridItem>
				<mx:GridItem>
					<mx:CheckBox id="viewStudentsBeforeSelectionChk" change="propController.setViewStudentsBeforeSelection(event)"
						selected="{(selectedActivityComponent is GroupActivityComponent) ? GroupActivityComponent(this.selectedActivityComponent).activity.viewStudentsBeforeSelection : undefined}"/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow styleName="firstInGroup">
				<mx:GridItem></mx:GridItem>
				<mx:GridItem>
					<mx:Button label="{Application.application.dictionary.getLabel('pi_group_naming_btn_lbl')}" 
		                		height="18" click="openNameGroupsWindow()" />
				</mx:GridItem>
			</mx:GridRow>
			
			
			
		</mx:Grid>
	</mx:VBox>
	<mx:Canvas id="opacityLayer" height="100%" width="100%" backgroundColor="white" backgroundAlpha="0.6" />
	
	<mx:ArrayCollection id="toolOutputDefs" />
	
	<group:NameGroupsWindow id="nameGroupsWindow"  includeInLayout="false" />
	

</ButtonPanel>
