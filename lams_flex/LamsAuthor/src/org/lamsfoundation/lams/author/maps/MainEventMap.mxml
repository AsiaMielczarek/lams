<?xml version="1.0" encoding="utf-8"?>
<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	
	<mx:Script>
		<![CDATA[
			import org.lamsfoundation.lams.author.util.TestingConstants;
			import org.lamsfoundation.lams.author.model.ToolOutputDefinition;
			import mx.controls.Alert;
			import org.lamsfoundation.lams.common.util.AjaxUtil;
			import org.lamsfoundation.lams.author.components.activity.ToolActivityComponent;
			import org.lamsfoundation.lams.author.events.DropEvent;
			import com.asfusion.mate.actions.builders.EventAnnouncer;
			import com.asfusion.mate.actions.builders.HTTPServiceInvoker;
      		import com.asfusion.mate.events.UnhandledFaultEvent;
      
			import mx.events.*;
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			
			import org.lamsfoundation.lams.common.dictionary.XMLDictionary;
			import org.lamsfoundation.lams.common.dictionary.XMLDictionaryEvent;
			import org.lamsfoundation.lams.common.util.WDDXParser;
			import org.lamsfoundation.lams.author.controller.AuthorController;
			import org.lamsfoundation.lams.author.events.*;
	
			[Bindable]
			private var learningLibraryUrl:String;
			
			[Bindable]
			private var dictionaryUrl:String;
			
			[Bindable]
			private var dictionaryFallbackUrl:String;
			
			[Bindable] 
			private var getToolOutputDefinitionUrl:String;
			
			public function init():void {
				
				if (Application.application.TESTING) {
					
					var testingUrl:String;
					if (Application.application.TESTING_LOCAL) {
						testingUrl = Application.application.TESTING_URL;
						learningLibraryUrl = testingUrl + "LearningLibraryDetails.xml";
						getToolOutputDefinitionUrl = testingUrl + "sampleToolOutputDefinition.xml";
					} else {
						testingUrl = Application.application.lamsURL;
						learningLibraryUrl = testingUrl + "authoring/author.do";
						getToolOutputDefinitionUrl = testingUrl + "authoring/author.do";
					}
				}	
				
				dictionaryFallbackUrl = "assets/languages/dictionary.xml";
				dictionaryUrl = "assets/languages/" + Application.application.locale + ".xml";
				
			}
			
			private var wddxParser:WDDXParser = new WDDXParser();
			public function getToolOutputDefinitions(toolActivity:ToolActivityComponent):ArrayCollection {
				var toolContentID:int;
				if (toolActivity.toolContentID == 0) {
					toolContentID = toolActivity.tool.defaultToolContentID;
				} else {
					toolContentID = toolActivity.toolContentID;
				}
				
				var xmlString:String;
				
				if (Application.application.TESTING) {
					xmlString = TestingConstants.SAMPLE_OUTPUT_DEFINITION;
				} else {
					var params:Dictionary = new Dictionary();
					params["method"] = "getToolOutputDefinitions";
					params["toolContentID"] = toolContentID.toString()
					var response:Object = AjaxUtil.send(getToolOutputDefinitionUrl, params);
					xmlString = response.toString();
				}

				var xml:XML = new XML(xmlString);
				var parsedXML:ArrayCollection = wddxParser.parseObjectXML(xml) as ArrayCollection;
				var ret:ArrayCollection = new ArrayCollection();
				
				for each (var def:Object in parsedXML) {
					var outputDef:ToolOutputDefinition = new ToolOutputDefinition();
					outputDef.loadFromDTO(def);
					ret.addItem(outputDef);
				}
				return ret;
			}
			
		]]>
	</mx:Script>
	
		
	
	<!-- UnhandledFaultEvent.FAULT -->
<!--	<EventHandlers type="{UnhandledFaultEvent.FAULT}">
      	<EventAnnouncer generator="{WizardErrorEvent}" type="{WizardErrorEvent.SHOW_ERROR}">
      		<Properties message="{event.fault.message}" />
      	</EventAnnouncer>
	</EventHandlers>-->
	
	<Debugger level="{Debugger.ALL}" />
	
	<!-- FlexEvent.APPLICATION_COMPLETE ___________________________________________________________ -->
	<!-- Loads learning library and dictionary files -->
	<EventHandlers type="{FlexEvent.INITIALIZE}" debug="true" >
		<ObjectBuilder id="authorController" generator="{AuthorController}"/>
		
		<!-- load leearning library -->
		<HTTPServiceInvoker instance="{learningLibraryService}">
			<Request method="getAllLearningLibraryDetails"/>
			<resultHandlers>
				<MethodInvoker generator="{WDDXParser}" method="parseObject" arguments="{resultObject}" />
				<MethodInvoker generator="{AuthorController}" method="setLearningLibrary" arguments="{[lastReturn]}" />
			</resultHandlers>
		</HTTPServiceInvoker>
		
		<!-- load dictionary fallback -->
		<HTTPServiceInvoker instance="{dictionaryFallbackService}">
			<resultHandlers>
				<MethodInvoker generator="{AuthorController}" method="setDictionaryFallback" arguments="{resultObject}" />
			</resultHandlers>
		</HTTPServiceInvoker>
		
		<!-- load dictionary -->
		<HTTPServiceInvoker instance="{dictionaryService}">
			<resultHandlers>
				<MethodInvoker generator="{AuthorController}" method="setDictionary" arguments="{resultObject}" />
			</resultHandlers>
		</HTTPServiceInvoker>
		
	</EventHandlers>

	<!-- ======================================================================================== -->
	<!-- Services   Note: you can have an external file if you have more services -->
	<!-- _________________________________________________________________________________________ -->

	<mx:HTTPService id="learningLibraryService" url="{learningLibraryUrl}" resultFormat="xml" />
	<mx:HTTPService id="dictionaryFallbackService" url="{dictionaryFallbackUrl}" resultFormat="e4x" />
	<mx:HTTPService id="dictionaryService" url="{dictionaryUrl}" resultFormat="e4x" />
    <mx:HTTPService id="getToolOutputDefinitionService" url="{getToolOutputDefinitionUrl}" resultFormat="xml" />    
	
</EventMap>
