<?xml version="1.0" encoding="utf-8"?>
<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	
	<mx:Script>
		<![CDATA[
			import org.lamsfoundation.lams.author.events.DropEvent;
			import com.asfusion.mate.actions.builders.EventAnnouncer;
			import com.asfusion.mate.actions.builders.HTTPServiceInvoker;
      		import com.asfusion.mate.events.UnhandledFaultEvent;
      
			import mx.events.*;
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			
			import org.lamsfoundation.lams.common.dictionary.XMLDictionary;
			import org.lamsfoundation.lams.common.dictionary.XMLDictionaryEvent;
			import org.lamsfoundation.lams.common.util.WDDXParser;
			import org.lamsfoundation.lams.author.controller.AuthorController;
			import org.lamsfoundation.lams.author.events.*;
	
			[Bindable]
			private var learningLibraryUrl:String;
			
			[Bindable]
			private var dictionaryUrl:String;
			
			[Bindable]
			private var dictionaryFallbackUrl:String;
			
			public function init():void {
				
				if (Application.application.TESTING) {
					
					var testingUrl:String;
					if (Application.application.TESTING_LOCAL) {
						testingUrl = Application.application.TESTING_URL;
						learningLibraryUrl = testingUrl + "LearningLibraryDetails.xml";
						
					} else {
						testingUrl = Application.application.lamsURL;
						learningLibraryUrl = testingUrl + "authoring/author.do";
					}
				}	
				
				dictionaryFallbackUrl = "assets/languages/dictionary.xml";
				dictionaryUrl = "assets/languages/" + Application.application.locale + ".xml";
				
			}
			
		]]>
	</mx:Script>
	
	<!-- UnhandledFaultEvent.FAULT -->
<!--	<EventHandlers type="{UnhandledFaultEvent.FAULT}">
      	<EventAnnouncer generator="{WizardErrorEvent}" type="{WizardErrorEvent.SHOW_ERROR}">
      		<Properties message="{event.fault.message}" />
      	</EventAnnouncer>
	</EventHandlers>-->
	
	<!-- FlexEvent.PREINITIALIZE __________________________________________________________________ -->
	
<!--	<EventHandlers type="{FlexEvent.PREINITIALIZE}">
		
	</EventHandlers>
	-->
	
	<Debugger level="{Debugger.ALL}" />
	
	<!-- FlexEvent.APPLICATION_COMPLETE ___________________________________________________________ -->
	<!-- Loads learning library and dictionary files -->
	<EventHandlers type="{FlexEvent.INITIALIZE}" debug="true" >
		<ObjectBuilder id="authorController" generator="{AuthorController}"/>
		
		<!-- load leearning library -->
		<HTTPServiceInvoker instance="{learningLibraryService}">
			<Request method="getAllLearningLibraryDetails"/>
			<resultHandlers>
				<MethodInvoker generator="{WDDXParser}" 
					method="parseObject" arguments="{resultObject}" />
				<MethodInvoker generator="{AuthorController}" method="setLearningLibrary" arguments="{[lastReturn]}" />
			</resultHandlers>
		</HTTPServiceInvoker>
		
		<!-- load dictionary fallback -->
		<HTTPServiceInvoker instance="{dictionaryFallbackService}">
			<resultHandlers>
				<MethodInvoker generator="{AuthorController}" method="setDictionaryFallback" arguments="{resultObject}" />
			</resultHandlers>
		</HTTPServiceInvoker>
		
		<!-- load dictionary -->
		<HTTPServiceInvoker instance="{dictionaryService}">
			<resultHandlers>
				<MethodInvoker generator="{AuthorController}" method="setDictionary" arguments="{resultObject}" />
			</resultHandlers>
		</HTTPServiceInvoker>
		
	</EventHandlers>
	
	<!-- Event fires when a traniition finishes -->
	<EventHandlers type="{TransitionEvent.TRANSITION_EVENT}">
		<MethodInvoker generator="{AuthorController}" method="drawTransition" arguments="{[event]}" />
	</EventHandlers>
	
	<!-- Event fires when you drop an activity directly on the canvas -->
	<EventHandlers type="{DropActivityEvent.DROP_ACTIVITY_EVENT}">
		<MethodInvoker generator="{AuthorController}" method="dropActivity" arguments="{[event]}" />
	</EventHandlers>
	
	
	<!-- ======================================================================================== -->
	<!-- Services   Note: you can have an external file if you have more services -->
	<!-- _________________________________________________________________________________________ -->

	<mx:HTTPService id="learningLibraryService" url="{learningLibraryUrl}" resultFormat="xml" />
	<mx:HTTPService id="dictionaryFallbackService" url="{dictionaryFallbackUrl}" resultFormat="e4x" />
	<mx:HTTPService id="dictionaryService" url="{dictionaryUrl}" resultFormat="e4x" />
        
	
</EventMap>
