<?xml version="1.0" encoding="utf-8"?>
<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.actions.builders.EventAnnouncer;
			import com.asfusion.mate.actions.builders.HTTPServiceInvoker;
      		import com.asfusion.mate.events.UnhandledFaultEvent;
      
			import mx.events.*;
			import org.lamsfoundation.lams.events.*;
			import org.lamsfoundation.lams.business.*;
			import org.lamsfoundation.lams.views.*;
			
			import org.lamsfoundation.lams.common.dictionary.XMLDictionary;
			import org.lamsfoundation.lams.common.dictionary.XMLDictionaryEvent;
			import org.lamsfoundation.lams.common.util.WDDXParser;
	
			[Bindable]
			private var serverURL:String;
			
			[Bindable]
			private var userID:uint;
			
			[Bindable]
			private var orgID:uint;
			
			public function init(url:String, id:uint, orgId:uint):void {
				serverURL = url;
				userID = id;
				orgID = orgId;
				
				// Uncomment to test in debug
				//serverURL = "http://localhost:8080/lams/";
				//userID = 5; 		// test1
				//orgID = 2; 		// Playpen
			}
			
		]]>
	</mx:Script>
	<!-- UnhandledFaultEvent.FAULT -->
	<EventHandlers type="{UnhandledFaultEvent.FAULT}">
      	<EventAnnouncer generator="{WizardErrorEvent}" type="{WizardErrorEvent.SHOW_ERROR}">
      		<Properties message="{event.fault.message}" />
      	</EventAnnouncer>
	</EventHandlers>
	
	<!-- FlexEvent.PREINITIALIZE __________________________________________________________________ -->
	
	<EventHandlers type="{FlexEvent.PREINITIALIZE}">
		<ObjectBuilder id="wizardManager" generator="{WizardManager}"/>
		
		
	</EventHandlers>
	
	<!-- FlexEvent.APPLICATION_COMPLETE ___________________________________________________________ -->
	<EventHandlers type="{FlexEvent.INITIALIZE}">
		<!-- load dict data -->
		<HTTPServiceInvoker instance="{dictionaryService}">
			<Request module="wizard" orgId="{orgID}"/>
			<resultHandlers>
				<MethodInvoker generator="{WizardManager}" method="setDictionary" arguments="{resultObject}" />
			</resultHandlers>
		</HTTPServiceInvoker>	
	</EventHandlers>

	<EventHandlers type="{WizardEvent.INIT_WORKSPACE}">
		<MethodInvoker generator="{WizardManager}" method="initWorkspace" />
		<EventAnnouncer generator="{WizardEvent}" type="{WizardEvent.GET_FOLDER_CONTENTS}">
			<Properties folder="{lastReturn}" folderID="{lastReturn.resourceID}" /> 
		</EventAnnouncer>
	</EventHandlers>

	<!-- WizardEvent.GET_FOLDER_CONTENTS ________________________________________________  -->
	<EventHandlers type="{WizardEvent.GET_FOLDER_CONTENTS}">
		<HTTPServiceInvoker instance="{folderContentService}">
			<Request folderID="{event.folderID}" mode="{event.mode}" userID="{userID}" />
			<resultHandlers>
				<MethodInvoker generator="{WDDXParser}" 
					method="parseObject" arguments="{resultObject}" />
				<MethodInvoker generator="{WizardManager}" method="setFolderContents" arguments="{[lastReturn, event.folder]}" />
				<EventAnnouncer generator="{WizardEvent}" type="{WizardEvent.OPEN_FOLDER}">
					<Properties folder="{event.folder}" folders="{lastReturn}" />
				</EventAnnouncer>
			</resultHandlers>
		</HTTPServiceInvoker>
	</EventHandlers>
	
	<!-- WizardEvent.LOAD_ORGANISATION_USERS ________________________________________________  -->
	<EventHandlers type="{WizardEvent.LOAD_ORGANISATION_USERS}">
		<EventAnnouncer generator="{WizardEvent}" type="{WizardEvent.LOAD_ORGANISATION_STAFF}" />
		<EventAnnouncer generator="{WizardEvent}" type="{WizardEvent.LOAD_ORGANISATION_LEARNERS}" />
		<MethodInvoker generator="{WizardManager}" method="setUsersLoaded" arguments="{true}" />
	</EventHandlers>
	
	<!-- WizardEvent.LOAD_ORGANISATION_LEARNERS ________________________________________________  -->
	<EventHandlers type="{WizardEvent.LOAD_ORGANISATION_LEARNERS}">
		<HTTPServiceInvoker instance="{loadUsersByOrgService}">
			<Request organisationID="{event.organisationID}" role="LEARNER" />
			<resultHandlers>
				<MethodInvoker generator="{WDDXParser}" 
					method="parseObject" arguments="{resultObject}" />
				<MethodInvoker generator="{WizardManager}" method="setLearners" arguments="{[lastReturn]}" />
			</resultHandlers>
		</HTTPServiceInvoker>
	</EventHandlers>
	
	<!-- WizardEvent.LOAD_ORGANISATION_STAFF ________________________________________________  -->
	<EventHandlers type="{WizardEvent.LOAD_ORGANISATION_STAFF}">
		<HTTPServiceInvoker instance="{loadUsersByOrgService}">
			<Request organisationID="{event.organisationID}" role="MONITOR" />
			<resultHandlers>
				<MethodInvoker generator="{WDDXParser}" 
					method="parseObject" arguments="{resultObject}" />
				<MethodInvoker generator="{WizardManager}" method="setStaff" arguments="{[lastReturn, userID]}" />
			</resultHandlers>
		</HTTPServiceInvoker>
	</EventHandlers>
	
	<!-- WizardEvent.ADD_LESSON ________________________________________________  -->
	<EventHandlers type="{WizardEvent.ADD_LESSON}">
		<MethodInvoker generator="{WDDXParser}" 
					method="createWDDX" arguments="{event.lesson.toData}" />
		<HTTPServiceInvoker instance="{initializeLessonService}">
			<properties>
				<Properties method="POST" contentType="application/xml" request="{lastReturn}" useProxy="false" />
			</properties>
			<resultHandlers>
				<MethodInvoker generator="{WDDXParser}" 
					method="parseObject" arguments="{resultObject}" />
				<MethodInvoker generator="{WizardManager}" method="setLesson" arguments="{[lastReturn, event.lesson]}" />
				<EventAnnouncer generator="{WizardEvent}" type="{WizardEvent.CREATE_LESSON_CLASS}">
					<Properties lesson="{event.lesson}"/>
				</EventAnnouncer>
			</resultHandlers>
		</HTTPServiceInvoker>
	</EventHandlers>
	
	<!-- WizardEvent.CREATE_LESSON_CLASS ________________________________________________  -->
	<EventHandlers type="{WizardEvent.CREATE_LESSON_CLASS}">
		<MethodInvoker generator="{WDDXParser}" 
					method="createWDDX" arguments="{event.lesson.toData}" />
		
		<HTTPServiceInvoker>
			<properties>
				<Properties url="{serverURL}monitoring/createLessonClass?userID={userID}" 
							method="POST" 
							resultFormat="xml" 
							contentType="application/xml" 
							request="{lastReturn}" 
							useProxy="false" />
			</properties>
			<resultHandlers>
				<!-- start the lesson -->
				<EventAnnouncer generator="{WizardEvent}" type="{WizardEvent.START}" />
			</resultHandlers>
		</HTTPServiceInvoker>
		
	</EventHandlers>
	
	<!-- WizardEvent.SPLIT_LESSON_CLASS ________________________________________________  -->
	<EventHandlers type="{WizardEvent.SPLIT_LESSON_CLASS}">
		<MethodInvoker generator="{WDDXParser}" 
					method="createWDDX" arguments="{event.lesson.toData}" />
		<HTTPServiceInvoker instance="{splitLessonsService}">
			<properties>
				<Properties method="POST" 
							contentType="application/xml" 
							request="{lastReturn}" 
							useProxy="false" />
			</properties>
			<resultHandlers>
				<MethodInvoker generator="{WDDXParser}" 
					method="parseObject" arguments="{resultObject}" />
				<MethodInvoker generator="{WizardManager}" method="setLessonInstances" arguments="{[lastReturn, event.lesson]}" />
				<!-- start the lesson -->
				<EventAnnouncer generator="{WizardEvent}" type="{WizardEvent.START}" />
			</resultHandlers>
		</HTTPServiceInvoker>
		
	</EventHandlers>
	
	<!-- WizardEvent.START_LESSON ________________________________________________  -->
	<EventHandlers type="{WizardEvent.START_LESSON}">
		<!-- create presence room -->
		<EventAnnouncer generator="{WizardEvent}" type="{WizardEvent.CREATE_PRESENCE_ROOM}">
			<Properties lesson="{event.lesson}"/>
		</EventAnnouncer>
		
		<!-- start lesson -->
		<HTTPServiceInvoker instance="{startLessonService}">
			<Request lessonID="{event.lesson.lessonID}" userID="{userID}" />
			<resultHandlers>
				<MethodInvoker generator="{WDDXParser}" 
					method="parseObject" arguments="{resultObject}" />
				<MethodInvoker generator="{WizardManager}" method="closeOnSuccess" arguments="{[lastReturn, event.last]}" />
			</resultHandlers>
		</HTTPServiceInvoker>
	</EventHandlers>
	
	<!-- WizardEvent.SCHEDULE_LESSON ________________________________________________  -->
	<EventHandlers type="{WizardEvent.SCHEDULE_LESSON}">
		<!-- create presence room -->
		<EventAnnouncer generator="{WizardEvent}" type="{WizardEvent.CREATE_PRESENCE_ROOM}">
			<Properties lesson="{event.lesson}"/>
		</EventAnnouncer>
		
		<!-- schedule lesson -->
		<HTTPServiceInvoker instance="{scheduleLessonService}">
			<Request lessonID="{event.lesson.lessonID}" lessonStartDate="{event.schedule}" scheduleTimeZoneIdx="{event.timeZone}" userID="{userID}" />
			<resultHandlers>
				<MethodInvoker generator="{WDDXParser}" 
					method="parseObject" arguments="{resultObject}" />
				<MethodInvoker generator="{WizardManager}" method="closeOnSuccess" arguments="{[lastReturn, event.last]}" />
			</resultHandlers>
		</HTTPServiceInvoker>
	</EventHandlers>
	
	<!-- WizardEvent.CREATE_PRESENCE_ROOM ________________________________________________  -->
	<EventHandlers type="{WizardEvent.CREATE_PRESENCE_ROOM}">
		<HTTPServiceInvoker instance="{presenceService}">
			<Request lessonId="{event.lesson.lessonID}" />
			<resultHandlers>
				<MethodInvoker generator="{WizardManager}" method="updateXmppRoomCount" />
			</resultHandlers>
		</HTTPServiceInvoker>
	</EventHandlers>
	
	<!-- WizardEvent.CLOSE_NOSTART ________________________________________________  -->
	<EventHandlers type="{WizardEvent.CLOSE_NOSTART}">
		<MethodInvoker generator="{WizardManager}" method="closeNoStart" />
	</EventHandlers>
	
	
	<!-- ======================================================================================== -->
	<!-- Services   Note: you can have an external file if you have more services -->
	<!-- _________________________________________________________________________________________ -->

	<mx:HTTPService id="folderContentService" url="{serverURL}workspace.do?method=getFolderContents" resultFormat="xml" />
	<mx:HTTPService id="loadUsersByOrgService" url="{serverURL}workspace.do?method=getUsersFromOrganisationByRole" resultFormat="xml" />
	<mx:HTTPService id="initializeLessonService" url="{serverURL}monitoring/initializeLesson" resultFormat="xml" />
	<mx:HTTPService id="splitLessonsService" url="{serverURL}monitoring/initializeAndCreateLessons" resultFormat="xml" />
	<mx:HTTPService id="startLessonService" url="{serverURL}monitoring/monitoring.do?method=startLesson" resultFormat="xml" />
	<mx:HTTPService id="scheduleLessonService" url="{serverURL}monitoring/monitoring.do?method=startOnScheduleLesson" resultFormat="xml" />
	<mx:HTTPService id="presenceService" url="{serverURL}Presence.do?method=createXmppRoom" resultFormat="xml" />
	<mx:HTTPService id="dictionaryService" url="monitoring.do?method=getDictionaryXML" resultFormat="e4x" />         
	
</EventMap>
