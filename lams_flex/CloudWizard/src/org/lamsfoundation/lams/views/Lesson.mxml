<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" width="100%" height="100%"
	xmlns:vos="org.lamsfoundation.lams.vos.*" 
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:model="org.lamsfoundation.lams.model.*" 
	xmlns:validate="org.lamsfoundation.lams.validators.*" 
	>

	<mx:Script>
		<![CDATA[
			import com.visualempathy.display.controls.datetime.DateTimePicker;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.ToolTipManager;
			import mx.validators.Validator;
			
			import org.lamsfoundation.lams.common.dictionary.XMLDictionary;
			import org.lamsfoundation.lams.common.dictionary.XMLDictionaryRegistry;
			import org.lamsfoundation.lams.common.util.WDDXParser;
			import org.lamsfoundation.lams.common.util.WDDXUtil;
			import org.lamsfoundation.lams.events.NavigationEvent;
			import org.lamsfoundation.lams.events.WizardEvent;
			import org.lamsfoundation.lams.vos.Lesson;
			import org.lamsfoundation.lams.vos.WorkspaceCollection;
			import org.lamsfoundation.lams.vos.WorkspaceItem;
			
   			[Bindable]
   			public var _workspace:WorkspaceItem;
   			
   			[Bindable]
            public var selectedNode:WorkspaceItem;
   			
   			[Bindable]
   			public var lessonID:uint;
   			
   			[Bindable]
   			public var lessonInstances:Array;
   			
   			[Bindable]
   			public var learners:Learners;
   			
   			[Bindable]
   			public var advanced:Advanced;
   			
   			[Bindable]
   			public var dictionary:XMLDictionaryRegistry;
   			
   			[Bindable]
   			public var organisationID:uint;
   			
   			
   			public function set workspace(value:WorkspaceItem):void {
   				_workspace = value;
   				workspaceTree.expandItem(_workspace, true);
   			}
   			
   			private function createInitWorkspace():void {
   				organisationID = Application.application.param("organisationID");
   				
   				var wizardEvent:WizardEvent = new WizardEvent(WizardEvent.INIT_WORKSPACE);
   				this.dispatchEvent(wizardEvent);
   			}
   			
			private function openFolders(event:WizardEvent):void {
				if(_workspace == null) {
					// waiting for data provider to the tree component to be not null
					setTimeout(openFolders, 50, event);
					return;
				}
				
				workspaceTree.expandItem(event.folder, true);
				
				for each(var folder:WorkspaceItem in event.folders) {
					
			   		var wizardEvent:WizardEvent = new WizardEvent(WizardEvent.GET_FOLDER_CONTENTS);
			   		wizardEvent.folderID = folder.resourceID;
			   		wizardEvent.folder = folder as WorkspaceItem;
			   			
			   		this.dispatchEvent(wizardEvent);
				}
					
			}
   			
   			public function selectDesign(event:Event):void {
   				if(selectedNode == Tree(event.target).selectedItem as WorkspaceItem)
   					return;
   					
   				selectedNode = Tree(event.target).selectedItem as WorkspaceItem;
				
   				Wizard.clearValidationFocus();
   				lessonNameVal.validate();	
   			
   			}
   			
   			public function getFolderContents(event:TreeEvent):void {
   				if(event.item.resourceType == WorkspaceItem.RT_FOLDER && event.item.children.length <= 0) {
			   		workspaceTree.expandItem(event.item, false);
			   		
			   		var wizardEvent:WizardEvent = new WizardEvent(WizardEvent.GET_FOLDER_CONTENTS);
			   		wizardEvent.folderID = event.item.resourceID;
			   		wizardEvent.folder = event.item as WorkspaceItem;
			   			
			   		this.dispatchEvent(wizardEvent);
			   	}
   			}
   			
			public function addLesson(event:Event):Boolean {
				if(selectedNode != null && selectedNode.isValidDesign()) {
					// validate lesson name (tab - lesson)
					var valEvent:ValidationResultEvent = lessonNameVal.validate();
					var valArray:Array;
					
					if(valEvent.results != null) {
						this.dispatchEvent(valEvent);		// event not bubbled
						
						Wizard.setValidationFocus(valEvent.currentTarget.listener);
						this.dispatchEvent(new NavigationEvent(NavigationEvent.LESSON));
					
					// validate enable split lessons option (tab - advanced)
					} else if(advanced.enableSplitLessons.selected && (valEvent = advanced.learnersValidator.validate()).results != null) {
						this.dispatchEvent(valEvent);		// event not bubbled
						
						advanced.setValidationFocus(valEvent.currentTarget.listener);
						this.dispatchEvent(new NavigationEvent(NavigationEvent.ADVANCED));
					
					// schedule validation (tab - advanced)
					} else if(advanced.enableScheduling.selected && (valEvent = advanced.scheduleValidator.validate()).results != null) {
						this.dispatchEvent(valEvent);		// event not bubbled
						
						advanced.setValidationFocus(valEvent.currentTarget.listener);
						this.dispatchEvent(new NavigationEvent(NavigationEvent.ADVANCED));
						
					// validate staff and learners list (tab - learners)
					} else if(learners.usersLoaded && (valArray = Validator.validateAll(learners.usersValidatorCollection)).length > 0) {
						var invalid:Boolean = false;
						
						for each(valEvent in valArray) {
							if(valEvent.results != null && valEvent.type == ValidationResultEvent.INVALID) {
								this.dispatchEvent(valEvent);
								Wizard.setValidationFocus(valEvent.currentTarget.listener);
								invalid = true;
							}
						}
						
						if(invalid)
							this.dispatchEvent(new NavigationEvent(NavigationEvent.LEARNERS));
						
					// validate learning design
					} else if(newLesson.learningDesignID != 0) {
						var addType:String = (newLesson.numberLessonsSplit > 0) ? WizardEvent.SPLIT_LESSON_CLASS : WizardEvent.ADD_LESSON;
						var wizardEvent:WizardEvent = new WizardEvent(addType);
						wizardEvent.lesson = newLesson;
						
						this.dispatchEvent(wizardEvent);
						
						return true;
					
					// else case - unknown error
					} else {
						Alert.okLabel = dictionary.getLabel('button.ok');
						Alert.show(dictionary.getLabelAndInsert("error.system.error", ['unknown']), dictionary.getLabel('sys.error'), Alert.OK, this);
					}
					
				} else {
					Alert.okLabel = dictionary.getLabel('button.ok');
					Alert.show(dictionary.getLabel("al.validation.msg1"), dictionary.getLabel("al.alert"), Alert.OK, this);
					
					this.dispatchEvent(new NavigationEvent(NavigationEvent.LESSON));
				}
				
				return false;
			}
			
			public function startLesson(event:WizardEvent):void {
				// close window - start in monitor (tab -advanced)
				if(advanced.startInMonitor.selected) {
					this.dispatchEvent(new WizardEvent(WizardEvent.CLOSE_NOSTART));
					return;
				}
				
				// fire normal start event(s)
				var startType:String = (newLesson.enableScheduling) ? WizardEvent.SCHEDULE_LESSON : WizardEvent.START_LESSON;
				var wizardEvent:WizardEvent = new WizardEvent(startType);
				
				wizardEvent.lesson = newLesson;
				wizardEvent.schedule = (newLesson.enableScheduling) ? advanced.scheduleDateTimeStr : null;
				var selectedTimeZoneIndex:uint = advanced.scheduleDateTZ.selectedIndex;
				wizardEvent.timeZone = advanced.scheduleDateTZ.dataProvider[selectedTimeZoneIndex].timeZoneId;
				
				if(lessonInstances.length > 1) {
					startLessonInstances(wizardEvent);
				} else {
					this.dispatchEvent(wizardEvent);
				}
				
			}
			
			public function startLessonInstances(event:WizardEvent):void {
				var count:uint = 0;
				
				for each(var instanceLessonID:uint in lessonInstances) {
					var wizardEvent:WizardEvent = new WizardEvent(event.type);
					count++;
					
					lessonID = instanceLessonID;
					
					wizardEvent.lesson = newLesson;
					wizardEvent.schedule = event.schedule;
					var selectedTimeZoneIndex:uint = advanced.scheduleDateTZ.selectedIndex;
					wizardEvent.timeZone = advanced.scheduleDateTZ.dataProvider[selectedTimeZoneIndex].timeZoneId;
				
					wizardEvent.last = (lessonInstances.length == count);
				
					this.dispatchEvent(wizardEvent);
				}
				
			}
			
			//check if this lesson should be scheduled for finish and if so schedule it
			public function checkForLessonFinishOnSchedule(event:WizardEvent):void {
				if(newLesson.enableTimeLimits && !newLesson.enableIndividualTimeLimit) {
					var wizardEvent:WizardEvent = new WizardEvent(WizardEvent.SCHEDULE_LESSON_FINISH);
					wizardEvent.lesson = newLesson;
					wizardEvent.scheduledNumberDaysToLessonFinish = newLesson.scheduledNumberDaysToLessonFinish;
					
					this.dispatchEvent(wizardEvent);					
				}
				
			}
			
			private function hasFocus(value:Boolean):void {
				if(value) {
					// tab is current selection
					validateLessonNameField();
				}
			}
			
			private function validateLessonNameField():void {
				if(selectedNode != null) {
					var valEvent:ValidationResultEvent = lessonNameVal.validate();
					if(valEvent.results != null)
						Wizard.setValidationFocus(lessonNameVal.listener);
				}
					
			}
			
		]]>
	</mx:Script>
	
	
	<!-- Event Listeners -->
	<mate:Listener type="{NavigationEvent.TAB_SELECT}" receive="hasFocus(event.selectedIndex==Wizard.LESSON_INDEX)" />
	<mate:Listener type="{WizardEvent.OPEN_FOLDER}"  receive="openFolders(event)" />
	<mate:Listener type="{WizardEvent.START}" receive="startLesson(event)" />
	<mate:Listener type="{WizardEvent.CHECK_SCHEDULE_LESSON_FINISH}" receive="checkForLessonFinishOnSchedule(event)" />
	
	<!-- Model ______________________________________________________________________ -->
	<vos:Lesson id="newLesson">
		<vos:lessonID>{lessonID}</vos:lessonID>
		<vos:lessonName>{resourceName_txi.text}</vos:lessonName>
		<vos:lessonDescription>{advanced.description_txi.text}</vos:lessonDescription>
		<vos:organisationID>{organisationID}</vos:organisationID>
		<vos:learningDesignID>{selectedNode.resourceID}</vos:learningDesignID>
		<vos:learnerExportPortfolio>{advanced.enabledExportPortfolio.selected}</vos:learnerExportPortfolio>
		<vos:enablePresence>{advanced.enablePresence.selected}</vos:enablePresence>
		<vos:enableLiveEdit>{advanced.enabledLiveEdit.selected}</vos:enableLiveEdit>
		<vos:enableLessonNotifications>{advanced.enableLessonNotifications.selected}</vos:enableLessonNotifications>
		<vos:enableIm>{advanced.enableIm.selected}</vos:enableIm>
		<vos:numberLessonsSplit>{advanced.noInstances}</vos:numberLessonsSplit>
		<vos:numberLearnersSplit>{advanced.noLearnersPerInstance}</vos:numberLearnersSplit>
		<vos:enableTimeLimits>
			{advanced.enableTimeLimits.selected}
		</vos:enableTimeLimits>
		<vos:scheduledNumberDaysToLessonFinish>{advanced.noDaysToLessonFinish.value}</vos:scheduledNumberDaysToLessonFinish>
		<vos:enableIndividualTimeLimit>{advanced.enableIndividualTimeLimit.selected}</vos:enableIndividualTimeLimit>
		<vos:enableScheduling>
			{advanced.enableScheduling.selected}
		</vos:enableScheduling>
		<vos:learners>
			<vos:UserCollection users="{learners.learnersSelected}" groupName="{learners.learnersGroupName}" />
		</vos:learners>
		<vos:staff>
			<vos:UserCollection users="{learners.staffSelected}" groupName="{learners.staffGroupName}" />
		</vos:staff>
	</vos:Lesson>
	
	<!-- GUI ______________________________________________________________________ -->
		
	<mx:VBox width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
		<mx:Label width="100%" textAlign="left" fontWeight="bold" text="{dictionary.getLabel('lesson.tab.heading.label')}" />
		<mx:Tree id="workspaceTree" width="100%"  preinitialize="createInitWorkspace()" dataDescriptor="{new WorkspaceCollection()}" dataProvider="{_workspace}" itemOpen="getFolderContents(event)" change="selectDesign(event)" labelField="name" height="100%" showRoot="false" />
		<mx:HBox horizontalAlign="left" right="5" width="100%">
			<mx:FormItem label="{dictionary.getLabelAndInsert('wizardTitle.x.lbl', [''])}" width="100%">
				<mx:TextInput id="resourceName_txi" text="{selectedNode.name}" width="50%" />
			</mx:FormItem>
		</mx:HBox>
	</mx:VBox>
	
	<!-- lesson name validator -->
	<validate:LessonValidator id="lessonNameVal" 
         source="{newLesson}" property="lessonName"
        listener="{resourceName_txi}" errorMessage="{dictionary.getLabel('al.validation.msg2')}" />
	
</mx:VBox>