<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" width="100%" height="100%"
	xmlns:vos="org.lamsfoundation.lams.vos.*" xmlns:mate="http://mate.asfusion.com/"
	xmlns:model="org.lamsfoundation.lams.model.*" 
	xmlns:timePicker="com.visualempathy.display.controls.datetime.*" 
	xmlns:validate="org.lamsfoundation.lams.validators.*" >

	<mx:Script>
		<![CDATA[
			import mx.states.State;
			import mx.core.Application;
			import mx.collections.ArrayCollection;
			import com.asfusion.mate.actions.builders.EventAnnouncer;
			import mx.controls.ToolTip;
			import org.lamsfoundation.lams.events.WizardEvent;
			import mx.binding.utils.BindingUtils;
			import mx.events.ValidationResultEvent;
			import mx.controls.Text;
		    import mx.managers.ToolTipManager;

			import org.lamsfoundation.lams.events.NavigationEvent;
			import org.lamsfoundation.lams.common.dictionary.XMLDictionaryRegistry;
   			
   			public static var LAMS_FLASH_FORMAT:String = "DD/M/YYYY L:NN A";
   			
   			[Bindable]
   			public var scheduleDateTimeStr:String;
   			
   			[Bindable]
   			public var noLearnersPerLesson:uint = 0;
   			
   			[Bindable]
   			public var learners:Learners;
   			
   			[Bindable]
   			public var lesson:Lesson;
   			
   			[Bindable]
   			public var dictionary:XMLDictionaryRegistry;
   			
   			[Bindable]
   			public var noInstances:Number;
   			
   			[Bindable]
   			public var noLearnersPerInstance:Number;
   			
   			private var instTxt_idx:uint;
   			private static var focusTimeout:uint;
   			
   			[Bindable]
   			private var tzList:Array;
   			
   			[Bindable]
   			private var userTimeZone:uint;
   			
   			public static function getUserTimeZone(tz:String, tzList:Array):uint {
   				var count:uint = 0;
   				
   				var timeZoneLbl:String = tz;
   				var pIdx:int = timeZoneLbl.indexOf("GMT");
   				
   				var timeZoneType:String;
   				var timeZoneOffset:String;
   				var tzOffsetVal:Number;
   				
   				if(pIdx != -1) {
   					timeZoneType = timeZoneLbl.substring(0, 4);
   					timeZoneOffset = timeZoneLbl.substring(4, timeZoneLbl.length);
   					
   					tzOffsetVal = Number(timeZoneOffset.substring(0, timeZoneOffset.lastIndexOf(":")));
   					
   					timeZoneLbl = timeZoneType + tzOffsetVal;	 
   					
   				}
   				
   				for(var i:uint=0; i<tzList.length; ++i) {
   					var label:String = tzList[i].label;
   					
   					if(label == timeZoneLbl) {
   						return count;
   					}
   					
   					count++;
   				}
   				
   				return null;
   			}
   			
   			public function enableSplitLessonsOption():void {
   				if(!enableSplitLessons.selected) {
   					Wizard.clearValidationFocus();
   					
   					noLearnersPerLesson = 0;
   					
   					noInstances = 0;
   					noLearnersPerInstance = 0;
   					
   					lesson.lessonInstances = null;
   					
   					removeInstanceText();
   				} else
   					updateLearnersPerLesson();
   					
   				if(checkUsersLoaded())
   					noLearnersPerLesson_stp.maximum = lesson.newLesson.learners.users.length;
   			}
   			
   			public function checkUsersLoaded():Boolean {
   				var valEvent:ValidationResultEvent = learnersValidator.validate();
   				
   				if(valEvent.type == ValidationResultEvent.INVALID && enableSplitLessons.selected)
   					this.setValidationFocus(valEvent.currentTarget.listener);
   				
   				return (valEvent.results == null);
   					
   			}
   			
   			private function updateLearnersPerLesson():void {
   				var valChk:Boolean = checkUsersLoaded();
   				var learnersSize:Number = lesson.newLesson.learners.users.length;
   				
   				noLearnersPerLesson_stp.maximum = learnersSize;
   				
   				if(learnersSize <= 0)
   					noLearnersPerLesson_stp.value = 1;
   				
   				noLearnersPerLesson = noLearnersPerLesson_stp.value;
   				
   				noInstances = (valChk) ? Math.floor(learnersSize/noLearnersPerLesson) : 1;
   				if(noInstances <= 1 && learnersSize != noLearnersPerLesson) noInstances++;
   				
   				noLearnersPerInstance = (valChk) ? learnersSize/noInstances : learnersSize;
   				
   				if(valChk) addInstanceText();
   				
   			}
   			
   			private function addInstanceText():void {
   				
   				if(learnersNoteBox.getChildren().length > 0)
   					removeInstanceText();
	   				
	   			var instTxt:Text = new Text();
	   			instTxt.id = "learnersNote_txt";
	   			instTxt.setStyle("paddingTop", 8);
	   			instTxt.width = learnersNoteBox.width * 0.5;
	   			instTxt.text = dictionary.getLabelAndInsert("wizard.splitLearners.splitSum", [noInstances, Math.round(noLearnersPerInstance)]); 
	   								//noInstances + 
	   								//" instances of this lesson will be created and approx. " + Math.round(noLearnersPerInstance) +
	   								//" learners will be allocated to each lesson.";
	   				
	   			learnersNoteBox.addChild(instTxt);
	   				
   			}
   			
   			private function removeInstanceText():void {
   				learnersNoteBox.removeAllChildren();
   			}
   			
   			private function changePresenceSelection():void {
   				if(!enablePresence.selected) enableIm.selected = false;
   			}
   			
   			private function hasFocus(value:Boolean):void {
				if(value) {
					
					// tab is current selection
					createTimeZoneList();
					enableSplitLessonsOption();

					var valEvent:ValidationResultEvent = scheduleValidator.validate();
					if(valEvent.results != null) {
						this.dispatchEvent(valEvent);
						this.setValidationFocus(valEvent.currentTarget.listener);
					}
				} else {
					this.clearValidationFocus(dateTimePicker_fItm);
				}
			}
			
			private function checkScheduleDateTime(event:Event):void {
				if(scheduleDateTZ != null) {
					this.scheduleDateTimeStr = ScheduleDateDisplay.format(scheduleDateTimePicker.selectedDate);
					var valEvent:ValidationResultEvent = scheduleValidator.validate();
					
					this.clearValidationFocus(valEvent.currentTarget.listener);
	   				
					if(valEvent.results != null) {
						this.dispatchEvent(valEvent);
						this.setValidationFocus(valEvent.currentTarget.listener);
					} else {
						this.clearValidationHighlight(valEvent.currentTarget.listener);
					}
				}
			}
			
			private function changeStartMonitorSelection():void {
				
				enableScheduling.enabled = !startInMonitor.selected;

				if(startInMonitor.selected) {
					enableScheduling.selected = false;
					updateSelectedDate();
				}
				
				//enable/disable TimeLimit subgroup
				enableTimeLimits.enabled = !startInMonitor.selected;
				if(startInMonitor.selected) {
					enableTimeLimits.selected = false;
				}
				if(enableIndividualTimeLimit.selected) {
					enableIndividualTimeLimit.selected = false;
				}
				
				var event:WizardEvent = new WizardEvent(WizardEvent.CHANGE_START_BUTTON_LABEL);
				
				// change label on normal start button (add now >> ) if selected to (start in monitor >>)
				event.label = (!startInMonitor.selected) ? dictionary.getLabel('add.now.button.label')
															 : dictionary.getLabel('finish.btn');
				
				this.dispatchEvent(event);
			}
			  
			 
			/** static Validation focus methods */
			public function setValidationFocus(formObject:Object):void {
				if(formObject is FormItem) {
					// set focus on scheduling form item
					formObject.drawFocus(true);
					formObject.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
					focusTimeout = setTimeout(this.clearValidationFocus, 3000, formObject);
				} else {	
					Wizard.setValidationFocus(formObject);
				}
			}
			
			public function clearValidationFocus(focusObject:Object):void {
				clearTimeout(focusTimeout);
				focusObject.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT));
			}
			
			public function clearValidationHighlight(formObject:Object):void {
				formObject.drawFocus(false);
			}
			
			private function updateSelectedDate():void {
				var now:Date = new Date();
				if(scheduleDateTimePicker.selectedDate < now)
					scheduleDateTimePicker.selectedDate = now;
			}
			
			private function createTimeZoneList():void {
				var label:String = "";
				var value:String = "";
				
				if(tzList != null && tzList.length > 0)
					return;
				
				tzList = new Array();
				
				// populate TimeZone list from User (java) class passed through in the Dictionary data.
				for (var i:uint = 0; i <= 30; i++) {
					label = dictionary.getLabel(String('timezoneID' + i));
					value = dictionary.getValue(String('timezoneID' + i)) as String;
					
					tzList.push({label: label, data: value });
				}
				
				//tzList = [ "GMT-12", "GMT-11", "GMT-10", "GMT-9", "GMT-8", "GMT-7",
				//    "GMT-6", "GMT-5", "GMT-4", "Canada/Newfoundland", "GMT-3", "GMT-2", "GMT-1", "GMT", "GMT+1", "GMT+2",
				//    "GMT+3", "Asia/Tehran", "GMT+4", "Asia/Kabul", "GMT+5", "Asia/Calcutta", "Asia/Katmandu", "GMT+6", "GMT+7",
				//    "GMT+8", "GMT+9", "Australia/Adelaide", "GMT+10", "GMT+11", "GMT+12" ]
				
				userTimeZone = Advanced.getUserTimeZone(Application.application.param("tz") as String, tzList);
			}
		]]>
	</mx:Script>
	
	<!-- Event Listeners -->
	<mate:Listener type="{NavigationEvent.TAB_SELECT}" receive="hasFocus(event.selectedIndex==Wizard.ADVANCED_INDEX)" />
	
	<!-- Validators -->
	<validate:LessonValidator id="learnersValidator" source="{lesson.newLesson}" property="learners" listener="{noLearnersPerLesson_stp}" errorMessage="{dictionary.getLabel('advanced.tab.form.validation.no.learners.error')}" />
	<validate:LessonValidator id="scheduleValidator" source="{this}" property="dateTimePicker_fItm"  listener="{dateTimePicker_fItm}" errorMessage="{dictionary.getLabel('al.validation.schtime')}" />
	
	<!-- Model ______________________________________________________________________ -->
	
	<!-- GUI ______________________________________________________________________ -->
		
	<mx:Form id="advancedOptionsForm"  width="100%" height="100%">
		<mx:VBox width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
			<!-- Advanced details -->
			<mx:FormHeading label="{dictionary.getLabel('advanced.tab.form.details.label')}" />
			<mx:FormItem id="description_fItm" label="{dictionary.getLabel('summery.desc.lbl')}" width="80%" paddingRight="20">
				<mx:TextArea id="description_txi" text="{(lesson.selectedNode.isValidDesign()) ? lesson.selectedNode.description : ''}" width="100%" height="50" fontWeight="normal"/>
			</mx:FormItem>
			
			<!-- Advanced general options -->
			<mx:FormHeading label="{dictionary.getLabel('advanced.tab.form.advanced.options.label')}" paddingTop="5" />
			<mx:CheckBox id="startInMonitor" selected="false" label="{dictionary.getLabel('finish.btn')}" labelPlacement="right" change="changeStartMonitorSelection()" />
			
			<mx:CheckBox id="enabledLiveEdit" selected="true" label="{dictionary.getLabel('wizard.learner.enLiveEdit.cb.lbl')}" labelPlacement="right" />
			<mx:CheckBox id="enableLessonNotifications" selected="true" label="{dictionary.getLabel('advanced.tab.enable.lesson.notifications')}" labelPlacement="right" />
			<mx:CheckBox id="enabledExportPortfolio" selected="true" label="{dictionary.getLabel('wizard.learner.expp.cb.lbl')}" labelPlacement="right" />
			<mx:CheckBox id="enablePresence" selected="false" label="{dictionary.getLabel('wizard.learner.enpres.cb.lbl')}" labelPlacement="right" change="changePresenceSelection()" />
			<mx:CheckBox id="enableIm" selected="false" enabled="{enablePresence.selected}" label="{dictionary.getLabel('advanced.tab.form.enable.im.label')}" labelPlacement="right" />

			<mx:CheckBox id="enableSplitLessons" name="enableSplitLessons" selected="false" change="enableSplitLessonsOption()" label="{dictionary.getLabel('wizard.splitLearners.cb.lbl')}" labelPlacement="right" />
			<mx:FormItem id="enableSplitLessons_fItm" label="{dictionary.getLabel('wizard.splitLearners.LearnersPerLesson.lbl')}" visible="{enableSplitLessons.selected}" >
				<mx:NumericStepper id="noLearnersPerLesson_stp" value="1" change="updateLearnersPerLesson()"  minimum="1" />
			</mx:FormItem>
			
			<mx:VBox id="learnersNoteBox" width="100%" />
			
			<!-- Time limits -->
			<mx:FormHeading id="timeLimits_fH" label="{dictionary.getLabel('advanced.tab.form.time.limits.label')}"  paddingTop="5"/>
			<mx:CheckBox id="enableTimeLimits" name="enableTimeLimits" selected="false" label="{dictionary.getLabel('advanced.tab.form.enable.label')}" labelPlacement="right" />
			<mx:VBox width="100%">
				<mx:FormItem id="enableTimeLimits_fItm" label="{dictionary.getLabel('advanced.tab.form.enter.number.days.label')}" enabled="{enableTimeLimits.selected}" focusEnabled="true">
					<mx:NumericStepper id="noDaysToLessonFinish" value="30" minimum="1" maximum="999"/>
				</mx:FormItem>
				<mx:CheckBox id="enableIndividualTimeLimit" selected="false" enabled="{enableTimeLimits.selected}" label="{dictionary.getLabel('advanced.tab.form.individual.not.entire.group.label')}" labelPlacement="right" />
			</mx:VBox>
			
			<!-- Scheduling options -->
			<mx:FormHeading id="scheduling_fH" label="{dictionary.getLabel('advanced.tab.form.scheduling.label')}"  paddingTop="5"/>
			<mx:CheckBox id="enableScheduling" name="enableScheduling" selected="false" label="{dictionary.getLabel('advanced.tab.form.enable.label')}" labelPlacement="right" change="updateSelectedDate()" />
			<mx:VBox width="100%">
				<mx:FormItem id="dateTimePicker_fItm" focusEnabled="true">
					<timePicker:DateTimePicker id="scheduleDateTimePicker" enabled="{enableScheduling.selected}" selectedDate="{new Date()}" change="checkScheduleDateTime(event)" minuteIncrement="1" backgroundColor="#FFFFFF"/>        
					<mx:ComboBox id="scheduleDateTZ" editable="false" dataProvider="{tzList}" enabled="{enableScheduling.selected}" change="checkScheduleDateTime(event)" selectedIndex="{userTimeZone}" />
				</mx:FormItem>
			</mx:VBox>
			
			<!-- DateTimePicker -->
		</mx:VBox>
	</mx:Form>
	 
	 <!-- Schedule date formatter -->
    <mx:DateFormatter id="ScheduleDateDisplay" 
        formatString="{LAMS_FLASH_FORMAT}"/>
</mx:VBox>