<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	preinitialize="onPreinitialize(event)"
	creationComplete="onCreationComplete(event)"
	width="100%" height="100%" xmlns:itemRenderers="org.lamsfoundation.lams.itemRenderers.*">
	<mx:Script>
		<![CDATA[
			import org.lamsfoundation.lams.business.LearnerConstants;
			import org.lamsfoundation.lams.common.managers.LamsAjaxOverlayManager;
			import mx.controls.Alert;
			import org.lamsfoundation.lams.common.util.ArgumentsToRendererFactory;
			import org.lamsfoundation.lams.itemRenderers.ActivityItemRenderer;
			import mx.events.PropertyChangeEvent;
			import org.lamsfoundation.lams.vos.LearningDesign;
			import mx.events.FlexEvent;
			import org.lamsfoundation.lams.vos.Progress;
			import org.lamsfoundation.lams.common.dictionary.XMLDictionaryRegistry;
			import org.lamsfoundation.lams.vos.Lesson;
						
			private var _dictionary:XMLDictionaryRegistry;
			private var _lesson:Lesson;
			private var _learningDesign:LearningDesign;
			private var _learningDesignXML:XMLList;
			private var _progress:Progress;
			
			private function onPreinitialize(event:FlexEvent):void{

			}
			
			private function onCreationComplete(event:FlexEvent):void{
				LamsAjaxOverlayManager.showOverlay(this);
			}
		
			[Bindable (event="dictionaryChanged")]
			public function get dictionary():XMLDictionaryRegistry
			{
				return _dictionary;
			}
			
			[Bindable (event="lessonChanged")]
			public function get lesson():Lesson{
				return _lesson;
			}
			
			[Bindable (event="learningDesignChanged")]
			public function get learningDesign():LearningDesign{
				return _learningDesign;
			}
			
			[Bindable (event="learningDesignXMLChanged")]
			public function get learningDesignXML():XMLList{
				return _learningDesignXML;
			}
			
			[Bindable (event="progressChanged")]
			public function get progress():Progress{
				return _progress;
			}
			
			public function set dictionary(myDictionary:XMLDictionaryRegistry):void {
				if(myDictionary){
					_dictionary = myDictionary
					dispatchEvent(new Event("dictionaryChanged"));
				}
			}
			
			public function set lesson(myLesson:Lesson):void {
				if(myLesson){
					_lesson = myLesson;
					dispatchEvent(new Event("lessonChanged"));
				}
			}
	
			public function set learningDesign(myLearningDesign:LearningDesign):void {
				if(myLearningDesign){
					_learningDesign = myLearningDesign;
					dispatchEvent(new Event("learningDesignChanged"));
				}
			}
			
			public function set learningDesignXML(myLearningDesignXML:XMLList):void {
				if(myLearningDesignXML){
					_learningDesignXML = myLearningDesignXML;
					dispatchEvent(new Event("learningDesignXMLChanged"));
					
					LamsAjaxOverlayManager.hideOverlay(this);
				}
			}
					
			public function set progress(myProgress:Progress):void {
				if(myProgress){
					_progress = myProgress;
					dispatchEvent(new Event("progressChanged"));
					
					updateProgressInXML(_learningDesignXML.Activity);
				}
			}
			
			private function updateProgressInXML(activityList:XMLList = null):void{
				var i:int;
				var currentActivityID:String = String(_progress.currentActivityId);
				var activityListChildren:XMLList;
				var activityNode:XMLList;
				
				if(!activityList){
					_learningDesignXML.Activity;
				}
				
				for(i = 0; i < activityList.length(); i++){
					activityListChildren = activityList[i].Activity;
					
					if(activityListChildren.length() != 0){
						updateProgressInXML(activityListChildren);	
					}
				}

				for(i = 0; i < _progress.completedActivities.length; i++){
					var completedActivityID:String = String(_progress.completedActivities[i]);
					activityNode = activityList.(@activityID == completedActivityID);
					if(activityNode.length() != 0){
						activityNode.@activityProgress = LearnerConstants.COMPLETED_PROGRESS;
					}
				}
								
				for(i = 0; i < _progress.attemptedActivities.length; i++){
					var attemptedActivityID:String = String(_progress.attemptedActivities[i]);
					activityNode = activityList.Activity.(@activityID == attemptedActivityID);
					if(activityNode.length() != 0){
						activityNode.@activityProgress = LearnerConstants.ATTEMPTED_PROGRESS;
					}
				}
				
				activityNode = activityList.Activity.(@activityID == currentActivityID);
				if(activityNode.length() != 0){
					activityNode.@activityProgress = LearnerConstants.ATTEMPTING_PROGRESS;
				}

			}
		]]>
	</mx:Script>
	
	<itemRenderers:ActivityListItemRenderer id="mainActivityList" dataProvider="{this.learningDesignXML.Activity}" />
</mx:Canvas>
