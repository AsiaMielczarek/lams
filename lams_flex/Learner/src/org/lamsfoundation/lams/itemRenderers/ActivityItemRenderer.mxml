<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="onCreationComplete(event)"
	horizontalAlign="center" verticalGap="1" horizontalScrollPolicy="off" paddingBottom="1" paddingLeft="0" paddingRight="0" paddingTop="1" xmlns:itemRenderers="org.lamsfoundation.lams.itemRenderers.*">

	<mx:Script>
		<![CDATA[
			import org.lamsfoundation.lams.vos.Activity;
			import org.lamsfoundation.lams.events.LearnerActivityMouseEvent;
			import org.lamsfoundation.lams.business.LearnerConstants;
			import mx.events.ListEvent;
			import org.lamsfoundation.lams.events.LearnerEvent;
			import org.lamsfoundation.lams.events.LearnerActivityEvent;
			import mx.controls.treeClasses.TreeItemRenderer;
			import com.asfusion.mate.actions.AbstractAction;
			import mx.events.TreeEvent;
			import mx.collections.HierarchicalData;
			import mx.events.FlexEvent;
						
			[Bindable] private var isComplexActivity:Boolean;
			[Bindable] private var isBranchingActivity:Boolean;
			
			private function onCreationComplete(event:FlexEvent):void{
				if(data){
					// add the listeners
					addListeners();
					
					// set initial state to simple activity
					activityViewStack.selectedChild = simpleActivityState;
					
					// check if complex activity
					isComplexActivity = (data.Activity.length() > 0);
					
					// check if branching activity
					isBranchingActivity = (data.Activity.activityTypeID == LearnerConstants.BRANCHING_ACTIVITY_TYPE_ID);
					
					// instantiate the item renderer for the first time
					onDataChanged(event);
				}
			}
			
			private function addListeners():void{
				// add listeners
				addEventListener(FlexEvent.DATA_CHANGE, onDataChanged);
				simpleActivityState.addEventListener(LearnerActivityMouseEvent.SIMPLE_ACTIVITY_CLICK, onSimpleActivityClick);
				complexActivityState.addEventListener(LearnerActivityMouseEvent.COMPLEX_ACTIVITY_CLICK, onComplexActivityClick);
				complexActivityState.addEventListener(LearnerActivityMouseEvent.COMPLEX_ACTIVITY_DOUBLE_CLICK, onComplexActivityDoubleClick);
				complexActivityState.addEventListener(LearnerActivityMouseEvent.COMPLEX_ACTIVITY_ITEM_CLICK, onComplexActivityItemClick);
				complexActivityState.addEventListener(LearnerActivityMouseEvent.COMPLEX_ACTIVITY_ITEM_DOUBLE_CLICK, onComplexActivityItemDoubleClick);
			}
			
			private function setDefaultState():void{
				var childActivities:XMLList = data.Activity;
				if(childActivities.length() == 0){
					activityViewStack.selectedChild = simpleActivityState;
				}else{
					activityViewStack.selectedChild = complexActivityState;
				}
			}
			
			private function switchState(event:MouseEvent):void{
				if(activityViewStack.selectedChild == simpleActivityState){
					if(isComplexActivity){
						activityViewStack.selectedChild = complexActivityState;
					}
				}
				else if(activityViewStack.selectedChild == complexActivityState){
					if(!(event.target.parent is TreeItemRenderer)){
						activityViewStack.selectedChild = simpleActivityState;
					}
				}
			}
						
			private function onDataChanged(event:FlexEvent):void{
				
			}
			
			private function onSimpleActivityClick(event:LearnerActivityMouseEvent):void{
				switchState(event.mouseEvent);
			}
						
			private function onSimpleActivityDoubleClick(event:LearnerActivityMouseEvent):void{	
				var learnerActivityEvent:LearnerActivityEvent = new LearnerActivityEvent(LearnerActivityEvent.LAUNCH_ACTIVITY);
				learnerActivityEvent.activity = new Activity();
				learnerActivityEvent.activity.setFromXML(event.mouseEvent.currentTarget.data);
				dispatchEvent(new LearnerActivityEvent(LearnerActivityEvent.LAUNCH_ACTIVITY));
			}
			
			private function onComplexActivityClick(event:LearnerActivityMouseEvent):void{
				switchState(event.mouseEvent);
			}
						
			private function onComplexActivityDoubleClick(event:LearnerActivityMouseEvent):void{				
				dispatchEvent(new LearnerActivityEvent(LearnerActivityEvent.LAUNCH_ACTIVITY));
			}
			
			private function onComplexActivityItemClick(event:LearnerActivityMouseEvent):void{

			}
			
			private function onComplexActivityItemDoubleClick(event:LearnerActivityMouseEvent):void{				
				dispatchEvent(new LearnerActivityEvent(LearnerActivityEvent.LAUNCH_ACTIVITY));
			}
		]]>
	</mx:Script>

	<!--<mx:Resize duration="350" id="activityResizeEffect"/>-->
	
	<mx:VRule x="50" width="1" height="25" strokeColor="#000000"/>
	<mx:ViewStack id="activityViewStack" resizeToContent="true">
		<itemRenderers:SimpleActivityState id="simpleActivityState" data="{data} "/>
		<itemRenderers:ComplexActivityState id="complexActivityState" data="{data}" />
		<itemRenderers:BranchingActivityState id="branchingActivityState" data="{data}" />
	</mx:ViewStack>
</mx:VBox>