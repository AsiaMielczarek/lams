<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	horizontalAlign="center" verticalGap="1" doubleClickEnabled="true"
	click="onSimpleActivityClick(event)" doubleClick="onSimpleActivityDoubleClick(event)"
	creationComplete="onCreationComplete(event)" xmlns:itemRenderers="org.lamsfoundation.lams.itemRenderers.*">
	
	<mx:Script>
		<![CDATA[
			import mx.core.Container;
			import org.lamsfoundation.lams.events.LearnerActivityMouseEvent;
			import org.lamsfoundation.lams.business.LearnerConstants;
			import mx.events.FlexEvent;
			
			private var doubleClickTimer:Timer;
			private var lastClickEvent:MouseEvent;
			
			private function onCreationComplete(event:FlexEvent):void{
				addListeners();
			}
			
			private function addListeners():void{
				addEventListener(FlexEvent.DATA_CHANGE, onDataChange);	
			}
			
			private function onDataChange(event:FlexEvent):void{
				setProgressImage();	
			}	
			
			private function setProgressImage(state:Container = null):void{
				if(activityIconCanvas.progressImage){
					if(state){
						activityIconCanvas.progressImage.selectedChild = state;
					}
					else{
						if(data){
							if(data.@activityProgress == LearnerConstants.UNATTEMPTED_PROGRESS){
								activityIconCanvas.progressImage.selectedChild = activityIconCanvas.unattemptedState;
							}else if(data.@activityProgress == LearnerConstants.ATTEMPTING_PROGRESS){
								activityIconCanvas.progressImage.selectedChild = activityIconCanvas.attemptedState;
							}else if(data.@activityProgress == LearnerConstants.ATTEMPTED_PROGRESS){
								activityIconCanvas.progressImage.selectedChild = activityIconCanvas.attemptedState;
							}else if(data.@activityProgress == LearnerConstants.COMPLETED_PROGRESS){
								activityIconCanvas.progressImage.selectedChild = activityIconCanvas.completedState;
							}
						}
	
					}
				}
			}
			
			private function onSimpleActivityClick(event:Event):void{
				if(event is MouseEvent){
					registerClick(MouseEvent(event));
				}
				else if(event is TimerEvent){
					doubleClickTimer.stop();
					doubleClickTimer = null;
					
					var dispatchedEvent:LearnerActivityMouseEvent = new LearnerActivityMouseEvent(LearnerActivityMouseEvent.SIMPLE_ACTIVITY_CLICK);
					dispatchedEvent.mouseEvent = lastClickEvent;
					dispatchEvent(dispatchedEvent);
				}
			}
					
			private function onSimpleActivityDoubleClick(event:MouseEvent):void{
				if(doubleClickTimer){
					doubleClickTimer.stop();
					doubleClickTimer = null;
				}
				
				var dispatchedEvent:LearnerActivityMouseEvent = new LearnerActivityMouseEvent(LearnerActivityMouseEvent.SIMPLE_ACTIVITY_DOUBLE_CLICK);
				dispatchedEvent.mouseEvent = event;
				dispatchEvent(dispatchedEvent);
			}
			
			private function registerClick(event:MouseEvent):void{
				lastClickEvent = event;
				
				if(doubleClickTimer){
					doubleClickTimer.stop();
				}
				
				doubleClickTimer = new Timer(LearnerConstants.DOUBLE_CLICK_DELAY, 1);
				doubleClickTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onSimpleActivityClick)
				doubleClickTimer.start();
			}
		]]>
	</mx:Script>
	<itemRenderers:ActivityIconCanvas id="activityIconCanvas" />
	<mx:Label text="{data.@activityTitle}"/>
</mx:VBox>
