<?xml version="1.0"?>


<project name="lams_tool_lasbmt11" basedir="." default="usage">

	<!-- import properties from the specified file -->
	<property file="build.properties"/>
	<property file="../lams_build/common.properties"/>
	<property file="../lams_build/${osPropertiesName}.properties" />
	<path id="all-libs">
			<fileset dir="${sharedlib}">
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="${j2eelibs}">
					<include name="**/*.jar"/>
			</fileset>
	</path>
		
	<path id="project.classpath">
		<path refid="all-libs"/>
		<!-- Java CLASSPATH should be added as the last item -->
		<!-- This property is supposed to be set in eclipse  -->
		<pathelement location="${java.class.path}"/>
	</path>
	<path id="schemaexport.classpath">
		<path refid="project.classpath"/>
		<pathelement location="${build.classes.java}"/>
	</path>
	<target name="usage">
			<echo message=""/>
			<echo message="${project} build file"/>
			<echo message="------------------------------------------------------"/>
			<echo message=""/>
			<echo message="Among the available targets are:"/>
			<echo message=""/>
	</target>
	
	<target name="init">
			<available property="xdoclet-jars-installed" file="${sharedlib}/xdoclet/xdoclet-${xdoclet.version}.jar"/>
	</target>
	<!-- =================================================================== -->
	<!-- Fails if XDoclet 1.2.x is not on classpath                          -->
	<!-- =================================================================== -->
	<target name="fail-if-no-xdoclet-1.2.x" unless="xdoclet-jars-installed">
		<fail>
	      You must download several jar files before you can build Middlegen.
	      Execute the "download-deps" target. Then try to build again.

	      If you are behind a proxy, you should define the properties
	      http.proxyHost and http.proxyPort. Example:
		      
	      ant -Dhttp.proxyHost=foo.com -Dhttp.proxyPort=8080
		      
	      It's also possible to download the jars manually.
	     </fail>
		</target>

		<target name="check-driver-present">
			<available file="${db.driver.dir}" type="dir" property="driver.present"/>
		</target>
		<target name="panic-if-driver-not-present" unless="driver.present">
			<fail>
		      The JDBC driver you have specified by including one of the files in ${basedir}/config/database
		      doesn't exist. You have to download this driver separately and put it in ${database.driver.file}
		      Please make sure you're using a version that is equal or superior to the one we looked for.
		      If you name the driver jar file differently, please update the database.driver.file property
		      in the ${basedir}/config/database/xxx.xml file accordingly.
		     </fail>
	   </target>
	<!-- =================================================================== -->
	<!-- Run Middlegen For LearningDesign                                                       -->
	<!-- =================================================================== -->
		<target name="middlegen" description="Run Middlegen For Submit Files Tool" unless="middlegen.skip" depends="init,fail-if-no-xdoclet-1.2.x,check-driver-present,panic-if-driver-not-present">
			<taskdef name="middlegen" classname="middlegen.MiddlegenTask" classpathref="all-libs" />
			
			<middlegen appname="lams_tool_sbmt" 
					   prefsdir="${conf.middlegen.dir}"
					   gui="${middlegen.gui}"
					   databaseurl="${db.url.build}"
					   driver="${db.driver}"
					   username="${db.username}"
					   password="${db.password}"
					   includeViews="false"
			>

				<hibernate destination="${conf.hibernate.mapping.dir}"
						   package="${sbmt.package}" 
						   genXDocletTags="true"
						   javaTypeMapper="middlegen.plugins.hibernate.HibernateJavaTypeMapper"
				/>
				
				<table name="tl_lasbmt11_content"/>
				<table name="tl_lasbmt11_report"/>
				<table name="tl_lasbmt11_session"/>
				<table name="tl_lasbmt11_submission_details"/>
			</middlegen>

		</target>
		<!-- ************************************************************** -->
		<!-- Hibernate and xDoclet targets -->
		<!-- ************************************************************** -->
	
		<target name="generate-hbm" 
				description="Generates Hibernate class descriptor files."
			depends="init,fail-if-no-xdoclet-1.2.x,check-driver-present,panic-if-driver-not-present">
			    <!-- Define the hibernatedoclet task -->
			    <taskdef name="hibernatedoclet"
			        classname="xdoclet.modules.hibernate.HibernateDocletTask"
		            classpathref="project.classpath">
			    </taskdef>    
	
			    <!-- Execute the hibernatedoclet task -->
			    <hibernatedoclet
			        destdir="${conf.hibernate.mapping.dir}"
			        excludedtags="@version,@author,@todo"
			        force="true"
			        verbose="true">
			        <fileset dir="${src.java.dir}">
			            <include name="**/*/*.java"/>
			        </fileset>
			        <!-- hibernate 1 and hibernate 2 mapping files are not fully compatible-->
			        <hibernate version="3.0"/>
			    </hibernatedoclet>
				<!-- copy hbm.xml to src folder. This makes hbm.xml can be synchronized with classes folder in eclipse -->
				<copy overwrite="yes" todir="${src.java.dir}">
					<fileset dir="${conf.hibernate.mapping.dir}">
						<include name="**/*.hbm.xml"/>
					</fileset>
				</copy>
			</target>
	
			
			<!-- exports all the hbm mappings to the specified database -->
			<target name="schemaexport" description="Exports all hbm.xml files in {conf.hibernate.mapping.dir}/hbm"
				depends="compile,generate-hbm">
			    <echo message="Run the schema export for all hbm.xml files in ${conf.hibernate.mapping.dir}/hbm"/>
				<taskdef
					name="schemaexport"
					classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"
					classpathref="schemaexport.classpath"
					>
				</taskdef>
				<schemaexport
					config="${conf.hibernate.mapping.dir}/hibernate.cfg.xml"
					quiet="no"
					text="no"
					drop="no"
					delimiter=";"
					output="${db.scripts}/table-schema.sql">
					<fileset dir="${conf.hibernate.mapping.dir}">
						<include name="**/*.hbm.xml"/>
					</fileset>
				</schemaexport>	
			</target>	
		<!-- ================================================================ -->
		<!-- Preparations									                  -->
		<!-- ================================================================ -->
		
		<target name="clean" description="removes all class files">
			<delete dir="${build}"/>
			<mkdir dir="${build}"/>
			<mkdir dir="${build.classes.java}"/>
			<mkdir dir="${build.classes.test}"/>
			<mkdir dir="${build.deploy}"/>
			<mkdir dir="${build.report}"/>
			<mkdir dir="${build.lib}"/>
		</target>

		<target name="compile" depends="clean" description="compile java sources">
			<javac srcdir="${src.java.dir}" compiler="modern" source="1.5"
		         	 	destdir="${build.classes.java}" deprecation="on" debug="on">
				<classpath>					
					<path refid="project.classpath"/>
				</classpath>
				</javac>
				
		</target>

		<target name="compile.test" depends="compile">
			<javac srcdir="${src.test.dir}" destdir="${build.classes.test}" source="1.5" compiler="modern">
				<classpath>
					<pathelement location="${build.classes.java}"/>
					<path refid="project.classpath"/>
				</classpath>
			</javac>
		</target>
		
		<target name="copyContext" description="copies the applicationContext.xml files to the web directory">
			<copy overwrite="yes" todir="${build.web}">
				<fileset dir="${conf.web.dir}">
					<include name="**/*.xml"/>
					<include name="**/*.tld"/>
				</fileset>
			</copy>
			<copy overwrite="yes" todir="${build.classes.java}/org/lamsfoundation/lams/">
							<fileset dir="${src.java.dir}/org/lamsfoundation/lams/">
									<include name="**/*.xml"/>
									<include name="**/*.properties"/>
									<!-- Autopatch -->
									<include name="**/*.sql"/>
							</fileset>
			</copy>		
		</target>
	
		<!-- ================================================================ -->
		<!-- Make jar archive for deployment        		    	          -->
		<!-- ================================================================ -->
		<target name="build-jar" depends="compile,compile.test,copyContext" description="creates jar file">
			<delete file="${build.lib}/${product}.jar"/>
			<jar jarfile="${build.lib}/${product}.jar" manifest="${conf.dir}/jar/META-INF/MANIFEST.MF">
				<fileset dir="${build.classes.java}"/>
				<fileset dir="${build.classes.test}"/>
				<fileset dir="${conf.hibernate.mapping.dir}"/>
				<fileset dir="${build.web}"/>
			</jar>
		</target>
	
	   <!-- =================================================================== -->
	   <!-- Run xdoclet			                                                -->
	   <!-- =================================================================== -->
	   	<taskdef name="webdoclet" classname="xdoclet.modules.web.WebDocletTask">
		    <classpath refid="all-libs"/>
		</taskdef>
		
		<target name="webdoclet">
			<webdoclet destdir="${generated.java}" force="${xdoclet.force}">

	         <fileset dir="${src.java.dir}">
	            <include name="**/*Action.java" />
	            <include name="**/*Form.java" />
	         </fileset>

	         <deploymentdescriptor servletspec="2.4" distributable="false" destdir="${conf.webinf.dir}"
				mergedir="${conf.xdoclet.dir}" sessiontimeout="${sessiontimeout}"/>
				
	         <strutsconfigxml destdir="${conf.struts.dir}" mergedir="${conf.xdoclet.dir}" version="1.2" />
			<strutsdynaformvalidationxml destdir="${conf.struts.dir}" mergedir="${conf.xdoclet.dir}" version="1.1.3"  />				
	
	      </webdoclet>
	   </target>
	
	   <!-- ================================================ -->
	   <!-- Make the WAR archive for deployment				 -->
	   <!-- ================================================ -->	
		
	   <target name="build-war" depends="webdoclet,build-jar,jsp-plaincopy,jsp-precompile" description="creates war file">
	   		<delete file="${build.lib}/${product}.war"/>	
			<war warfile="${build.lib}/${product}.war" 
	  				webxml="${build.war}/WEB-INF/web.xml" manifest="${conf.dir}/war/META-INF/MANIFEST.MF">
				<fileset dir="${build.war.assembly}">
					<include name="**" />
				</fileset>
			</war>
	   </target>
	
	   <target name="copy-tags" depends="" description="copy the lams.tld and the lams tags">
	   		<copy todir="${conf.webinf.dir}" overwrite="yes" file="${tag.web.dir}/lams.tld" />	
			<copy todir="${conf.webinf.dir}/tags" overwrite="yes">
				<fileset dir="${tag.web.dir}/tags">
					<include name="*.tag" />
				</fileset>
			</copy>
	   </target>

		<!-- =================================================================== -->
		<!-- Deploy the jar and war                               -->
		<!-- =================================================================== -->
		<target name="deploy-war" depends="build-war" description="Deploy the SubmitFiles tool war file and jar file">
			<delete quiet="true">
				<fileset dir="${jboss.server.instance}/tmp"/>
				<fileset dir="${jboss.server.instance}/work"/>
			</delete>
			<copy file="${build.lib}/${product}.jar"
					todir="${jboss.deploy}"/> 
			<copy file="${build.lib}/${product}.war"
					todir="${jboss.deploy}"/> 
		</target>
	
		<!-- =================================================================== -->
		<!-- Clean and rebuild the database. 									 -->
		<!-- =================================================================== -->
		<target name="rebuild-db"
			description="rebuild Submit Files tables">
			<sql driver="${db.driver}" url="${db.url.build}" userid="${db.username}"
					password="${db.password}"  encoding="${db.encoding}">
				<classpath>
					<fileset dir="${db.driver.dir}" includes="*.jar"/> 
				</classpath>
				<transaction src="${db.scripts}/drop_lams_tool_sbmt.sql"/>
				<transaction src="${db.scripts}/create_lams_tool_sbmt.sql"/>
			</sql>
		</target>

	<!-- =================================================================== -->
	<!-- Insert the test data in the database.                               -->
	<!-- =================================================================== -->
	<target name="insert-test-data" depends="rebuild-db"
		description="Insert some dummy test data. Removes any data that was in the tables first.">
		<sql driver="${db.driver}" url="${db.url.build}" userid="${db.username}"
				password="${db.password}"  encoding="${db.encoding}">
			<classpath>
				<fileset dir="${db.driver.dir}" includes="*.jar"/> 
			</classpath>
			<transaction src="${db.scripts}/insert_test_data.sql"/>
		</sql>
	</target>

	<!-- =================================================================== -->
	<!-- Generate the deploy package                                         -->
	<!-- =================================================================== -->
	<target name="create-deploy-package" depends="build-war" 
		description="Generate the deployment package.">

		<path id="deploy.lib.classpath">
			<fileset dir="${deploy.tool.dir}">
				<include name="lib/*.jar" />
			</fileset>
			<fileset dir="${sharedlib}">
				<include name="**/*.jar" />
			</fileset>
		</path>
			  
		<mkdir dir="${build.deploy}"/>
		
		<mkdir dir="${build.deploy}/sql"/> 
		<mkdir dir="${build.deploy}/language"/>
		 
		<copy overwrite="yes" todir="${build.deploy}/sql">
			<fileset dir="${db.scripts}/">
				<include name="drop_lams_tool_sbmt.sql"/>
				<include name="create_lams_tool_sbmt.sql"/>
				<include name="activity_insert.sql"/>
				<include name="library_insert.sql"/>
			</fileset>
		</copy>
		
		<copy overwrite="yes" todir="${build.deploy}/sql">
			<fileset dir="${db.scripts}/">
				<include name="tool_insert.sql" />
			</fileset>	
			<filterset>
				<filter token="tool_version" value="${tool.version}" />
			</filterset>
		</copy>
		
		<copy overwrite="yes" todir="${build.deploy}/sql">
			<fileset dir="${db.scripts}/">
				<include name="db_version_insert.sql" />
			</fileset>	
			<filterset>
				<filter token="tool_version" value="${tool.version}" />
				<filter token="signature" value="${signature}" />
			</filterset>
		</copy>
		
		<copy overwrite="yes" todir="${build.deploy}/sql/updatescripts" failonerror="false">
			<fileset dir="${db.scripts}/updatescripts/">
				<include name="*.sql" />
			</fileset>
		</copy>

		<copy overwrite="yes" todir="${build.deploy}/">
			<fileset dir="${deploy.tool.dir}">
				<include name="*.*"/>
			</fileset>
		</copy>

		<copy overwrite="yes" todir="${build.deploy}/language">
			<fileset dir="${conf.language.dir}">
				<include name="*.properties"/>
			</fileset>
		</copy>
		
		<copy overwrite="true" todir="${build.deploy}">
				<fileset dir="${build.lib}">
					<include name="*.jar"/>
					<include name="*.war"/>
				</fileset>
		</copy>

		<taskdef name="generateDeployProperties" 
			classname="org.lamsfoundation.lams.tool.deploy.CreateToolPackageTask">
		    <classpath refid="deploy.lib.classpath"/>
		</taskdef>

		<generateDeployProperties depends="compile" 
			mode="development" 
			outputPath="${build.deploy}"
			generateForInstallers="${generate.for.installers}"
			dbPassword="${db.password}"
			dbUsername="${db.username}"
			dbDriverUrl="${db.url.build}"
			dbDriverClass="${db.driver}"
			deployFiles="${build.deploy}/${product}.war,${build.deploy}/${product}.jar"
			toolJarFileName="${product}.jar"
			toolSignature="${signature}"
			toolVersion="${tool.version}"
			hideTool="${hideTool}"
			minServerVersionNumber="${min.server.version.number}"
			toolUpdateScriptPath="${build.deploy}/sql/updatescripts/updateTo${tool.version}.sql"
			toolTablesScriptPath="${build.deploy}/sql/create_lams_tool_sbmt.sql" 
			toolTablesDeleteScriptPath="${build.deploy}/sql/drop_lams_tool_sbmt.sql" 
			toolActivityInsertScriptPath="${build.deploy}/sql/activity_insert.sql" 
			toolLibraryInsertScriptPath="${build.deploy}/sql/library_insert.sql" 
			toolInsertScriptPath="${build.deploy}/sql/tool_insert.sql" 
			toolDBVersionScriptPath="${build.deploy}/sql/db_version_insert.sql"
			toolApplicationContextPath="/org/lamsfoundation/lams/tool/sbmt/submitFilesApplicationContext.xml"
			lamsEarPath="${jboss.deploy}"
			toolContext="${toolContext}"
			toolWebUri="${product}.war"
			languageFilesPackage="org.lamsfoundation.lams.tool.sbmt">

			<!-- language files go as a fileset. Not nice but can't work out how to embed them in a tag. -->
			<fileset dir="${build.deploy}/language">
				<include name="**/*.properties"/>
				<include name="**/*.txt"/>
			</fileset>
				
		</generateDeployProperties>
		
	</target>

	<target name="run-deploy-package" description="Run the deploy tool.">
		<path id="deploy.classpath">
			<fileset dir="${deploy.tool.dir}/lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${sharedlib}">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<echo>Deploying the Submission tool</echo>

		<java
			classname="org.lamsfoundation.lams.tool.deploy.Deploy"
			classpathref="deploy.classpath"
			fork="true">
				<arg file="${build.deploy}/deploy.xml"/>
				<arg value="True"/> 
		</java>
					
	</target>
	
	<target name="deploy-tool" depends="create-deploy-package, run-deploy-package" 
	   description="Build the war, jar and run the deploy tool. Deletes most old tool references from db, creates db tables, application.xml in ear, copies war and jar file to ear. deploy-tool is only designed to be run in a development environment, or on an empty db. Do not run on a production environment.">
	</target>
	
	<target name="deploy-jar" depends="build-jar" 
		   description="Deploys just the jar to the lams.ear directory">
		
		<delete >
			<fileset dir="${jboss.server.instance}/tmp"/>
			<fileset dir="${jboss.server.instance}/work"/>
		</delete>
		<copy file="${build.lib}/${product}.jar" todir="${jboss.deploy}"/> 
		
		<copy overwrite="yes" todir="${jboss.deploy}/lams-dictionary.jar/org/lamsfoundation/lams/tool/wiki">
		   <fileset dir="${conf.language.dir}">
		   	<include name="**/*.properties"/>
		    <include name="**/*.txt"/>
		   </fileset>
		</copy>
	</target>
	
	<target name="delete-exploded-tool-folder" description="delete old tool exploded tool folder">
		<!-- delete old war folder tree -->
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${jboss.deploy}/${product}.war">
			    <include name="**"/>
			</fileset>
		</delete>
		<!-- if use explode tool target when jboss is running, explode may be failed and left the the temp folder. Here try to delete the temp folder -->
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${jboss.deploy}/temp-${product}.war">
			    <include name="**"/>
			</fileset>
		</delete>
	</target>
	
	<target name="explode-tool" depends="delete-exploded-tool-folder, deploy-tool" description="explode tool jar and war package to a war folder">
		<!-- rename war file to avoid name conflict -->
		<move tofile="${jboss.deploy}/temp-${product}.war" file="${jboss.deploy}/${product}.war"/>
		<!-- explode the ear -->
		<!-- Don't explode jar file, becuase classes in jar will conflict with those same classes files in war -->
		<!--<unjar src="${jboss.deploy}/${product}.jar" dest="${jboss.deploy}/${product}.war" />-->
		<unjar src="${jboss.deploy}/temp-${product}.war" dest="${jboss.deploy}/${product}.war" />
		<!-- delete war and jar files -->
		<delete>
			<fileset dir="${jboss.deploy}">
			    <include name="temp-${product}.war"/>
			    <!--<include name="${product}.jar"/>-->
			</fileset>
		</delete>
	</target>
	
    <!-- ================================= 
          target: synchronize-jsp              
         ================================= -->
    <target name="synchronize-deploy" description="copy non-java file into deploy folder">
        <copy verbose="yes" todir="${jboss.deploy}/${product}.war">
        	<fileset dir="${conf.web.dir}">
        		<include name="**/*.*"/>
        	</fileset>
        </copy>
    </target>

	<!-- =================================================================== -->
	<!-- Run JUnit Tests                                                     -->
	<!-- =================================================================== -->
	<target name="test-report" depends="compile,compile.test,copyContext,insert-test-data">

		<mkdir dir="${build.report}"/>
		<mkdir dir="${build.report}/html"/> 
		
		<junit printsummary="yes" errorProperty="test.failed" failureProperty="test.failed"
			   fork="yes">
			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>
			<batchtest todir="${build.report}">
				<fileset dir="${src.test.dir}">
					<include name="**/Test*.java"/>
					<exclude name="**/Test*Action.java"/>
				</fileset>
			</batchtest>
			<classpath>
				<pathelement location="${build.classes.java}"/>
				<pathelement location="${build.classes.test}"/>
				<pathelement location="${conf.hibernate.mapping.dir}"/>
				<pathelement location="${conf.web.dir}"/>
				<path refid="project.classpath"/>
			</classpath>
		</junit>

		<junitreport todir="${build.report}"> 
			<fileset dir="${build.report}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report todir="${build.report}/html"/> 
		</junitreport>
		
		<fail message="Tests failed. Check log and/or reports" if="test.failed"/>
	</target>
	
   <!-- =================================  -->
   <!--       target: convert UTF-8 language files to Java properties files using native2ascii -->
   <!-- ================================= -->
    <target name="native2ascii" 
    	description="convert UTF-8 language files to Java properties files using native2ascii">
		<native2ascii encoding="UTF-8" src="${conf.language.dir}" dest="${conf.language.dir}"
		   includes="*.txt" ext=".properties"/>
    </target>
	
	<!-- Runs if jsp.precompile setting is set in lams_build/common.properties -->
	<target name="jsp-precompile" if="jsp.precompile">
		<!-- Work on a copy of web files, not originals-->
		<echo>Copying web files</echo>
		<delete dir="${build.war}" quiet="false"/>
	 	<copy overwrite="yes" todir="${build.war}">
			<fileset dir="${conf.web.dir}">
				<include name="**"/>
				<exclude name="WEB-INF/classes"/>
			</fileset>
	 	</copy>
		
		<!-- Define JSP compiler -->
		<path id="jsp.precompile.classpath">
			<path refid="schemaexport.classpath"/>
			<fileset dir="${jboss.home}/lib">
				<include name="jboss-common-core.jar" />
				<include name="jboss-logging-spi.jar" />
			</fileset>
			<fileset dir="${jboss.ear.deployers}/jbossweb.deployer">
				<include name="*.jar" />
			</fileset>
	        <fileset dir="${jboss.ear.deploy}/jbossweb.sar">
	            <include name="jbossweb.jar" />
	        </fileset>
		</path>
		<taskdef classname="org.apache.jasper.JspC" name="jasper2" classpathref="jsp.precompile.classpath" />
		
		<!-- Generate Java files and put servlet mappings in web.xml file -->
		<echo>Generating Java source from JSP pages</echo>
		<jasper2 uriroot="${build.war}"
			webXmlFragment="${build.war}/WEB-INF/generated_web.xml"
			outputDir="${build.war}/WEB-INF/src"
			package="${jsp.java.src.package}"
			addWebXmlMappings="true" validateXml="false" failOnError="true"
		/>
		
		<!-- Compile main Java source as some JSPs refer to it
		Uncomment if you get "class not found" errors when precompiling JSPs
		<antcall target="compile-java"/>
		-->
		
		<!-- Compile Java files generated from JSPs -->
		<echo>Compiling JSP classes</echo>
		
		<!-- Make src folder if it does not exist i.e. no JSPs were compiled in previous step -->
		<mkdir dir="${build.war}/WEB-INF/src"/>
		<mkdir dir="${build.war}/WEB-INF/classes"/>
	    <javac destdir="${build.war}/WEB-INF/classes"
	           optimize="on"
	           debug="off" failonerror="true"
	           srcdir="${build.war}/WEB-INF/src" 
		  	   excludes="**/*.smap"
	    	   classpathref="jsp.precompile.classpath">
	      <include name="**" />
	      <exclude name="tags/**" />
	    </javac>
		
		<!-- Prepare files for WAR, exclude plain JSP and tags -->
		<echo>Copying web resources</echo>
		<copy todir="${build.war.assembly}">	
			<fileset dir="${build.war}">
				<include name="images/**"/>
				<include name="includes/**"/>
				<include name="WEB-INF/classes/**"/>
				<include name="WEB-INF/struts/**"/>
				<include name="WEB-INF/*.xml"/>
				<exclude name="WEB-INF/web.xml"/>
				<exclude name="**/*.jsp"/>
				<exclude name="**/*.tag"/>
				<exclude name="**/*.tld"/>
				<exclude name="**/.cvsignore"/>
			</fileset>
		</copy>
		
	 	<copy todir="${build.war.assembly}/WEB-INF/lib" flatten="true" failonerror="false">
			<fileset dir="${basedir}/lib">
				<include name="**/*"/>
			</fileset>
	 	</copy>
	</target>
					
	<!-- Runs if jsp.precompile setting is NOT set in lams_build/common.properties 
		 JSPs will be compiled at runtime, which is default behaviour allowing hotdeploy -->
	<target name="jsp-plaincopy" unless="jsp.precompile">
		<delete dir="${build.war}" quiet="false"/>
		
		<echo>Copying web resources</echo>
	 	<copy todir="${build.war}">
			<fileset dir="${conf.web.dir}">
				<include name="WEB-INF/web.xml"/>
			</fileset>
	 	</copy>
		
	 	<copy todir="${build.war.assembly}">
			<fileset dir="${conf.web.dir}">
				<include name="**"/>
				<exclude name="WEB-INF/web.xml"/>
				<exclude name="WEB-INF/classes"/>
				<exclude name="**/.cvsignore"/>
			</fileset>
	 	</copy>
		
	 	<copy todir="${build.war.assembly}/WEB-INF/lib" flatten="true" failonerror="false">
			<fileset dir="${basedir}/lib">
				<include name="**/*"/>
			</fileset>
	 	</copy>
	</target>

</project>