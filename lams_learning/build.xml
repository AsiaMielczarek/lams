<?xml version="1.0"?>


<project name="lams_learning" default="usage" basedir=".">

	<!-- import properties from the specified file -->
	<property file="build.properties"/>
	<property file="../lams_build/common.properties"/>
	<property file="../lams_build/${osPropertiesName}.properties" />

	<path id="all-libs">
		<fileset dir="${sharedlib}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${j2eelibs}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="project.classpath">
		<path refid="all-libs" />
		<!-- Java CLASSPATH should be added as the last item -->
		<!-- This property is supposed to be set in eclipse  -->
		<pathelement location="${java.class.path}" />
	</path>

	<path id="surveytool.classpath">
		<fileset dir="../lams_tool_survey/build/lib/">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="usage">
		<echo message="" />
		<echo message="${name} build file" />
		<echo message="------------------------------------------------------" />
		<echo message="" />
		<echo message="Among the available targets are:" />
		<echo message="" />
		<echo message="build-jar    --> create jar" />
		<echo message="build-war    --> create jar and war" />
		<echo message="update-lams-build --> copy jar file to lams_build/lib/lams" />
		<echo message="test-report  --> run tests" />
		<echo message="" />
	</target>

	<target name="init">
		<available property="xdoclet-jars-installed"
			file="lib/xdoclet/xdoclet-${xdoclet.version}.jar" />
	</target>


	<!-- ================================================================ -->
	<!-- Preparations									                  -->
	<!-- ================================================================ -->
	<target name="preparedirs">
		<mkdir dir="${build}" />
		<mkdir dir="${build.classes.java}" />
		<mkdir dir="${build.classes.test}" />
		<mkdir dir="${build.lib}" />
	</target>

	<target name="clean" depends="preparedirs"
		description="removes all class files">
		<delete>
			<fileset dir="${build.classes.java}" />
			<fileset dir="${build.classes.test}" />
			<fileset dir="${build.lib}" />
		</delete>
	</target>

	<target name="compile.java" depends="clean"
		description="compile java sources">
		<javac srcdir="${src.java.dir}" compiler="modern"
			destdir="${build.classes.java}" deprecation="on" debug="on">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
		</javac>
  		<copy overwrite="yes" todir="${build.classes.java}">
  			<fileset dir="${src.java.dir}">
  				<include name="*.hbm.xml"/>
  			</fileset>
  		</copy>	
		<copy overwrite="yes"
			todir="${build.classes.test}/${learning.path}">
			<fileset dir="${src.java.dir}/${learning.path}">
				<include name="*.xml" />
			</fileset>
		</copy>
  		<copy overwrite="yes" todir="${build.classes.java}/${learning.path}">
  			<fileset dir="${src.java.dir}/${learning.path}">
  				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
  			</fileset>
  		</copy>	
	</target>

	<target name="compile.test" depends="compile.java">
		<javac destdir="${build.classes.test}" compiler="modern">
			<src path="${src.test.dir}" />
			<classpath>
				<pathelement location="${build.classes.java}" />
				<path refid="project.classpath" />
			</classpath>
		</javac>
		<copy overwrite="yes" todir="${build.classes.test}">
			<fileset dir="${src.test.dir}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>
	</target>
	<!-- ================================================================ -->
	<!-- Make jar archive for deployment        		    	          -->
	<!-- ================================================================ -->
	<target name="build-jar" depends="compile.java" description="creates jar file">
		<delete file="${build.lib}/${product}.jar"/>
		<jar jarfile="${build.lib}/${product}.jar" manifest="${conf.dir}/jar/META-INF/MANIFEST.MF">
			<fileset dir="${build.classes.java}">
			</fileset>
			<fileset dir="${build.classes.test}">
			</fileset>			
		</jar>
		<copy overwrite="yes" todir="${build.lib}/language/${learning.path}">
			<fileset dir="${conf.language.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.txt"/>
			</fileset>
		</copy>
	</target>
	<!-- =================================================================== -->
	<!-- Fails if XDoclet 1.2.x is not on classpath                          -->
	<!-- =================================================================== -->
	<target name="fail-if-no-xdoclet-1.2"
		unless="xdoclet-jars-installed">
		<fail>
			You must download several jar files before you can build
			Middlegen. Execute the "download-deps" target. Then try to
			build again.

			If you are behind a proxy, you should define the properties
			http.proxyHost and http.proxyPort. Example:

			ant -Dhttp.proxyHost=foo.com -Dhttp.proxyPort=8080

			It's also possible to download the jars manually.
		</fail>
	</target>
	<!-- target name="check-driver-present">
		<available file="${database.driver.file}" type="file" property="driver.present"/>
		</target>
		<target name="panic-if-driver-not-present" unless="driver.present">
		<fail>
		The JDBC driver you have specified by including one of the files in ${basedir}/config/database
		doesn't exist. You have to download this driver separately and put it in ${database.driver.file}
		Please make sure you're using a version that is equal or superior to the one we looked for.
		If you name the driver jar file differently, please update the database.driver.file property
		in the ${basedir}/config/database/xxx.xml file accordingly.
		</fail>
		</target-->

	<!-- =================================================================== -->
	<!-- Compile hibernate                                                   -->
	<!-- =================================================================== -->
	<!-- target name="compile-hibernate" depends="hibernatedoclet"
		description="Compile hibernate">
		<javac srcdir="${build.gen-src.dir}"
			destdir="${build.classes.dir}" classpathref="lib.class.path">
			<include name="**/hibernate/**/*" />
		</javac>
	</target-->

	<!-- =================================================================== -->
	<!-- Run xdoclet for hibernate                                           -->
	<!-- =================================================================== -->
	<!-- taskdef name="hibernatedoclet"
		classname="xdoclet.modules.hibernate.HibernateDocletTask">
		<classpath refid="all-libs" />
	</taskdef-->

	<taskdef name="webdoclet"
		classname="xdoclet.modules.web.WebDocletTask">
		<classpath refid="all-libs" />
	</taskdef>

	<!-- target name="hibernatedoclet" description="Run hibernatedoclet">
		<hibernatedoclet destdir="${conf.hibernate.dir}/mapping"
			excludedtags="@version,@author,@todo" force="${generated.forced}"
			verbose="true">

			<fileset dir="${src.java.dir}">
				<include name="${survey.path}/*.java" />
			</fileset>
			<hibernate version="3.0" />

		</hibernatedoclet>
	</target-->


	<target name="webdoclet" depends="preparedirs">
		<webdoclet destdir="${generated.java}"
			force="${xdoclet.force}">

			<fileset dir="${src.java.dir}">
				<include name="**/web/action/*.java" />
				<include name="**/web/form/*.java" />
			</fileset>
			<fileset dir="${src.test.dir}">
				<include name="**/web/action/*.java" />
				<include name="**/web/form/*.java" />
			</fileset>

			<deploymentdescriptor servletspec="2.4" distributable="false"
				destdir="${conf.webinf.dir}" mergedir="${conf.xdoclet.dir}"
				sessiontimeout="${sessiontimeout}" />

			<strutsconfigxml destdir="${conf.struts.dir}"
				mergedir="${conf.xdoclet.dir}" version="1.2" />
		</webdoclet>
	</target>

	<!-- = = = = = = = = = = = = = = = = = = = = = = = =  -->
	<!-- Make the war archive  for deployment             -->
	<!-- = = = = = = = = = = = = = = = = = = = = = = = =  -->
	<target name="build-war" depends="webdoclet, build-jar" description="creates war file">
		<delete file="${build.lib}/${product}.war"/>
		<war warfile="${build.lib}/${product}.war"   manifest="${conf.dir}/war/META-INF/MANIFEST.MF" 
  				webxml="${conf.webinf.dir}/web.xml">
			<webinf dir="${conf.webinf.dir}">
				<include name="*.xml"/>
				<include name="struts/*"/>
				<include name="struts/tlds/*"/>
				<include name="jstl/*"/>
				<include name="jstl/tlds/*"/>
				<include name="tags/*"/>
				<include name="lams.tld"/>
				<exclude name="web.xml"/>
				<exclude name="classes"/>
			</webinf>
			<fileset dir="${conf.web.dir}">
				<include name="*"/>
				<include name="css/*"/>
				<include name="exportPortfolio/*"/>
				<include name="notebook/*"/>
				<include name="gate/*"/>
				<include name="grouping/*"/>
				<include name="images/*"/>
				<include name="layout/*"/>
				<include name="branching/*"/>
				<include name="sequence/*"/>
			</fileset>
		</war>
	</target>
	
	<target name="copy-tags" depends="" description="copy the lams.tld and the lams tags">
	   		<copy todir="${conf.webinf.dir}" overwrite="yes" file="${tag.web.dir}/lams.tld" />	
			<copy todir="${conf.webinf.dir}/tags" overwrite="yes">
				<fileset dir="${tag.web.dir}/tags">
					<include name="*.tag" />
				</fileset>
			</copy>
	</target>

	<!-- =================================================================== -->
	<!-- Copy the jar file to the shared lams_build area					 -->
	<!-- =================================================================== -->
	<target name="update-lams-build" depends="build-jar" description="Copies the jar file to lams_build/lib/lams">
  		<copy overwrite="yes" todir="${sharedlib}/lams/">
  			<fileset dir="${build.lib}">
  				<include name="${product}.jar"/>
  			</fileset>
  		</copy>	
	</target>

	<!-- =================================================================== -->
	<!-- Run JUnit Tests                                                     -->
	<!-- =================================================================== -->
	<target name="test" depends="compile.test">
		<mkdir dir="${build.report}" />
		<junit printsummary="yes" haltonerror="no" haltonfailure="no"
			fork="yes">
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<batchtest todir="${build.report}">
				<fileset dir="${src.test.dir}">
					<include name="**/Test*.java" />
					<exclude name="**/*Action.java" />
					<exclude name="**/*Form.java" />
				</fileset>
			</batchtest>
			<classpath>
				<pathelement location="${build.classes.java}" />
				<pathelement location="${build.classes.test}" />
				<pathelement location="${conf.hibernate.mapping.dir}" />
				<pathelement location="${conf.web.dir}" />
				<path refid="surveytool.classpath" />
				<path refid="project.classpath" />
			</classpath>
		</junit>
	</target>

	<target name="test-report" depends="test">
		<mkdir dir="${build.report}/html" />
		<junitreport todir="${build.report}">
			<fileset dir="${build.report}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${build.report}/html" />
		</junitreport>
	</target>

	<!-- deploy-war : for convenience during development. Should be deployed via the master build -->
	<target name="deploy-war" depends="build-war">
		<copy file="${build.lib}/${product}.jar"
				todir="${jboss.deploy}"/>
		<copy file="${build.lib}/${product}.war"
				todir="${jboss.deploy}"/>
	</target>

	<target name="deploy-jar" depends="build-jar">
		<copy file="${build.lib}/${product}.jar"
				todir="${jboss.deploy}"/>
	</target>
	
	<!-- explode-war : for convenience during development.  Explodes lams-learning.war in the lams.ear folder -->
	<target name="explode-war" depends="" description="explode war package to a war folder">
		<!-- rename war file to avoid name conflict -->
		<move tofile="${jboss.deploy}/temp-${product}.war" file="${jboss.deploy}/${product}.war" />
		<!-- explode the war -->
		<unjar src="${jboss.deploy}/temp-${product}.war" dest="${jboss.deploy}/${product}.war" />
		<!-- delete temp war file -->
		<delete>
			<fileset dir="${jboss.deploy}">
				<include name="temp-${product}.war" />
			</fileset>
		</delete>
	</target>

	<!-- ================================= -->
	<!--  target: synchronize-jsp          -->            
	<!--  ================================= -->
	<target name="synchronize-deploy" description="copy non-java file into deploy folder - war must be expanded. Do not overwrite the web.xml">
		<copy verbose="yes" todir="${jboss.deploy}/${product}.war">
			<fileset dir="${conf.web.dir}">
				<include name="**/*.*" />
				<exclude name="WEB-INF/web.xml"/>
				<exclude name="WEB-INF/classes/**"/>
			</fileset>
		</copy>
	</target>

</project>
